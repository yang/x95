// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: glla5sV429CN1F
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MenuLinkDesktop from "../../MenuLinkDesktop"; // plasmic-import: UGKDap61CYE_TA/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicNavDropdownLnTeaMenu.module.css"; // plasmic-import: glla5sV429CN1F/css

import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: 24-7ruBtBXd8B2/icon

export type PlasmicNavDropdownLnTeaMenu__VariantMembers = {};

export type PlasmicNavDropdownLnTeaMenu__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavDropdownLnTeaMenu__VariantsArgs;
export const PlasmicNavDropdownLnTeaMenu__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNavDropdownLnTeaMenu__ArgsType = {
  link?: string;
};

type ArgPropType = keyof PlasmicNavDropdownLnTeaMenu__ArgsType;
export const PlasmicNavDropdownLnTeaMenu__ArgProps = new Array<ArgPropType>(
  "link"
);

export type PlasmicNavDropdownLnTeaMenu__OverridesType = {
  root?: p.Flex<"div">;
  joinCtaBlock?: p.Flex<"a"> & Partial<LinkProps>;
  featured?: p.Flex<"div">;
  teas?: p.Flex<"div">;
  flavors?: p.Flex<"div">;
  types?: p.Flex<"div">;
  benefit?: p.Flex<"div">;
};

export interface DefaultNavDropdownLnTeaMenuProps {}

function PlasmicNavDropdownLnTeaMenu__RenderFunc(props: {
  variants: PlasmicNavDropdownLnTeaMenu__VariantsArgs;
  args: PlasmicNavDropdownLnTeaMenu__ArgsType;
  overrides: PlasmicNavDropdownLnTeaMenu__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          link: "/" as const
        },
        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_sips_by_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ujITd)}
          >
            <p.Stack
              as={p.PlasmicLink}
              data-plasmic-name={"joinCtaBlock"}
              data-plasmic-override={overrides.joinCtaBlock}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.joinCtaBlock
              )}
              component={Link}
              href={"/products/personalized-tea-discovery-box" as const}
              platform={"nextjs"}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__voocU)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yxZuq)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vD97L
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__l7OP
                          )}
                        >
                          {"Join the #1 Rated Tea Club  →"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uKKzk
                          )}
                        >
                          {"Four personalized teas for just $16/month."}
                        </div>
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"featured"}
              data-plasmic-override={overrides.featured}
              hasGap={true}
              className={classNames(projectcss.all, sty.featured)}
            >
              <p
                className={classNames(
                  projectcss.all,
                  projectcss.p,
                  projectcss.__wab_text,
                  sty.p__wOk2R
                )}
              >
                {"Featured"}
              </p>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__gRdv)}
                >
                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__ikrnX
                    )}
                    link={"/collections/new-tea-arrivals/" as const}
                  >
                    {"New Arrivals"}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__wfws3
                    )}
                    link={"/collections/top-rated-teas/" as const}
                  >
                    {"Top Rated"}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__nXxbd
                    )}
                    link={"/collections/themed-boxes" as const}
                  >
                    {"Themed Boxes"}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__ofhlY
                    )}
                    link={"/collections/subscribe-save/" as const}
                  >
                    {"Subscribe + Save"}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__eDrgJ
                    )}
                    link={"/collections/sips-by-exclusives" as const}
                  >
                    {"Sips by Exclusives"}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop___4Z1Fo
                    )}
                    link={"/collections/monthly-deals" as const}
                  >
                    {"Monthly Deals"}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__opFzN
                    )}
                    link={"/collections/tea-gifts" as const}
                  >
                    {"Tea Gifts"}
                  </MenuLinkDesktop>
                </p.Stack>
              ) : null}
            </p.Stack>

            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"teas"}
                data-plasmic-override={overrides.teas}
                hasGap={true}
                className={classNames(projectcss.all, sty.teas)}
              >
                <p
                  className={classNames(
                    projectcss.all,
                    projectcss.p,
                    projectcss.__wab_text,
                    sty.p__qfv9Y
                  )}
                >
                  {"Teas"}
                </p>

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__jaDtG)}
                  >
                    <MenuLinkDesktop
                      className={classNames(
                        "__wab_instance",
                        sty.menuLinkDesktop__qOW
                      )}
                      link={"/collections/iced-tea-favorites/" as const}
                    >
                      {"Iced Tea"}
                    </MenuLinkDesktop>

                    <MenuLinkDesktop
                      className={classNames(
                        "__wab_instance",
                        sty.menuLinkDesktop__wPs6N
                      )}
                      link={"/collections/best-loose-leaf-tea/" as const}
                    >
                      {"Loose Leaf"}
                    </MenuLinkDesktop>

                    <MenuLinkDesktop
                      className={classNames(
                        "__wab_instance",
                        sty.menuLinkDesktop___7WhSy
                      )}
                      link={"/collections/best-bagged-tea/" as const}
                    >
                      {"Bagged Tea"}
                    </MenuLinkDesktop>

                    <MenuLinkDesktop
                      className={classNames(
                        "__wab_instance",
                        sty.menuLinkDesktop__gWml9
                      )}
                      link={"/collections/best-caffeinated-tea" as const}
                    >
                      {"Caffeinated"}
                    </MenuLinkDesktop>

                    <MenuLinkDesktop
                      className={classNames(
                        "__wab_instance",
                        sty.menuLinkDesktop__v1IcM
                      )}
                      link={"/collections/caffeine-free" as const}
                    >
                      {"No Caffeine"}
                    </MenuLinkDesktop>
                  </p.Stack>
                ) : null}
              </p.Stack>
            ) : null}

            <p.Stack
              as={"div"}
              data-plasmic-name={"flavors"}
              data-plasmic-override={overrides.flavors}
              hasGap={true}
              className={classNames(projectcss.all, sty.flavors)}
            >
              <p
                className={classNames(
                  projectcss.all,
                  projectcss.p,
                  projectcss.__wab_text,
                  sty.p__og8Ac
                )}
              >
                {"Flavors"}
              </p>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__uczX0)}
                >
                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__zq43R
                    )}
                    link={"/collections/best-earl-grey-tea" as const}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.freeBox__wJO)}
                      >
                        <Icon20Icon
                          className={classNames(projectcss.all, sty.svg__di7Rp)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cWfZg
                          )}
                        >
                          {"Earl Grey"}
                        </div>
                      </p.Stack>
                    ) : null}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__uzc4H
                    )}
                    link={"/collections/chai-shop/" as const}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xXrIy
                        )}
                      >
                        <Icon20Icon
                          className={classNames(projectcss.all, sty.svg__n33QO)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__v3CFw
                          )}
                        >
                          {"Chai"}
                        </div>
                      </p.Stack>
                    ) : null}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__sHaN4
                    )}
                    link={"/collections/chocolate-tea-shop" as const}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rAnBh
                        )}
                      >
                        <Icon20Icon
                          className={classNames(projectcss.all, sty.svg__clw4)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9J1E
                          )}
                        >
                          {"Chocolate"}
                        </div>
                      </p.Stack>
                    ) : null}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__qBmDd
                    )}
                    link={"/collections/sweet-tea-shop" as const}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__teOy
                        )}
                      >
                        <Icon20Icon
                          className={classNames(projectcss.all, sty.svg__r2SxS)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kBjim
                          )}
                        >
                          {"Sweet"}
                        </div>
                      </p.Stack>
                    ) : null}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__hjhy
                    )}
                    link={"/collections/best-mint-tea-shop" as const}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__o4LmR
                        )}
                      >
                        <Icon20Icon
                          className={classNames(projectcss.all, sty.svg__dtZeo)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___58Hmu
                          )}
                        >
                          {"Mint"}
                        </div>
                      </p.Stack>
                    ) : null}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__uh1Bc
                    )}
                    link={"/collections/peach-tea-shop" as const}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6Tqk
                        )}
                      >
                        <Icon20Icon
                          className={classNames(projectcss.all, sty.svg__kUu5B)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__t1SjX
                          )}
                        >
                          {"Peach"}
                        </div>
                      </p.Stack>
                    ) : null}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop___9JeVy
                    )}
                    link={"/collections/fruity-tea-shop" as const}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__niNC
                        )}
                      >
                        <Icon20Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___0TPdo
                          )}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0050W
                          )}
                        >
                          {"Fruity"}
                        </div>
                      </p.Stack>
                    ) : null}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__mAvc4
                    )}
                    link={"/collections/floral-tea-shop" as const}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qQgOe
                        )}
                      >
                        <Icon20Icon
                          className={classNames(projectcss.all, sty.svg__kaNGt)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oFvaY
                          )}
                        >
                          {"Floral"}
                        </div>
                      </p.Stack>
                    ) : null}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__lin99
                    )}
                    link={"/collections/tea" as const}
                  >
                    {"Shop All"}
                  </MenuLinkDesktop>
                </p.Stack>
              ) : null}
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"types"}
              data-plasmic-override={overrides.types}
              hasGap={true}
              className={classNames(projectcss.all, sty.types)}
            >
              <p
                className={classNames(
                  projectcss.all,
                  projectcss.p,
                  projectcss.__wab_text,
                  sty.p__p50O
                )}
              >
                {"Types"}
              </p>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__oqCzR)}
                >
                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__zhDk0
                    )}
                    link={"/collections/herbal-tea/" as const}
                  >
                    {"Herbal"}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__eGlVa
                    )}
                    link={"/collections/best-black-tea/" as const}
                  >
                    {"Black"}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__eTbCt
                    )}
                    link={"/collections/green-tea/" as const}
                  >
                    {"Green"}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__goEhr
                    )}
                    link={"/collections/best-rooibos-tea" as const}
                  >
                    {"Rooibos"}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop___7SpzX
                    )}
                    link={"/collections/best-oolong-tea" as const}
                  >
                    {"Oolong"}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop___4FVz
                    )}
                    link={"/collections/hibiscus-tea" as const}
                  >
                    {"Hibiscus"}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__xK0Sw
                    )}
                    link={"/collections/white-tea-shop" as const}
                  >
                    {"White"}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__n8Bm9
                    )}
                    link={"/collections/yerba-mate-tea" as const}
                  >
                    {"Yerba Mate"}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__es2Ny
                    )}
                    link={"/collections/tea" as const}
                  >
                    {"Shop All"}
                  </MenuLinkDesktop>
                </p.Stack>
              ) : null}
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"benefit"}
              data-plasmic-override={overrides.benefit}
              hasGap={true}
              className={classNames(projectcss.all, sty.benefit)}
            >
              <p
                className={classNames(
                  projectcss.all,
                  projectcss.p,
                  projectcss.__wab_text,
                  sty.p__a2Fl4
                )}
              >
                {"Benefit"}
              </p>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___3YsBz)}
                >
                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop___9Vg0V
                    )}
                    link={"/collections/sleep-tea-shop/" as const}
                  >
                    {"Sleep"}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__vv4L
                    )}
                    link={"/collections/energizing-tea-shop/" as const}
                  >
                    {"Energy"}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__jiWt
                    )}
                    link={"/collections/stress-relief-tea-collection/" as const}
                  >
                    {"Stress Relief"}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop___4JtkK
                    )}
                    link={"/collections/immunity-tea-shop" as const}
                  >
                    {"Immunity"}
                  </MenuLinkDesktop>

                  <MenuLinkDesktop
                    className={classNames(
                      "__wab_instance",
                      sty.menuLinkDesktop__ikPWv
                    )}
                    link={"/collections/happy-tea-shop" as const}
                  >
                    {"Mood Boosting"}
                  </MenuLinkDesktop>
                </p.Stack>
              ) : null}
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "joinCtaBlock",
    "featured",
    "teas",
    "flavors",
    "types",
    "benefit"
  ],
  joinCtaBlock: ["joinCtaBlock"],
  featured: ["featured"],
  teas: ["teas"],
  flavors: ["flavors"],
  types: ["types"],
  benefit: ["benefit"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  joinCtaBlock: "a";
  featured: "div";
  teas: "div";
  flavors: "div";
  types: "div";
  benefit: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavDropdownLnTeaMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavDropdownLnTeaMenu__VariantsArgs;
    args?: PlasmicNavDropdownLnTeaMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavDropdownLnTeaMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavDropdownLnTeaMenu__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavDropdownLnTeaMenu__ArgProps,
          internalVariantPropNames: PlasmicNavDropdownLnTeaMenu__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNavDropdownLnTeaMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavDropdownLnTeaMenu";
  } else {
    func.displayName = `PlasmicNavDropdownLnTeaMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicNavDropdownLnTeaMenu = Object.assign(
  // Top-level PlasmicNavDropdownLnTeaMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    joinCtaBlock: makeNodeComponent("joinCtaBlock"),
    featured: makeNodeComponent("featured"),
    teas: makeNodeComponent("teas"),
    flavors: makeNodeComponent("flavors"),
    types: makeNodeComponent("types"),
    benefit: makeNodeComponent("benefit"),

    // Metadata about props expected for PlasmicNavDropdownLnTeaMenu
    internalVariantProps: PlasmicNavDropdownLnTeaMenu__VariantProps,
    internalArgProps: PlasmicNavDropdownLnTeaMenu__ArgProps
  }
);

export default PlasmicNavDropdownLnTeaMenu;
/* prettier-ignore-end */
