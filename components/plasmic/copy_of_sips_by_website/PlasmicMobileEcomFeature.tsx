// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: X-5x9z1iG-kBMY
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicMobileEcomFeature.module.css"; // plasmic-import: X-5x9z1iG-kBMY/css

export type PlasmicMobileEcomFeature__VariantMembers = {};

export type PlasmicMobileEcomFeature__VariantsArgs = {};
type VariantPropType = keyof PlasmicMobileEcomFeature__VariantsArgs;
export const PlasmicMobileEcomFeature__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMobileEcomFeature__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  link?: string;
};

type ArgPropType = keyof PlasmicMobileEcomFeature__ArgsType;
export const PlasmicMobileEcomFeature__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "link"
);

export type PlasmicMobileEcomFeature__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultMobileEcomFeatureProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  link?: string;
  className?: string;
}

function PlasmicMobileEcomFeature__RenderFunc(props: {
  variants: PlasmicMobileEcomFeature__VariantsArgs;
  args: PlasmicMobileEcomFeature__ArgsType;
  overrides: PlasmicMobileEcomFeature__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_sips_by_design_system_css.plasmic_tokens,
        sty.root
      )}
      component={Link}
      href={args.link}
      platform={"nextjs"}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__zlM76)}>
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={"Glass teapot with a crescent moon handle lid" as const}
                className={classNames(sty.img__y2No)}
                displayHeight={"100%" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/copy_of_sips_by_website/images/almondCookieHerbal4Ad790D5Da5B4B76A0299Bc0B4C214961Jpg.jpeg",
                  fullWidth: 3024,
                  fullHeight: 3024,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.children
          })}
        </div>
      ) : null}

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__pj3A0)}>
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__dygSn)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nmZzt
                  )}
                >
                  {"Stay cool for the summer with Iced Tea!"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jwKJc
                  )}
                >
                  {"Shop Now â†’"}
                </div>
              </p.Stack>
            ),

            value: args.slot
          })}
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMobileEcomFeature__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMobileEcomFeature__VariantsArgs;
    args?: PlasmicMobileEcomFeature__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMobileEcomFeature__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMobileEcomFeature__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMobileEcomFeature__ArgProps,
          internalVariantPropNames: PlasmicMobileEcomFeature__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicMobileEcomFeature__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMobileEcomFeature";
  } else {
    func.displayName = `PlasmicMobileEcomFeature.${nodeName}`;
  }
  return func;
}

export const PlasmicMobileEcomFeature = Object.assign(
  // Top-level PlasmicMobileEcomFeature renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicMobileEcomFeature
    internalVariantProps: PlasmicMobileEcomFeature__VariantProps,
    internalArgProps: PlasmicMobileEcomFeature__ArgProps
  }
);

export default PlasmicMobileEcomFeature;
/* prettier-ignore-end */
