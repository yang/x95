// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: EJkk1_5Jfx01SZ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageRow from "../../PageRow"; // plasmic-import: AKAM4dN1Fw/component
import Button from "../../Button"; // plasmic-import: sw7k7LkFBTC/component
import SectionMetricsMetric from "../../SectionMetricsMetric"; // plasmic-import: sW6svfkibZkesa/component

import { useScreenVariants as useScreenVariants_6PiZsruRybCC } from "../sips_by_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: 6piZsruRybC-C/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicGoogleTeaboxOffer.module.css"; // plasmic-import: EJkk1_5Jfx01SZ/css

import ChecksvgIcon from "../sips_by_design_system/icons/PlasmicIcon__Checksvg"; // plasmic-import: cFH4ysruE7k/icon
import IconIcon from "../sips_by_design_system/icons/PlasmicIcon__Icon"; // plasmic-import: XuqNxn7mH8d/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Id8KGjLkdQoXxj/icon

export type PlasmicGoogleTeaboxOffer__VariantMembers = {};

export type PlasmicGoogleTeaboxOffer__VariantsArgs = {};
type VariantPropType = keyof PlasmicGoogleTeaboxOffer__VariantsArgs;
export const PlasmicGoogleTeaboxOffer__VariantProps =
  new Array<VariantPropType>();

export type PlasmicGoogleTeaboxOffer__ArgsType = {};
type ArgPropType = keyof PlasmicGoogleTeaboxOffer__ArgsType;
export const PlasmicGoogleTeaboxOffer__ArgProps = new Array<ArgPropType>();

export type PlasmicGoogleTeaboxOffer__OverridesType = {
  root?: p.Flex<"div">;
  hero?: p.Flex<"section">;
  p?: p.Flex<"p">;
  mobileImage?: p.Flex<typeof p.PlasmicImg>;
  logos?: p.Flex<"section">;
  whatYouGet?: p.Flex<"section">;
  dualCta?: p.Flex<"section">;
  howItWorks?: p.Flex<"section">;
  dualCta2?: p.Flex<"section">;
  whatSippersAreSaying?: p.Flex<"section">;
  metrics?: p.Flex<"section">;
  dualCta3?: p.Flex<"section">;
};

export interface DefaultGoogleTeaboxOfferProps {}

function PlasmicGoogleTeaboxOffer__RenderFunc(props: {
  variants: PlasmicGoogleTeaboxOffer__VariantsArgs;
  args: PlasmicGoogleTeaboxOffer__ArgsType;
  overrides: PlasmicGoogleTeaboxOffer__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6PiZsruRybCC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_sips_by_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            className={classNames(projectcss.all, sty.hero)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__rVywL)}>
              <PageRow
                className={classNames("__wab_instance", sty.pageRow___2BPPq)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cyFJ)}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1___6Tv1G
                    )}
                  >
                    {"#1 Rated Tea Box"}
                  </h1>

                  <p
                    data-plasmic-name={"p"}
                    data-plasmic-override={overrides.p}
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"Get "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"50%"}
                      </span>
                      <React.Fragment>
                        {" off your first month, with code google50"}
                      </React.Fragment>
                    </React.Fragment>
                  </p>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___1OSrQ)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__lFgof
                      )}
                      link={"/products/personalized-tea-discovery-box" as const}
                      variant={"highlight" as const}
                    >
                      {"Join Now"}
                    </Button>
                  </p.Stack>
                </p.Stack>
              </PageRow>
            </div>

            {(
              hasVariant(globalVariants, "screen", "tabletLandscape")
                ? true
                : true
            ) ? (
              <p.PlasmicImg
                data-plasmic-name={"mobileImage"}
                data-plasmic-override={overrides.mobileImage}
                alt={""}
                className={classNames(sty.mobileImage)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? ("100%" as const)
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? ("100%" as const)
                    : ("100%" as const)
                }
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? ("100%" as const)
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? ("100%" as const)
                    : ("100%" as const)
                }
                loading={
                  hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? ("lazy" as const)
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? ("lazy" as const)
                    : ("lazy" as const)
                }
                src={
                  "https://cdn.shopify.com/s/files/1/1677/2601/files/bg-sips-by-box-tea-mobile-70_400x@2x.jpg?v=1637701585" as const
                }
              />
            ) : null}
          </section>

          {true ? (
            <section
              data-plasmic-name={"logos"}
              data-plasmic-override={overrides.logos}
              className={classNames(projectcss.all, sty.logos)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__oRfd5)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__xctdL)}>
                  {(
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__i1Wyv)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__fFV)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "tabletPortrait")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "tabletPortrait")
                            ? ("162px" as const)
                            : ("140px" as const)
                        }
                        loading={
                          hasVariant(globalVariants, "screen", "tabletPortrait")
                            ? ("lazy" as const)
                            : ("lazy" as const)
                        }
                        src={
                          hasVariant(globalVariants, "screen", "tabletPortrait")
                            ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/logo-buzzfeed-black-opt.svg?v=1639435144" as const)
                            : ("https://cdn.shopify.com/s/files/1/1677/2601/files/logo-buzzfeed-black-opt.svg?v=1639435144" as const)
                        }
                      />
                    </div>
                  ) : null}

                  {(
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gt09X)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___5ZB76)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "tabletPortrait")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={
                          hasVariant(globalVariants, "screen", "tabletPortrait")
                            ? ("lazy" as const)
                            : ("lazy" as const)
                        }
                        src={
                          hasVariant(globalVariants, "screen", "tabletPortrait")
                            ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/logo-nbc-news-black-opt.svg?v=1639437059" as const)
                            : ("https://cdn.shopify.com/s/files/1/1677/2601/files/logo-nbc-news-black-opt.svg?v=1639437059" as const)
                        }
                      />
                    </div>
                  ) : null}

                  {(
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ut6G2)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__woNd)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "tabletPortrait")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={
                          hasVariant(globalVariants, "screen", "tabletPortrait")
                            ? ("lazy" as const)
                            : ("lazy" as const)
                        }
                        src={
                          hasVariant(globalVariants, "screen", "tabletPortrait")
                            ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/logo-real-simple-black-opt.svg?v=1639435144" as const)
                            : ("https://cdn.shopify.com/s/files/1/1677/2601/files/logo-real-simple-black-opt.svg?v=1639435144" as const)
                        }
                      />
                    </div>
                  ) : null}

                  {(
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__eBukT)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__ayn5C)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "tabletPortrait")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "tabletPortrait")
                            ? ("159px" as const)
                            : ("129px" as const)
                        }
                        loading={
                          hasVariant(globalVariants, "screen", "tabletPortrait")
                            ? ("lazy" as const)
                            : ("lazy" as const)
                        }
                        src={
                          hasVariant(globalVariants, "screen", "tabletPortrait")
                            ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/logo-womens-health-black-opt.svg?v=1639435144" as const)
                            : ("https://cdn.shopify.com/s/files/1/1677/2601/files/logo-womens-health-black-opt.svg?v=1639435144" as const)
                        }
                      />
                    </div>
                  ) : null}
                </div>
              </PageRow>
            </section>
          ) : null}

          <section
            data-plasmic-name={"whatYouGet"}
            data-plasmic-override={overrides.whatYouGet}
            className={classNames(projectcss.all, sty.whatYouGet)}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow__y81M)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__cykcT
                )}
              >
                {"Made For You"}
              </h2>

              <div className={classNames(projectcss.all, sty.freeBox__myvkB)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fFlnA)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__knUxm)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__dDl3M)}
                      displayHeight={"45px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"45px" as const}
                      loading={"lazy" as const}
                      src={
                        "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-bag.svg?v=1636499860" as const
                      }
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6GUfk
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletLandscape")
                        ? "Four new teas curated just for you every month"
                        : hasVariant(globalVariants, "screen", "tabletPortrait")
                        ? "Four new teas curated just for you every month"
                        : "Four new teas curated just for you every month"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__oi1E)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__viS)}
                      displayHeight={"45px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"45px" as const}
                      loading={"lazy" as const}
                      src={
                        "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-pot.svg?v=1636499860" as const
                      }
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__y5Oh
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletPortrait")
                        ? "Access to exclusive tea brands only on Sips by"
                        : "Access to exclusive tea brands only on Sips by"}
                    </div>
                  </div>
                </p.Stack>

                {(
                  hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2J5Im)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__rvcia)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("100%" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("100%" as const)
                          : ("214px" as const)
                      }
                      loading={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("lazy" as const)
                          : ("lazy" as const)
                      }
                      src={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                          : ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                      }
                    />
                  </div>
                ) : null}

                {(
                  hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___0Erq6)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dWOo)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__iQwM)}
                        displayHeight={"45px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"45px" as const}
                        loading={"lazy" as const}
                        src={
                          "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-teacup.svg?v=1636499860" as const
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tSo7M
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "tabletPortrait")
                          ? "Reusable tea filters for loose teas + brewing tips"
                          : "Reusable tea filters for loose teas + brewing tips"}
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__mx037)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__enUtQ)}
                        displayHeight={"45px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"45px" as const}
                        loading={"lazy" as const}
                        src={
                          "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-leaves.svg?v=1636499860" as const
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__khPro
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "tabletPortrait")
                          ? "Early access to product launches and sales"
                          : "Early access to product launches and sales"}
                      </div>
                    </div>
                  </p.Stack>
                ) : null}

                {(
                  hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ptzYv)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__eXkkY)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("100%" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("214px" as const)
                          : ("214px" as const)
                      }
                      loading={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("lazy" as const)
                          : ("lazy" as const)
                      }
                      src={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                          : ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                      }
                    />
                  </div>
                ) : null}
              </div>
            </PageRow>
          </section>

          <section
            data-plasmic-name={"dualCta"}
            data-plasmic-override={overrides.dualCta}
            className={classNames(projectcss.all, sty.dualCta)}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow__pIwQx)}
            >
              <Button
                className={classNames("__wab_instance", sty.button__dwDlw)}
                link={"/products/personalized-tea-discovery-box" as const}
              >
                {"Get Your Box"}
              </Button>
            </PageRow>
          </section>

          <section
            data-plasmic-name={"howItWorks"}
            data-plasmic-override={overrides.howItWorks}
            className={classNames(projectcss.all, sty.howItWorks)}
          >
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__msUy4
              )}
            >
              {hasVariant(globalVariants, "screen", "tabletPortrait")
                ? "How It Works"
                : "How It Works"}
            </h2>

            <PageRow
              className={classNames("__wab_instance", sty.pageRow__uupCf)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__wAuVv)}>
                {(
                  hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sqeD6)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eDnnD
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletLandscape")
                        ? "1"
                        : hasVariant(globalVariants, "screen", "tabletPortrait")
                        ? "1"
                        : "1"}
                    </div>

                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__xAYk4
                      )}
                    >
                      {"Take the Quiz"}
                    </h1>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xtVrx
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletPortrait")
                        ? "Take the tea profile quiz to discover your favorite teas. It covers caffeine, flavor, loose vs. bagged, and dietary preferences."
                        : "Take the tea profile quiz to discover your favorite teas. It covers caffeine, flavor, loose vs. bagged, and dietary preferences."}
                    </div>
                  </div>
                ) : null}

                {(
                  hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kq1Ec)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qecP
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletLandscape")
                        ? "2"
                        : hasVariant(globalVariants, "screen", "tabletPortrait")
                        ? "2"
                        : "2"}
                    </div>

                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__tId3N
                      )}
                    >
                      {"Get Your Box"}
                    </h1>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gwTmS
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletPortrait")
                        ? "Our Steep technology learns your profile to select personalized teas uniquely for you and delivers them to your door"
                        : "Our Steep technology learns your profile to select personalized teas uniquely for you and delivers them to your door"}
                    </div>
                  </div>
                ) : null}

                {(
                  hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___9M0Ng)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ujxSh
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletLandscape")
                        ? "3"
                        : hasVariant(globalVariants, "screen", "tabletPortrait")
                        ? "3"
                        : "3"}
                    </div>

                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__bHcvn
                      )}
                    >
                      {"Rate Your Teas"}
                    </h1>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b7RC4
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletPortrait")
                        ? "Steep will learn to find you even better matches that make you sip and say, “Ahhh” for months to come"
                        : "Steep will learn to find you even better matches that make you sip and say, “Ahhh” for months to come"}
                    </div>
                  </div>
                ) : null}
              </div>
            </PageRow>
          </section>

          <section
            data-plasmic-name={"dualCta2"}
            data-plasmic-override={overrides.dualCta2}
            className={classNames(projectcss.all, sty.dualCta2)}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow__jSlei)}
            >
              <Button
                className={classNames("__wab_instance", sty.button___9CWyv)}
                link={"/products/personalized-tea-discovery-box" as const}
              >
                {"Get Your Box"}
              </Button>
            </PageRow>
          </section>

          <section
            data-plasmic-name={"whatSippersAreSaying"}
            data-plasmic-override={overrides.whatSippersAreSaying}
            className={classNames(projectcss.all, sty.whatSippersAreSaying)}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow___4Vr6N)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__fhoQt)}>
                <div className={classNames(projectcss.all, sty.freeBox__kw2N4)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__isZf6
                    )}
                  >
                    {"What Sippers Are Saying:"}
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__n0EL3
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? "“It’s a new month, which means new teas! They hit this one out of the park!”"
                      : hasVariant(globalVariants, "screen", "tabletPortrait")
                      ? "“It’s a new month, which means new teas! They hit this one out of the park!”"
                      : "“It’s a new month, which means new teas! They hit this one out of the park!”"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__z7COj
                    )}
                  >
                    {"— Angela in California"}
                  </div>
                </div>
              </div>
            </PageRow>
          </section>

          <section
            data-plasmic-name={"metrics"}
            data-plasmic-override={overrides.metrics}
            className={classNames(projectcss.all, sty.metrics)}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow__gyxLa)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ce8E3)}
              >
                <SectionMetricsMetric
                  className={classNames(
                    "__wab_instance",
                    sty.sectionMetricsMetric__pDoru
                  )}
                  slot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7OmSc
                      )}
                    >
                      {"Members"}
                    </div>
                  }
                >
                  {"750K"}
                </SectionMetricsMetric>

                <Icon3Icon
                  className={classNames(projectcss.all, sty.svg__faGd8)}
                  role={"img"}
                />

                <SectionMetricsMetric
                  className={classNames(
                    "__wab_instance",
                    sty.sectionMetricsMetric___7JZr2
                  )}
                  slot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uTGq6
                      )}
                    >
                      {"Tea Brands"}
                    </div>
                  }
                >
                  {"150+"}
                </SectionMetricsMetric>

                <Icon3Icon
                  className={classNames(projectcss.all, sty.svg__bMkHe)}
                  role={"img"}
                />

                <SectionMetricsMetric
                  className={classNames(
                    "__wab_instance",
                    sty.sectionMetricsMetric__dcLIk
                  )}
                  slot={"Different Teas"}
                >
                  {"2K"}
                </SectionMetricsMetric>
              </p.Stack>
            </PageRow>
          </section>

          <section
            data-plasmic-name={"dualCta3"}
            data-plasmic-override={overrides.dualCta3}
            className={classNames(projectcss.all, sty.dualCta3)}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow__l2Q0R)}
            >
              <Button
                className={classNames("__wab_instance", sty.button__s8OVy)}
                link={"/products/personalized-tea-discovery-box" as const}
              >
                {"Get Your Box"}
              </Button>
            </PageRow>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "p",
    "mobileImage",
    "logos",
    "whatYouGet",
    "dualCta",
    "howItWorks",
    "dualCta2",
    "whatSippersAreSaying",
    "metrics",
    "dualCta3"
  ],
  hero: ["hero", "p", "mobileImage"],
  p: ["p"],
  mobileImage: ["mobileImage"],
  logos: ["logos"],
  whatYouGet: ["whatYouGet"],
  dualCta: ["dualCta"],
  howItWorks: ["howItWorks"],
  dualCta2: ["dualCta2"],
  whatSippersAreSaying: ["whatSippersAreSaying"],
  metrics: ["metrics"],
  dualCta3: ["dualCta3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  hero: "section";
  p: "p";
  mobileImage: typeof p.PlasmicImg;
  logos: "section";
  whatYouGet: "section";
  dualCta: "section";
  howItWorks: "section";
  dualCta2: "section";
  whatSippersAreSaying: "section";
  metrics: "section";
  dualCta3: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGoogleTeaboxOffer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGoogleTeaboxOffer__VariantsArgs;
    args?: PlasmicGoogleTeaboxOffer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGoogleTeaboxOffer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicGoogleTeaboxOffer__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGoogleTeaboxOffer__ArgProps,
          internalVariantPropNames: PlasmicGoogleTeaboxOffer__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicGoogleTeaboxOffer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGoogleTeaboxOffer";
  } else {
    func.displayName = `PlasmicGoogleTeaboxOffer.${nodeName}`;
  }
  return func;
}

export const PlasmicGoogleTeaboxOffer = Object.assign(
  // Top-level PlasmicGoogleTeaboxOffer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    p: makeNodeComponent("p"),
    mobileImage: makeNodeComponent("mobileImage"),
    logos: makeNodeComponent("logos"),
    whatYouGet: makeNodeComponent("whatYouGet"),
    dualCta: makeNodeComponent("dualCta"),
    howItWorks: makeNodeComponent("howItWorks"),
    dualCta2: makeNodeComponent("dualCta2"),
    whatSippersAreSaying: makeNodeComponent("whatSippersAreSaying"),
    metrics: makeNodeComponent("metrics"),
    dualCta3: makeNodeComponent("dualCta3"),

    // Metadata about props expected for PlasmicGoogleTeaboxOffer
    internalVariantProps: PlasmicGoogleTeaboxOffer__VariantProps,
    internalArgProps: PlasmicGoogleTeaboxOffer__ArgProps
  }
);

export default PlasmicGoogleTeaboxOffer;
/* prettier-ignore-end */
