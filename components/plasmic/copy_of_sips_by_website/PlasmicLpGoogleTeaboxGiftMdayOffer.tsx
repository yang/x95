// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: u9YCrLpYKhEcNk
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageRow from "../../PageRow"; // plasmic-import: AKAM4dN1Fw/component
import ButtonLnUpdate from "../../ButtonLnUpdate"; // plasmic-import: W3xFx930gMYiRb/component
import SectionMetricsMetric from "../../SectionMetricsMetric"; // plasmic-import: sW6svfkibZkesa/component
import { ContentOnHover } from "../../../../components/contentonhover"; // plasmic-import: Q7v4G60Gqx2JfX/codeComponent
import EcommBlockModule from "../../EcommBlockModule"; // plasmic-import: SVsSN17uZItN3m/component
import { Carousel } from "../../../../components/carousel"; // plasmic-import: VJ9-SKBWJjSYFK/codeComponent

import { useScreenVariants as useScreenVariants_6PiZsruRybCC } from "../sips_by_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: 6piZsruRybC-C/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicLpGoogleTeaboxGiftMdayOffer.module.css"; // plasmic-import: u9YCrLpYKhEcNk/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: MpX9BP8blGMfpD/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 4feDHP-bpH6OM4/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Id8KGjLkdQoXxj/icon
import BuzzFeedOnWhitesvgIcon from "./icons/PlasmicIcon__BuzzFeedOnWhitesvg"; // plasmic-import: yjRsogMQK2JuLx/icon
import Layer1SvgIcon from "./icons/PlasmicIcon__Layer1Svg"; // plasmic-import: e-kCsG3zM6OO-z/icon
import GroupsvgIcon from "./icons/PlasmicIcon__Groupsvg"; // plasmic-import: IridhowzujR8_J/icon

export type PlasmicLpGoogleTeaboxGiftMdayOffer__VariantMembers = {};

export type PlasmicLpGoogleTeaboxGiftMdayOffer__VariantsArgs = {};
type VariantPropType = keyof PlasmicLpGoogleTeaboxGiftMdayOffer__VariantsArgs;
export const PlasmicLpGoogleTeaboxGiftMdayOffer__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLpGoogleTeaboxGiftMdayOffer__ArgsType = {};
type ArgPropType = keyof PlasmicLpGoogleTeaboxGiftMdayOffer__ArgsType;
export const PlasmicLpGoogleTeaboxGiftMdayOffer__ArgProps =
  new Array<ArgPropType>();

export type PlasmicLpGoogleTeaboxGiftMdayOffer__OverridesType = {
  root?: p.Flex<"div">;
  hero?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  h4?: p.Flex<"h4">;
  h3?: p.Flex<"h3">;
  heroMobileImage?: p.Flex<typeof p.PlasmicImg>;
  whatYouGetUpdated?: p.Flex<"section">;
  landingPageDoubleCta2?: p.Flex<"div">;
  metricsUpdated?: p.Flex<"section">;
  pressSlider?: p.Flex<"section">;
  contentOnHover?: p.Flex<typeof ContentOnHover>;
  ecommBlockModule?: p.Flex<typeof EcommBlockModule>;
  aboutUs?: p.Flex<"div">;
  testimonialsUpdate2?: p.Flex<"section">;
  carousel?: p.Flex<typeof Carousel>;
};

export interface DefaultLpGoogleTeaboxGiftMdayOfferProps {}

function PlasmicLpGoogleTeaboxGiftMdayOffer__RenderFunc(props: {
  variants: PlasmicLpGoogleTeaboxGiftMdayOffer__VariantsArgs;
  args: PlasmicLpGoogleTeaboxGiftMdayOffer__ArgsType;
  overrides: PlasmicLpGoogleTeaboxGiftMdayOffer__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6PiZsruRybCC()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />

        <title key="title">{"Tea Gift For Mom"}</title>

        <meta key="og:title" property="og:title" content={"Tea Gift For Mom"} />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={"Tea Gift For Mom"}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_sips_by_design_system_css.plasmic_tokens,
              sty.root
            )}
          >
            <section
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              className={classNames(projectcss.all, sty.hero)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___7KXqs)}>
                <PageRow
                  className={classNames("__wab_instance", sty.pageRow__qkgaA)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__sZqPj)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"Tea is the perfect gift for mom (or yourself)."}
                    </h1>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wSxxe
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "desktop") ? (
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <h3
                              data-plasmic-name={"h3"}
                              data-plasmic-override={overrides.h3}
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3
                              )}
                            >
                              {hasVariant(globalVariants, "screen", "desktop")
                                ? "Save 20% with code GIFTMOM20"
                                : ""}
                            </h3>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <h4
                              data-plasmic-name={"h4"}
                              data-plasmic-override={overrides.h4}
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4
                              )}
                            >
                              {"Save 20% with code GIFTMOM20"}
                            </h4>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      )}
                    </div>

                    <ButtonLnUpdate
                      buttonColor={"darkPink" as const}
                      className={classNames(
                        "__wab_instance",
                        sty.buttonLnUpdate__oLq7
                      )}
                      link={
                        "https://www.sipsby.com/collections/personalized-favorites/products/gift-the-joy-of-tea-discovery" as const
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iJkzz
                        )}
                      >
                        {"Give the Box"}
                      </div>
                    </ButtonLnUpdate>
                  </p.Stack>
                </PageRow>
              </div>

              <p.PlasmicImg
                data-plasmic-name={"heroMobileImage"}
                data-plasmic-override={overrides.heroMobileImage}
                alt={"A m" as const}
                className={classNames(sty.heroMobileImage)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? ("100%" as const)
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? ("100%" as const)
                    : ("50%" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? ("50%" as const)
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? ("50%" as const)
                    : ("100%" as const)
                }
                loading={"eager" as const}
                src={{
                  src: "/plasmic/copy_of_sips_by_website/images/image2.png",
                  fullWidth: 8116,
                  fullHeight: 5414,
                  aspectRatio: undefined
                }}
              />
            </section>

            <section
              data-plasmic-name={"whatYouGetUpdated"}
              data-plasmic-override={overrides.whatYouGetUpdated}
              className={classNames(projectcss.all, sty.whatYouGetUpdated)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow___62Uwq)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__msZzG
                  )}
                >
                  {hasVariant(globalVariants, "screen", "desktop")
                    ? "Gift the #1 rated tea club"
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? "Gift the #1 rated tea club"
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? "Gift The #1 rated tea club"
                    : "Gift the #1 rated tea club"}
                </h2>

                <div className={classNames(projectcss.all, sty.freeBox__myvkB)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__fFlnA)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__knUxm)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__dDl3M)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        loading={"lazy" as const}
                        src={
                          "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-bag.svg?v=1636499860" as const
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6GUfk
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "desktop")
                          ? "Four new teas personally curated every month"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? "Four new teas personally curated every month"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletPortrait"
                            )
                          ? "Four new teas personally curated every month"
                          : "Four new teas personally curated every month"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__oi1E)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__viS)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        loading={"lazy" as const}
                        src={
                          "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-pot.svg?v=1636499860" as const
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__y5Oh
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "desktop")
                          ? "Access to exclusive tea brands only on Sips by"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletPortrait"
                            )
                          ? "Access to exclusive tea brands only on Sips by"
                          : "Access to exclusive tea brands only on Sips by"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  {(
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? true
                      : hasVariant(globalVariants, "screen", "tabletPortrait")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2J5Im
                      )}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__rvcia)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("545px" as const)
                            : hasVariant(
                                globalVariants,
                                "screen",
                                "tabletLandscape"
                              )
                            ? ("100%" as const)
                            : ("214px" as const)
                        }
                        loading={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("lazy" as const)
                            : ("lazy" as const)
                        }
                        src={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                            : ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                        }
                      />
                    </div>
                  ) : null}

                  {(
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? true
                      : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0Erq6
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dWOo
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__iQwM)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? ("100px" as const)
                              : ("55px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? ("100px" as const)
                              : ("55px" as const)
                          }
                          loading={"lazy" as const}
                          src={
                            "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-teacup.svg?v=1636499860" as const
                          }
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tSo7M
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? "Reusable tea filters for loose teas + brewing tips"
                            : hasVariant(
                                globalVariants,
                                "screen",
                                "tabletPortrait"
                              )
                            ? "Reusable tea filters for loose teas + brewing tips"
                            : "Reusable tea filters for loose teas + brewing tips"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mx037
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__enUtQ)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? ("100px" as const)
                              : ("55px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? ("100px" as const)
                              : ("55px" as const)
                          }
                          loading={"lazy" as const}
                          src={
                            "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-leaves.svg?v=1636499860" as const
                          }
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__khPro
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "tabletPortrait"
                          )
                            ? "Early access to product launches and sales"
                            : "Early access to product launches and sales"}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  ) : null}

                  {(
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ptzYv)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__eXkkY)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("214px" as const)
                            : ("214px" as const)
                        }
                        loading={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("lazy" as const)
                            : ("lazy" as const)
                        }
                        src={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                            : ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                        }
                      />
                    </div>
                  ) : null}
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"landingPageDoubleCta2"}
                  data-plasmic-override={overrides.landingPageDoubleCta2}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.landingPageDoubleCta2
                  )}
                >
                  <ButtonLnUpdate
                    className={classNames(
                      "__wab_instance",
                      sty.buttonLnUpdate__lIFe4
                    )}
                    link={"/pdp/gift-the-joy-of-tea-discovery" as const}
                  >
                    {"Give the Box"}
                  </ButtonLnUpdate>
                </p.Stack>
              </PageRow>
            </section>

            {true ? (
              <section
                data-plasmic-name={"metricsUpdated"}
                data-plasmic-override={overrides.metricsUpdated}
                className={classNames(projectcss.all, sty.metricsUpdated)}
              >
                <PageRow
                  className={classNames("__wab_instance", sty.pageRow___4BsSn)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns__vvk34)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column___5UvR9)}
                    >
                      <SectionMetricsMetric
                        className={classNames(
                          "__wab_instance",
                          sty.sectionMetricsMetric__tuOCj
                        )}
                        slot={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qhGf5
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "desktop")
                              ? "tea lovers served"
                              : "tea lovers served"}
                          </div>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__b71Rn
                          )}
                        >
                          {"1m"}
                        </div>
                      </SectionMetricsMetric>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__lxPL)}
                    >
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg__dnvp6)}
                        role={"img"}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__piWf)}
                    >
                      <SectionMetricsMetric
                        className={classNames(
                          "__wab_instance",
                          sty.sectionMetricsMetric__mZd1
                        )}
                        slot={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__c8RgI
                            )}
                          >
                            {"tea brands"}
                          </div>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ogRyH
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "desktop")
                            ? "150+"
                            : "150+"}
                        </div>
                      </SectionMetricsMetric>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__x6Fy9)}
                    >
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg__a3Ost)}
                        role={"img"}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__k0Mqk)}
                    >
                      <SectionMetricsMetric
                        className={classNames(
                          "__wab_instance",
                          sty.sectionMetricsMetric__zTXzL
                        )}
                        slot={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mRknz
                            )}
                          >
                            {"different teas"}
                          </div>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oWcXu
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "desktop")
                            ? "2k"
                            : "2k"}
                        </div>
                      </SectionMetricsMetric>
                    </div>
                  </p.Stack>
                </PageRow>
              </section>
            ) : null}

            <section
              data-plasmic-name={"pressSlider"}
              data-plasmic-override={overrides.pressSlider}
              className={classNames(projectcss.all, sty.pressSlider)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__r8Hyp)}
              >
                <ContentOnHover
                  data-plasmic-name={"contentOnHover"}
                  data-plasmic-override={overrides.contentOnHover}
                  buttons={
                    <PageRow
                      className={classNames(
                        "__wab_instance",
                        sty.pageRow__lE0Ee
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.columns__gFMs
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___5OqN0
                          )}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__k5LGw
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            <p.PlasmicIcon
                              PlasmicIconType={
                                hasVariant(globalVariants, "screen", "desktop")
                                  ? BuzzFeedOnWhitesvgIcon
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? BuzzFeedOnWhitesvgIcon
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? BuzzFeedOnWhitesvgIcon
                                  : BuzzFeedOnWhitesvgIcon
                              }
                              className={classNames(
                                projectcss.all,
                                sty.svg__wpPwy
                              )}
                              role={"img"}
                            />
                          </p.PlasmicLink>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__yQheU
                          )}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__m4QSa
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            <p.PlasmicIcon
                              PlasmicIconType={
                                hasVariant(globalVariants, "screen", "desktop")
                                  ? Layer1SvgIcon
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? Layer1SvgIcon
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? Layer1SvgIcon
                                  : Layer1SvgIcon
                              }
                              className={classNames(
                                projectcss.all,
                                sty.svg___6Br31
                              )}
                              role={"img"}
                            />
                          </p.PlasmicLink>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__pyNr8
                          )}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__cKvyL
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            <p.PlasmicIcon
                              PlasmicIconType={
                                hasVariant(globalVariants, "screen", "desktop")
                                  ? GroupsvgIcon
                                  : GroupsvgIcon
                              }
                              className={classNames(
                                projectcss.all,
                                sty.svg__pGYzp
                              )}
                              role={"img"}
                            />
                          </p.PlasmicLink>
                        </div>
                      </p.Stack>
                    </PageRow>
                  }
                  className={classNames("__wab_instance", sty.contentOnHover)}
                  defaultDisplay={0 as const}
                  displays={
                    <React.Fragment>
                      <PageRow
                        className={classNames(
                          "__wab_instance",
                          sty.pageRow__yh4Il
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.columns__rhT3
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__yoPfj
                            )}
                          >
                            {(
                              hasVariant(globalVariants, "screen", "desktop")
                                ? true
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletLandscape"
                                  )
                                ? true
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletPortrait"
                                  )
                                ? true
                                : true
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__jg96M
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__puZ4E
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "desktop"
                                  )
                                    ? '"Perfect for any tea drinker who wants to mix up their go-to flavors with personalized, carefully selected options each month."\n'
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletLandscape"
                                      )
                                    ? '"Perfect for any tea drinker who wants to mix up their go-to flavors with personalized, carefully selected options each month."\n'
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletPortrait"
                                      )
                                    ? '"Perfect for any tea drinker who wants to mix up their go-to flavors with \npersonalized, carefully selected options each month."\n'
                                    : '"Perfect for any tea drinker who wants to mix up their go-to flavors with personalized, carefully selected options each month."'}
                                </div>
                              </div>
                            ) : null}
                          </div>
                        </p.Stack>
                      </PageRow>

                      <PageRow
                        className={classNames(
                          "__wab_instance",
                          sty.pageRow__cZ9Om
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.columns__e0IIc
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__rgh9X
                            )}
                          >
                            {(
                              hasVariant(globalVariants, "screen", "desktop")
                                ? true
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletLandscape"
                                  )
                                ? true
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletPortrait"
                                  )
                                ? true
                                : true
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__nk1Po
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__vmm61
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "desktop"
                                  )
                                    ? '"An absolute must for all tea devotees."\n\n'
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletLandscape"
                                      )
                                    ? '                           "An absolute must for all tea devotees."                        \n                          \n\n'
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletPortrait"
                                      )
                                    ? '"An absolute must for all tea devotees."\n\n'
                                    : ' "An absolute must for all tea devotees."'}
                                </div>
                              </div>
                            ) : null}
                          </div>
                        </p.Stack>
                      </PageRow>

                      <PageRow
                        className={classNames(
                          "__wab_instance",
                          sty.pageRow__xWkhr
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.columns___2Fisu
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__szwk5
                            )}
                          >
                            {(
                              hasVariant(globalVariants, "screen", "desktop")
                                ? true
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletLandscape"
                                  )
                                ? true
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletPortrait"
                                  )
                                ? true
                                : true
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__wM8O
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xCyqC
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "desktop"
                                  )
                                    ? '"We love the adorable packaging and wide variety of teas they delivered."\n\n'
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletLandscape"
                                      )
                                    ? '"We love the adorable packaging and wide variety of teas they delivered."'
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletPortrait"
                                      )
                                    ? '"We love the adorable packaging and wide variety of teas they delivered."\n\n'
                                    : '"We love the adorable packaging and wide variety of teas they delivered."\n\n'}
                                </div>
                              </div>
                            ) : null}
                          </div>
                        </p.Stack>
                      </PageRow>
                    </React.Fragment>
                  }
                />
              </PageRow>
            </section>

            <EcommBlockModule
              data-plasmic-name={"ecommBlockModule"}
              data-plasmic-override={overrides.ecommBlockModule}
              className={classNames("__wab_instance", sty.ecommBlockModule)}
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iOvMb
                  )}
                >
                  {hasVariant(globalVariants, "screen", "desktop")
                    ? "Heart of Gold"
                    : "Heart of Gold"}
                </div>
              }
              slot2={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gBVjo
                  )}
                >
                  {hasVariant(globalVariants, "screen", "desktop")
                    ? "Celebrate mom with handpicked gifts guaranteed to make her feel loved."
                    : "Celebrate mom with handpicked gifts guaranteed to make her feel loved."}
                </div>
              }
              slot3={
                <ButtonLnUpdate
                  className={classNames(
                    "__wab_instance",
                    sty.buttonLnUpdate__jiVq
                  )}
                  link={"/collections/mothers-day-tea-gift-shop" as const}
                >
                  {"Shop Now"}
                </ButtonLnUpdate>
              }
            >
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__eAchR
                )}
                component={Link}
                href={"/collections/mothers-day-tea-gift-shop" as const}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__rdqau)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_sips_by_website/images/heartSteeperjpg.jpeg",
                    fullWidth: 3007,
                    fullHeight: 3007,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>
            </EcommBlockModule>

            <div
              data-plasmic-name={"aboutUs"}
              data-plasmic-override={overrides.aboutUs}
              className={classNames(projectcss.all, sty.aboutUs)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__dTrcg)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___4GKer)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__hL3E)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? ("130px" as const)
                        : ("100px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_sips_by_website/images/teaheartmugBlackgif.gif",
                      fullWidth: 568,
                      fullHeight: 2100,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fZmml
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "desktop")
                      ? "Meet Sips by"
                      : "Meet Sips by"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mzRcy
                    )}
                  >
                    {
                      "We’re proudly female-founded and led, with a love for bringing smiles to tea drinkers' faces through our tea of the month club. More than a monthly tea box, our tea shop has the best tea subscription box, tea gifts, and more to bring day-to-day delight into tea lovers’ kettles and kitchens. Based out of Austin, Texas, we are adept at savoring a hot mug even when it’s seasonally inappropriate."
                    }
                  </div>

                  <ButtonLnUpdate
                    className={classNames(
                      "__wab_instance",
                      sty.buttonLnUpdate__hKWwp
                    )}
                  >
                    {"Learn More"}
                  </ButtonLnUpdate>
                </p.Stack>
              </PageRow>
            </div>

            <section
              data-plasmic-name={"testimonialsUpdate2"}
              data-plasmic-override={overrides.testimonialsUpdate2}
              className={classNames(projectcss.all, sty.testimonialsUpdate2)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__uvH5G)}
              >
                {(
                  hasVariant(globalVariants, "screen", "desktop")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.columns__olOVf)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__e6Liv)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? true
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletPortrait"
                            )
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gLwC
                          )}
                        >
                          <Carousel
                            data-plasmic-name={"carousel"}
                            data-plasmic-override={overrides.carousel}
                            className={classNames(
                              "__wab_instance",
                              sty.carousel
                            )}
                            lazyLoad={true}
                            navigation={true}
                            navigationButtonAlpha={0.05 as const}
                            navigationOnTop={false}
                            pagination={true}
                            paginationOnTop={false}
                            random={false}
                            slidesPerView={
                              hasVariant(globalVariants, "screen", "desktop")
                                ? {
                                    default: 1,
                                    smallPhones: 1,
                                    phones: 1,
                                    portraitTablets: 1,
                                    landscapeTablets: 1,
                                    bigDesktops: 1
                                  }
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletLandscape"
                                  )
                                ? {
                                    default: 1,
                                    smallPhones: 1,
                                    phones: 1,
                                    portraitTablets: 1,
                                    landscapeTablets: 1,
                                    bigDesktops: 1
                                  }
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletPortrait"
                                  )
                                ? {
                                    default: 1,
                                    smallPhones: 1,
                                    phones: 1,
                                    portraitTablets: 1,
                                    landscapeTablets: 1,
                                    bigDesktops: 1
                                  }
                                : {
                                    default: 1,
                                    smallPhones: 1,
                                    phones: 1,
                                    portraitTablets: 1,
                                    landscapeTablets: 1,
                                    bigDesktops: 1
                                  }
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___7Rj4D
                              )}
                            >
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__e4ZcC
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? "What Sippers Are Saying:"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? "What Sippers Are Saying:"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? "What Sippers Are Saying:"
                                  : "What Sippers Are Saying:"}
                              </h2>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rDlGv
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? '"This whole box was loved! I must admit, I have to fight with my husband over these."'
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? '"This whole box was loved! I must admit, I have to fight with my husband over these."'
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? '"This whole box was loved! I must admit, I have to fight with my husband over these."'
                                  : '"This whole box was loved! I must admit, I have to fight with my husband over these."'}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__asMfy
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? "—  Grace C."
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? "—  Grace C."
                                  : "—  Grace C."}
                              </div>
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___6GLrw
                              )}
                            >
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__ix3Xh
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? "What Sippers Are Saying:"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? "What Sippers Are Saying:"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? "What Sippers Are Saying:"
                                  : "What Sippers Are Saying:"}
                              </h2>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yV6Y
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? '"I wait for my new boxes with child-like anticipation! I love this!"'
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? '"I wait for my new boxes with child-like anticipation! I love this!"'
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? '"I wait for my new boxes with child-like anticipation! I love this!"'
                                  : '"I wait for my new boxes with child-like anticipation! I love this!"'}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___77Ji4
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? "—  Tobi M."
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? "—  Tobi M."
                                  : "—  Tobi M."}
                              </div>
                            </div>

                            {(
                              hasVariant(globalVariants, "screen", "desktop")
                                ? true
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletLandscape"
                                  )
                                ? true
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletPortrait"
                                  )
                                ? true
                                : true
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ct8Nv
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__ey1Mz
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "desktop"
                                  )
                                    ? "What Sippers Are Saying:"
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletLandscape"
                                      )
                                    ? "What Sippers Are Saying:"
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletPortrait"
                                      )
                                    ? "What Sippers Are Saying:"
                                    : "What Sippers Are Saying:"}
                                </h2>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__zjbYh
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "desktop"
                                  )
                                    ? "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletLandscape"
                                      )
                                    ? "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletPortrait"
                                      )
                                    ? "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""
                                    : "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""}
                                </div>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__o2Eco
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "desktop"
                                  )
                                    ? "— Lori D."
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletLandscape"
                                      )
                                    ? "— Lori D."
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletPortrait"
                                      )
                                    ? "— Lori D."
                                    : "— Lori D."}
                                </div>
                              </div>
                            ) : null}
                          </Carousel>
                        </div>
                      ) : null}
                    </div>
                  </div>
                ) : null}
              </PageRow>
            </section>
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "h1",
    "h4",
    "h3",
    "heroMobileImage",
    "whatYouGetUpdated",
    "landingPageDoubleCta2",
    "metricsUpdated",
    "pressSlider",
    "contentOnHover",
    "ecommBlockModule",
    "aboutUs",
    "testimonialsUpdate2",
    "carousel"
  ],
  hero: ["hero", "h1", "h4", "h3", "heroMobileImage"],
  h1: ["h1"],
  h4: ["h4"],
  h3: ["h3"],
  heroMobileImage: ["heroMobileImage"],
  whatYouGetUpdated: ["whatYouGetUpdated", "landingPageDoubleCta2"],
  landingPageDoubleCta2: ["landingPageDoubleCta2"],
  metricsUpdated: ["metricsUpdated"],
  pressSlider: ["pressSlider", "contentOnHover"],
  contentOnHover: ["contentOnHover"],
  ecommBlockModule: ["ecommBlockModule"],
  aboutUs: ["aboutUs"],
  testimonialsUpdate2: ["testimonialsUpdate2", "carousel"],
  carousel: ["carousel"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  hero: "section";
  h1: "h1";
  h4: "h4";
  h3: "h3";
  heroMobileImage: typeof p.PlasmicImg;
  whatYouGetUpdated: "section";
  landingPageDoubleCta2: "div";
  metricsUpdated: "section";
  pressSlider: "section";
  contentOnHover: typeof ContentOnHover;
  ecommBlockModule: typeof EcommBlockModule;
  aboutUs: "div";
  testimonialsUpdate2: "section";
  carousel: typeof Carousel;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLpGoogleTeaboxGiftMdayOffer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLpGoogleTeaboxGiftMdayOffer__VariantsArgs;
    args?: PlasmicLpGoogleTeaboxGiftMdayOffer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicLpGoogleTeaboxGiftMdayOffer__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicLpGoogleTeaboxGiftMdayOffer__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLpGoogleTeaboxGiftMdayOffer__ArgProps,
          internalVariantPropNames:
            PlasmicLpGoogleTeaboxGiftMdayOffer__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLpGoogleTeaboxGiftMdayOffer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLpGoogleTeaboxGiftMdayOffer";
  } else {
    func.displayName = `PlasmicLpGoogleTeaboxGiftMdayOffer.${nodeName}`;
  }
  return func;
}

export const PlasmicLpGoogleTeaboxGiftMdayOffer = Object.assign(
  // Top-level PlasmicLpGoogleTeaboxGiftMdayOffer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    h1: makeNodeComponent("h1"),
    h4: makeNodeComponent("h4"),
    h3: makeNodeComponent("h3"),
    heroMobileImage: makeNodeComponent("heroMobileImage"),
    whatYouGetUpdated: makeNodeComponent("whatYouGetUpdated"),
    landingPageDoubleCta2: makeNodeComponent("landingPageDoubleCta2"),
    metricsUpdated: makeNodeComponent("metricsUpdated"),
    pressSlider: makeNodeComponent("pressSlider"),
    contentOnHover: makeNodeComponent("contentOnHover"),
    ecommBlockModule: makeNodeComponent("ecommBlockModule"),
    aboutUs: makeNodeComponent("aboutUs"),
    testimonialsUpdate2: makeNodeComponent("testimonialsUpdate2"),
    carousel: makeNodeComponent("carousel"),

    // Metadata about props expected for PlasmicLpGoogleTeaboxGiftMdayOffer
    internalVariantProps: PlasmicLpGoogleTeaboxGiftMdayOffer__VariantProps,
    internalArgProps: PlasmicLpGoogleTeaboxGiftMdayOffer__ArgProps
  }
);

export default PlasmicLpGoogleTeaboxGiftMdayOffer;
/* prettier-ignore-end */
