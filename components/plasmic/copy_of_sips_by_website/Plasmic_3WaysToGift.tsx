// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: _-V-SziXSZ5vRL
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: sw7k7LkFBTC/component
import { Video } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: RhitNJW5Zu-/codeComponent
import PageRow from "../../PageRow"; // plasmic-import: AKAM4dN1Fw/component
import SectionMetricsMetric from "../../SectionMetricsMetric"; // plasmic-import: sW6svfkibZkesa/component
import { ContentOnHover } from "../../../../components/contentonhover"; // plasmic-import: Q7v4G60Gqx2JfX/codeComponent

import { useScreenVariants as useScreenVariants_6PiZsruRybCC } from "../sips_by_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: 6piZsruRybC-C/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./Plasmic_3WaysToGift.module.css"; // plasmic-import: _-V-SziXSZ5vRL/css

import ChecksvgIcon from "../sips_by_design_system/icons/PlasmicIcon__Checksvg"; // plasmic-import: cFH4ysruE7k/icon
import IconIcon from "../sips_by_design_system/icons/PlasmicIcon__Icon"; // plasmic-import: XuqNxn7mH8d/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Id8KGjLkdQoXxj/icon
import BuzzFeedOnWhitesvgIcon from "./icons/PlasmicIcon__BuzzFeedOnWhitesvg"; // plasmic-import: yjRsogMQK2JuLx/icon
import Layer1SvgIcon from "./icons/PlasmicIcon__Layer1Svg"; // plasmic-import: e-kCsG3zM6OO-z/icon
import GroupsvgIcon from "./icons/PlasmicIcon__Groupsvg"; // plasmic-import: IridhowzujR8_J/icon

export type Plasmic_3WaysToGift__VariantMembers = {};

export type Plasmic_3WaysToGift__VariantsArgs = {};
type VariantPropType = keyof Plasmic_3WaysToGift__VariantsArgs;
export const Plasmic_3WaysToGift__VariantProps = new Array<VariantPropType>();

export type Plasmic_3WaysToGift__ArgsType = {};
type ArgPropType = keyof Plasmic_3WaysToGift__ArgsType;
export const Plasmic_3WaysToGift__ArgProps = new Array<ArgPropType>();

export type Plasmic_3WaysToGift__OverridesType = {
  root?: p.Flex<"div">;
  hero?: p.Flex<"section">;
  htmlVideo?: p.Flex<typeof Video>;
  howItWorks?: p.Flex<"section">;
  emailIt?: p.Flex<"div">;
  printIt?: p.Flex<"div">;
  mailIt?: p.Flex<"div">;
  whatYouGet?: p.Flex<"section">;
  metrics?: p.Flex<"section">;
  whatSippersAreSaying?: p.Flex<"section">;
  sipsByInTheNews?: p.Flex<"section">;
  contentOnHover?: p.Flex<typeof ContentOnHover>;
  readyToStartGifting?: p.Flex<"section">;
};

export interface Default_3WaysToGiftProps {}

function Plasmic_3WaysToGift__RenderFunc(props: {
  variants: Plasmic_3WaysToGift__VariantsArgs;
  args: Plasmic_3WaysToGift__ArgsType;
  overrides: Plasmic_3WaysToGift__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6PiZsruRybCC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_sips_by_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            className={classNames(projectcss.all, sty.hero)}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox___60U3)}>
                <div className={classNames(projectcss.all, sty.freeBox__doerK)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1___0GtN5
                    )}
                  >
                    {
                      "Personalized, premium tea boxes. The perfect gift for everyone."
                    }
                  </h1>

                  <Button
                    className={classNames("__wab_instance", sty.button__mgGU)}
                    link={"#section-gift" as const}
                    variant={"highlight" as const}
                  >
                    {"Shop Gift Subscriptions"}
                  </Button>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__hIeZ
                    )}
                    component={Link}
                    href={"/mygift" as const}
                    platform={"nextjs"}
                  >
                    {"Got Sips by as a gift? Redeem it here."}
                  </p.PlasmicLink>
                </div>
              </div>
            ) : null}

            <Video
              data-plasmic-name={"htmlVideo"}
              data-plasmic-override={overrides.htmlVideo}
              autoPlay={true}
              className={classNames("__wab_instance", sty.htmlVideo)}
              loop={true}
              muted={true}
              playsInline={true}
              poster={
                "https://cdn.shopify.com/s/files/1/1677/2601/files/video-pouring-tea-kettle-loop-crop-40.jpg?v=1648222400" as const
              }
              src={
                "https://cdn.shopify.com/s/files/1/1677/2601/files/video-pouring-tea-kettle-loop-crop.mp4?v=1639511012" as const
              }
            />
          </section>

          <section
            data-plasmic-name={"howItWorks"}
            data-plasmic-override={overrides.howItWorks}
            className={classNames(projectcss.all, sty.howItWorks)}
            id={"section-gift" as const}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow__pz19Z)}
              width={"reduced" as const}
            >
              {true ? (
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__gcs0O
                  )}
                >
                  {"Three Ways to Gift"}
                </h2>
              ) : null}

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fBe1W)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"emailIt"}
                    data-plasmic-override={overrides.emailIt}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.emailIt)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___46RyB
                      )}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__ju9V)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("none" as const)
                            : ("360px" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={
                          "https://cdn.shopify.com/s/files/1/1677/2601/files/gift-sips-by-tea-subscription-digital-framed-evergreen-70.jpg?v=1640298481" as const
                        }
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__sHVr5)}
                    >
                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1__fKrZx
                        )}
                      >
                        {"Email it"}
                      </h1>

                      <p
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.p__wOv8A
                        )}
                      >
                        {
                          "Perfect for tea lovers, tea newbies, and last-minute gifts."
                        }
                      </p>

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__qzyV6
                        )}
                        link={
                          "/pages/content?ckey=gift-order-form-email" as const
                        }
                      >
                        {"Shop Digital Gift Cards"}
                      </Button>
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"printIt"}
                    data-plasmic-override={overrides.printIt}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.printIt)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sxif8)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__a81XX)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("none" as const)
                            : ("360px" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={
                          "https://cdn.shopify.com/s/files/1/1677/2601/files/gift-sips-by-tea-subscription-print-framed-evergreen-70.jpg?v=1640298481" as const
                        }
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__xvwMk)}
                    >
                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1__sCfn
                        )}
                      >
                        {"Print it"}
                      </h1>

                      <p
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.p__j8Tdl
                        )}
                      >
                        {
                          "A great in-person gift, without ever leaving the house."
                        }
                      </p>

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__ud3BW
                        )}
                        link={
                          "/pages/content?ckey=gift-order-form-print" as const
                        }
                      >
                        {"Shop Printable Gift Cards"}
                      </Button>
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"mailIt"}
                    data-plasmic-override={overrides.mailIt}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.mailIt)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hdjfQ)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__pjz9C)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("none" as const)
                            : ("360px" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={
                          "https://cdn.shopify.com/s/files/1/1677/2601/files/gift-sips-by-tea-subscription-mail-framed-evergreen-70.jpg?v=1640298481" as const
                        }
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__vdyTq)}
                    >
                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1__emBK
                        )}
                      >
                        {"Mail it"}
                      </h1>

                      <p
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.p__lYwsN
                        )}
                      >
                        {"You write the card, we’ll take care of the rest."}
                      </p>

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__iUxX
                        )}
                        link={
                          "/pages/content?ckey=gift-order-form-mail" as const
                        }
                      >
                        {"Shop Physical Gift Cards"}
                      </Button>
                    </div>
                  </p.Stack>
                </p.Stack>
              ) : null}
            </PageRow>
          </section>

          <section
            data-plasmic-name={"whatYouGet"}
            data-plasmic-override={overrides.whatYouGet}
            className={classNames(projectcss.all, sty.whatYouGet)}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow___8PnLb)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__xf2Lt
                )}
              >
                {"What They Get"}
              </h2>

              <div className={classNames(projectcss.all, sty.freeBox__myvkB)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fFlnA)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__knUxm)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__dDl3M)}
                      displayHeight={"45px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"45px" as const}
                      loading={"lazy" as const}
                      src={
                        "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-bag.svg?v=1636499860" as const
                      }
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6GUfk
                      )}
                    >
                      {"Four new teas curated just for them every month"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__oi1E)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__viS)}
                      displayHeight={"45px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"45px" as const}
                      loading={"lazy" as const}
                      src={
                        "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-pot.svg?v=1636499860" as const
                      }
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__y5Oh
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletPortrait")
                        ? "Access to exclusive tea brands only on Sips by"
                        : "Access to exclusive tea brands only on Sips by"}
                    </div>
                  </div>
                </p.Stack>

                {(
                  hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2J5Im)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__rvcia)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("100%" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("100%" as const)
                          : ("214px" as const)
                      }
                      loading={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("lazy" as const)
                          : ("lazy" as const)
                      }
                      src={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                          : ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                      }
                    />
                  </div>
                ) : null}

                {(
                  hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___0Erq6)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dWOo)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__iQwM)}
                        displayHeight={"45px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"45px" as const}
                        loading={"lazy" as const}
                        src={
                          "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-teacup.svg?v=1636499860" as const
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tSo7M
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "tabletPortrait")
                          ? "Reusable tea filters for loose teas + brewing tips"
                          : "Reusable tea filters for loose teas + brewing tips"}
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__mx037)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__enUtQ)}
                        displayHeight={"45px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"45px" as const}
                        loading={"lazy" as const}
                        src={
                          "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-leaves.svg?v=1636499860" as const
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__khPro
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "tabletPortrait")
                          ? "Early access to product launches and sales"
                          : "Early access to product launches and sales"}
                      </div>
                    </div>
                  </p.Stack>
                ) : null}

                {(
                  hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ptzYv)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__eXkkY)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("100%" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("214px" as const)
                          : ("214px" as const)
                      }
                      loading={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("lazy" as const)
                          : ("lazy" as const)
                      }
                      src={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                          : ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                      }
                    />
                  </div>
                ) : null}
              </div>
            </PageRow>
          </section>

          <section
            data-plasmic-name={"metrics"}
            data-plasmic-override={overrides.metrics}
            className={classNames(projectcss.all, sty.metrics)}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow__iwU57)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___0H1Iy)}
              >
                <SectionMetricsMetric
                  className={classNames(
                    "__wab_instance",
                    sty.sectionMetricsMetric__kT57C
                  )}
                  slot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bUaPm
                      )}
                    >
                      {"Members"}
                    </div>
                  }
                >
                  {"750K"}
                </SectionMetricsMetric>

                <Icon3Icon
                  className={classNames(projectcss.all, sty.svg__mqLwp)}
                  role={"img"}
                />

                <SectionMetricsMetric
                  className={classNames(
                    "__wab_instance",
                    sty.sectionMetricsMetric___0YQli
                  )}
                  slot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kwJGo
                      )}
                    >
                      {"Tea Brands"}
                    </div>
                  }
                >
                  {"150+"}
                </SectionMetricsMetric>

                <Icon3Icon
                  className={classNames(projectcss.all, sty.svg___5MgYv)}
                  role={"img"}
                />

                <SectionMetricsMetric
                  className={classNames(
                    "__wab_instance",
                    sty.sectionMetricsMetric__xayOi
                  )}
                  slot={"Different Teas"}
                >
                  {"2K"}
                </SectionMetricsMetric>
              </p.Stack>
            </PageRow>
          </section>

          <section
            data-plasmic-name={"whatSippersAreSaying"}
            data-plasmic-override={overrides.whatSippersAreSaying}
            className={classNames(projectcss.all, sty.whatSippersAreSaying)}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow__wBkHx)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__uiBoN)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___2RDwP)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__dlHdi
                    )}
                  >
                    {"What Sippers Are Saying:"}
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1XP0
                    )}
                  >
                    {
                      "“It’s a new month, which means new teas! They hit this one out of the park!”"
                    }
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sBoPj
                    )}
                  >
                    {"— Angela in California"}
                  </div>
                </div>
              </div>
            </PageRow>
          </section>

          <section
            data-plasmic-name={"sipsByInTheNews"}
            data-plasmic-override={overrides.sipsByInTheNews}
            className={classNames(projectcss.all, sty.sipsByInTheNews)}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow__px6Tx)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__rcxx
                )}
              >
                {"Sips by in the News:"}
              </h2>

              <ContentOnHover
                data-plasmic-name={"contentOnHover"}
                data-plasmic-override={overrides.contentOnHover}
                buttons={
                  <PageRow
                    className={classNames("__wab_instance", sty.pageRow__p6O7K)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.columns___2Buw6
                      )}
                    >
                      <div
                        className={classNames(projectcss.all, sty.column__efN)}
                      >
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link___5RztD
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          <p.PlasmicIcon
                            PlasmicIconType={
                              hasVariant(globalVariants, "screen", "desktop")
                                ? BuzzFeedOnWhitesvgIcon
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletLandscape"
                                  )
                                ? BuzzFeedOnWhitesvgIcon
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletPortrait"
                                  )
                                ? BuzzFeedOnWhitesvgIcon
                                : BuzzFeedOnWhitesvgIcon
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg__ibiQv
                            )}
                            role={"img"}
                          />
                        </p.PlasmicLink>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__eu7Hp
                        )}
                      >
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__hTAl
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          <p.PlasmicIcon
                            PlasmicIconType={
                              hasVariant(globalVariants, "screen", "desktop")
                                ? Layer1SvgIcon
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletLandscape"
                                  )
                                ? Layer1SvgIcon
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletPortrait"
                                  )
                                ? Layer1SvgIcon
                                : Layer1SvgIcon
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg___8PlJs
                            )}
                            role={"img"}
                          />
                        </p.PlasmicLink>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___00X8H
                        )}
                      >
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__kvjYt
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          <p.PlasmicIcon
                            PlasmicIconType={
                              hasVariant(globalVariants, "screen", "desktop")
                                ? GroupsvgIcon
                                : GroupsvgIcon
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg__yRvTi
                            )}
                            role={"img"}
                          />
                        </p.PlasmicLink>
                      </div>
                    </p.Stack>
                  </PageRow>
                }
                className={classNames("__wab_instance", sty.contentOnHover)}
                defaultDisplay={0 as const}
                displays={
                  <React.Fragment>
                    <PageRow
                      className={classNames(
                        "__wab_instance",
                        sty.pageRow__cLng9
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.columns__mckyG
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___9Jxlg
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "desktop")
                              ? true
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletLandscape"
                                )
                              ? true
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletPortrait"
                                )
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___2RiHc
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lpUhl
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? '"Perfect for any tea drinker who wants to mix up their go-to flavors with personalized, carefully selected options each month."\n'
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? '"Perfect for any tea drinker who wants to mix up their go-to flavors with personalized, carefully selected options each month."\n'
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? '"Perfect for any tea drinker who wants to mix up their go-to flavors with \npersonalized, carefully selected options each month."\n'
                                  : '"Perfect for any tea drinker who wants to mix up their go-to flavors with personalized, carefully selected options each month."'}
                              </div>
                            </div>
                          ) : null}
                        </div>
                      </p.Stack>
                    </PageRow>

                    <PageRow
                      className={classNames(
                        "__wab_instance",
                        sty.pageRow__cZ9Om
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.columns__vcLXw
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__bvFoS
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "desktop")
                              ? true
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletLandscape"
                                )
                              ? true
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletPortrait"
                                )
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__eidLi
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lHgYh
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? '"An absolute must for all tea devotees."\n\n'
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? '                           "An absolute must for all tea devotees."                        \n                          \n\n'
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? '"An absolute must for all tea devotees."\n\n'
                                  : ' "An absolute must for all tea devotees."'}
                              </div>
                            </div>
                          ) : null}
                        </div>
                      </p.Stack>
                    </PageRow>

                    <PageRow
                      className={classNames(
                        "__wab_instance",
                        sty.pageRow__xWkhr
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.columns__rb04F
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__gG9
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "desktop")
                              ? true
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletLandscape"
                                )
                              ? true
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletPortrait"
                                )
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__nbw1I
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dGPnc
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? '"We love the adorable packaging and wide variety of teas they delivered."\n\n'
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? '"We love the adorable packaging and wide variety of teas they delivered."'
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? '"We love the adorable packaging and wide variety of teas they delivered."\n\n'
                                  : '"We love the adorable packaging and wide variety of teas they delivered."\n\n'}
                              </div>
                            </div>
                          ) : null}
                        </div>
                      </p.Stack>
                    </PageRow>
                  </React.Fragment>
                }
              />
            </PageRow>
          </section>

          <section
            data-plasmic-name={"readyToStartGifting"}
            data-plasmic-override={overrides.readyToStartGifting}
            className={classNames(projectcss.all, sty.readyToStartGifting)}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow___1LOuA)}
            >
              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___6ShHz)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bBzK)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__hNz6U
                        )}
                      >
                        {"Ready to start gifting?"}
                      </h2>

                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__em2W0
                          )}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__lR5YX
                            )}
                            link={
                              "/products/gift-the-joy-of-tea-discovery" as const
                            }
                          >
                            {hasVariant(globalVariants, "screen", "desktop")
                              ? "Shop Digital Gift Cards"
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletLandscape"
                                )
                              ? "Digital Gift Cards"
                              : "Shop Digital Gift Cards"}
                          </Button>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__a5Khe
                            )}
                            link={
                              "/products/sips-by-box-subscription-physical-gift-card" as const
                            }
                          >
                            {hasVariant(globalVariants, "screen", "desktop")
                              ? "Shop Physical Gift Cards"
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletLandscape"
                                )
                              ? "Physical Gift Cards"
                              : "ShoP Physical Gift Cards"}
                          </Button>
                        </p.Stack>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}
            </PageRow>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "htmlVideo",
    "howItWorks",
    "emailIt",
    "printIt",
    "mailIt",
    "whatYouGet",
    "metrics",
    "whatSippersAreSaying",
    "sipsByInTheNews",
    "contentOnHover",
    "readyToStartGifting"
  ],
  hero: ["hero", "htmlVideo"],
  htmlVideo: ["htmlVideo"],
  howItWorks: ["howItWorks", "emailIt", "printIt", "mailIt"],
  emailIt: ["emailIt"],
  printIt: ["printIt"],
  mailIt: ["mailIt"],
  whatYouGet: ["whatYouGet"],
  metrics: ["metrics"],
  whatSippersAreSaying: ["whatSippersAreSaying"],
  sipsByInTheNews: ["sipsByInTheNews", "contentOnHover"],
  contentOnHover: ["contentOnHover"],
  readyToStartGifting: ["readyToStartGifting"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  hero: "section";
  htmlVideo: typeof Video;
  howItWorks: "section";
  emailIt: "div";
  printIt: "div";
  mailIt: "div";
  whatYouGet: "section";
  metrics: "section";
  whatSippersAreSaying: "section";
  sipsByInTheNews: "section";
  contentOnHover: typeof ContentOnHover;
  readyToStartGifting: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic_3WaysToGift__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic_3WaysToGift__VariantsArgs;
    args?: Plasmic_3WaysToGift__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic_3WaysToGift__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<Plasmic_3WaysToGift__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: Plasmic_3WaysToGift__ArgProps,
          internalVariantPropNames: Plasmic_3WaysToGift__VariantProps
        }),
      [props, nodeName]
    );

    return Plasmic_3WaysToGift__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_3WaysToGift";
  } else {
    func.displayName = `Plasmic_3WaysToGift.${nodeName}`;
  }
  return func;
}

export const Plasmic_3WaysToGift = Object.assign(
  // Top-level Plasmic_3WaysToGift renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    htmlVideo: makeNodeComponent("htmlVideo"),
    howItWorks: makeNodeComponent("howItWorks"),
    emailIt: makeNodeComponent("emailIt"),
    printIt: makeNodeComponent("printIt"),
    mailIt: makeNodeComponent("mailIt"),
    whatYouGet: makeNodeComponent("whatYouGet"),
    metrics: makeNodeComponent("metrics"),
    whatSippersAreSaying: makeNodeComponent("whatSippersAreSaying"),
    sipsByInTheNews: makeNodeComponent("sipsByInTheNews"),
    contentOnHover: makeNodeComponent("contentOnHover"),
    readyToStartGifting: makeNodeComponent("readyToStartGifting"),

    // Metadata about props expected for Plasmic_3WaysToGift
    internalVariantProps: Plasmic_3WaysToGift__VariantProps,
    internalArgProps: Plasmic_3WaysToGift__ArgProps
  }
);

export default Plasmic_3WaysToGift;
/* prettier-ignore-end */
