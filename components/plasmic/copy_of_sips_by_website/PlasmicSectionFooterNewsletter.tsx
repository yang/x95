// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: DU_qPIKeT28MgM
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicSectionFooterNewsletter.module.css"; // plasmic-import: DU_qPIKeT28MgM/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 4feDHP-bpH6OM4/icon

export type PlasmicSectionFooterNewsletter__VariantMembers = {};

export type PlasmicSectionFooterNewsletter__VariantsArgs = {};
type VariantPropType = keyof PlasmicSectionFooterNewsletter__VariantsArgs;
export const PlasmicSectionFooterNewsletter__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSectionFooterNewsletter__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSectionFooterNewsletter__ArgsType;
export const PlasmicSectionFooterNewsletter__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicSectionFooterNewsletter__OverridesType = {
  root?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
  form?: p.Flex<"form">;
  dontDeleteAccessibilityLabel?: p.Flex<"label">;
  emailInput?: p.Flex<"input">;
  button?: p.Flex<"button">;
  svg?: p.Flex<"svg">;
  dontDeleteSubmissionMessage?: p.Flex<"p">;
};

export interface DefaultSectionFooterNewsletterProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

function PlasmicSectionFooterNewsletter__RenderFunc(props: {
  variants: PlasmicSectionFooterNewsletter__VariantsArgs;
  args: PlasmicSectionFooterNewsletter__ArgsType;
  overrides: PlasmicSectionFooterNewsletter__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_sips_by_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__esfoV)}>
        <h3
          data-plasmic-name={"h3"}
          data-plasmic-override={overrides.h3}
          className={classNames(projectcss.all, projectcss.h3, sty.h3)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Letâ€™s be friends",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </h3>

        <div className={classNames(projectcss.all, sty.freeBox__yhtNp)}>
          {p.renderPlasmicSlot({
            defaultContents: "Sign up to learn about tea with us",
            value: args.slot,
            className: classNames(sty.slotTargetSlot)
          })}
        </div>

        {true ? (
          <form
            data-plasmic-name={"form"}
            data-plasmic-override={overrides.form}
            className={classNames(projectcss.all, sty.form)}
            id={"footer-newsletter-form" as const}
          >
            {true ? (
              <label
                data-plasmic-name={"dontDeleteAccessibilityLabel"}
                data-plasmic-override={overrides.dontDeleteAccessibilityLabel}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.dontDeleteAccessibilityLabel,
                  "visually-hidden" as const
                )}
                for={"footer-newsletter-email" as const}
              >
                {"Email address"}
              </label>
            ) : null}

            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__ce1Jl)}>
                <input
                  data-plasmic-name={"emailInput"}
                  data-plasmic-override={overrides.emailInput}
                  className={classNames(
                    projectcss.all,
                    projectcss.input,
                    sty.emailInput
                  )}
                  id={"footer-newsletter-email" as const}
                  name={"email" as const}
                  placeholder={"Email address" as const}
                  type={"email" as const}
                />

                <button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  aria-label={"Submit" as const}
                  className={classNames(
                    projectcss.all,
                    projectcss.button,
                    sty.button
                  )}
                >
                  <IconIcon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                </button>
              </div>
            ) : null}

            {true ? (
              <p
                data-plasmic-name={"dontDeleteSubmissionMessage"}
                data-plasmic-override={overrides.dontDeleteSubmissionMessage}
                className={classNames(
                  projectcss.all,
                  projectcss.p,
                  projectcss.__wab_text,
                  sty.dontDeleteSubmissionMessage
                )}
                id={"footer-newsletter-message" as const}
              >
                {""}
              </p>
            ) : null}
          </form>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h3",
    "form",
    "dontDeleteAccessibilityLabel",
    "emailInput",
    "button",
    "svg",
    "dontDeleteSubmissionMessage"
  ],
  h3: ["h3"],
  form: [
    "form",
    "dontDeleteAccessibilityLabel",
    "emailInput",
    "button",
    "svg",
    "dontDeleteSubmissionMessage"
  ],
  dontDeleteAccessibilityLabel: ["dontDeleteAccessibilityLabel"],
  emailInput: ["emailInput"],
  button: ["button", "svg"],
  svg: ["svg"],
  dontDeleteSubmissionMessage: ["dontDeleteSubmissionMessage"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h3: "h3";
  form: "form";
  dontDeleteAccessibilityLabel: "label";
  emailInput: "input";
  button: "button";
  svg: "svg";
  dontDeleteSubmissionMessage: "p";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionFooterNewsletter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionFooterNewsletter__VariantsArgs;
    args?: PlasmicSectionFooterNewsletter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSectionFooterNewsletter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSectionFooterNewsletter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSectionFooterNewsletter__ArgProps,
          internalVariantPropNames: PlasmicSectionFooterNewsletter__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSectionFooterNewsletter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionFooterNewsletter";
  } else {
    func.displayName = `PlasmicSectionFooterNewsletter.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionFooterNewsletter = Object.assign(
  // Top-level PlasmicSectionFooterNewsletter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    form: makeNodeComponent("form"),
    dontDeleteAccessibilityLabel: makeNodeComponent(
      "dontDeleteAccessibilityLabel"
    ),
    emailInput: makeNodeComponent("emailInput"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    dontDeleteSubmissionMessage: makeNodeComponent(
      "dontDeleteSubmissionMessage"
    ),

    // Metadata about props expected for PlasmicSectionFooterNewsletter
    internalVariantProps: PlasmicSectionFooterNewsletter__VariantProps,
    internalArgProps: PlasmicSectionFooterNewsletter__ArgProps
  }
);

export default PlasmicSectionFooterNewsletter;
/* prettier-ignore-end */
