// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: NV7-rY70ohAOwi
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicZNavDropdownTeaShop.module.css"; // plasmic-import: NV7-rY70ohAOwi/css

export type PlasmicZNavDropdownTeaShop__VariantMembers = {};

export type PlasmicZNavDropdownTeaShop__VariantsArgs = {};
type VariantPropType = keyof PlasmicZNavDropdownTeaShop__VariantsArgs;
export const PlasmicZNavDropdownTeaShop__VariantProps =
  new Array<VariantPropType>();

export type PlasmicZNavDropdownTeaShop__ArgsType = {};
type ArgPropType = keyof PlasmicZNavDropdownTeaShop__ArgsType;
export const PlasmicZNavDropdownTeaShop__ArgProps = new Array<ArgPropType>();

export type PlasmicZNavDropdownTeaShop__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultZNavDropdownTeaShopProps {}

function PlasmicZNavDropdownTeaShop__RenderFunc(props: {
  variants: PlasmicZNavDropdownTeaShop__VariantsArgs;
  args: PlasmicZNavDropdownTeaShop__ArgsType;
  overrides: PlasmicZNavDropdownTeaShop__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_sips_by_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__gllea)}>
            <div className={classNames(projectcss.all, sty.freeBox__mcaqc)}>
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__qGt
                )}
                component={Link}
                href={"https://www.plasmic.app/" as const}
                platform={"nextjs"}
              >
                {"Some link text"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link___7EfIk
                )}
                component={Link}
                href={"https://www.plasmic.app/" as const}
                platform={"nextjs"}
              >
                {"Some link text"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__aA4W
                )}
                component={Link}
                href={"https://www.plasmic.app/" as const}
                platform={"nextjs"}
              >
                {"Some link text"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link___8A6TZ
                )}
                component={Link}
                href={"https://www.plasmic.app/" as const}
                platform={"nextjs"}
              >
                {"Some link text"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link___66MVy
                )}
                component={Link}
                href={"https://www.plasmic.app/" as const}
                platform={"nextjs"}
              >
                {"Some link text"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__ko8Kg
                )}
                component={Link}
                href={"https://www.plasmic.app/" as const}
                platform={"nextjs"}
              >
                {"Some link text"}
              </p.PlasmicLink>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__atguu)}>
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__iWiKl
                )}
                component={Link}
                href={"https://www.plasmic.app/" as const}
                platform={"nextjs"}
              >
                {"Some link text"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__gQjey
                )}
                component={Link}
                href={"https://www.plasmic.app/" as const}
                platform={"nextjs"}
              >
                {"Some link text"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__ddqc
                )}
                component={Link}
                href={"https://www.plasmic.app/" as const}
                platform={"nextjs"}
              >
                {"Some link text"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__w3FZ0
                )}
                component={Link}
                href={"https://www.plasmic.app/" as const}
                platform={"nextjs"}
              >
                {"Some link text"}
              </p.PlasmicLink>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__kvEbo)}>
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__sfw1N
                )}
                component={Link}
                href={"https://www.plasmic.app/" as const}
                platform={"nextjs"}
              >
                {"Some link text"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__stL6C
                )}
                component={Link}
                href={"https://www.plasmic.app/" as const}
                platform={"nextjs"}
              >
                {"Some link text"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__lgO8E
                )}
                component={Link}
                href={"https://www.plasmic.app/" as const}
                platform={"nextjs"}
              >
                {"Some link text"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__wGu7B
                )}
                component={Link}
                href={"https://www.plasmic.app/" as const}
                platform={"nextjs"}
              >
                {"Some link text"}
              </p.PlasmicLink>
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jI3Cf)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__qMqhp)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/copy_of_sips_by_website/images/image16.png",
                  fullWidth: 540,
                  fullHeight: 175,
                  aspectRatio: undefined
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__ohnTm)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/copy_of_sips_by_website/images/image15.png",
                  fullWidth: 545,
                  fullHeight: 175,
                  aspectRatio: undefined
                }}
              />
            </p.Stack>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicZNavDropdownTeaShop__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicZNavDropdownTeaShop__VariantsArgs;
    args?: PlasmicZNavDropdownTeaShop__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicZNavDropdownTeaShop__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicZNavDropdownTeaShop__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicZNavDropdownTeaShop__ArgProps,
          internalVariantPropNames: PlasmicZNavDropdownTeaShop__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicZNavDropdownTeaShop__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicZNavDropdownTeaShop";
  } else {
    func.displayName = `PlasmicZNavDropdownTeaShop.${nodeName}`;
  }
  return func;
}

export const PlasmicZNavDropdownTeaShop = Object.assign(
  // Top-level PlasmicZNavDropdownTeaShop renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicZNavDropdownTeaShop
    internalVariantProps: PlasmicZNavDropdownTeaShop__VariantProps,
    internalArgProps: PlasmicZNavDropdownTeaShop__ArgProps
  }
);

export default PlasmicZNavDropdownTeaShop;
/* prettier-ignore-end */
