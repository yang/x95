// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: 3rtdTNKhjk9lmg
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: sw7k7LkFBTC/component

import { useScreenVariants as useScreenVariants_6PiZsruRybCC } from "../sips_by_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: 6piZsruRybC-C/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicSectionFooterPromo.module.css"; // plasmic-import: 3rtdTNKhjk9lmg/css

import ChecksvgIcon from "../sips_by_design_system/icons/PlasmicIcon__Checksvg"; // plasmic-import: cFH4ysruE7k/icon
import IconIcon from "../sips_by_design_system/icons/PlasmicIcon__Icon"; // plasmic-import: XuqNxn7mH8d/icon

export type PlasmicSectionFooterPromo__VariantMembers = {};

export type PlasmicSectionFooterPromo__VariantsArgs = {};
type VariantPropType = keyof PlasmicSectionFooterPromo__VariantsArgs;
export const PlasmicSectionFooterPromo__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSectionFooterPromo__ArgsType = {};
type ArgPropType = keyof PlasmicSectionFooterPromo__ArgsType;
export const PlasmicSectionFooterPromo__ArgProps = new Array<ArgPropType>();

export type PlasmicSectionFooterPromo__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  h3?: p.Flex<"h3">;
  text?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultSectionFooterPromoProps {
  className?: string;
}

function PlasmicSectionFooterPromo__RenderFunc(props: {
  variants: PlasmicSectionFooterPromo__VariantsArgs;
  args: PlasmicSectionFooterPromo__ArgsType;
  overrides: PlasmicSectionFooterPromo__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6PiZsruRybCC()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_sips_by_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={
          hasVariant(globalVariants, "screen", "tabletPortrait")
            ? ("110px" as const)
            : ("80px" as const)
        }
        displayMaxHeight={"none" as const}
        displayMaxWidth={"100%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={
          hasVariant(globalVariants, "screen", "tabletPortrait")
            ? ("110px" as const)
            : ("80px" as const)
        }
        loading={"lazy" as const}
        src={
          "https://cdn.bfldr.com/TKS9DIZN/as/8qtkttrt25w37pp6p57m7t/Copy_of_V_Annaka_Spring_321_82?auto=webp&format=jpg&precrop=1:1,smart&width=220&trim=0.1" as const
        }
      />

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__aCo56)}>
          <div className={classNames(projectcss.all, sty.freeBox__f1R5D)}>
            <h3
              data-plasmic-name={"h3"}
              data-plasmic-override={overrides.h3}
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3
              )}
            >
              {"Get a tea box tailored to you."}
            </h3>

            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                <React.Fragment>{"4 teas, $16 monthly, "}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"free shipping"}
                </span>
              </React.Fragment>
            </div>
          </div>

          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            link={"/products/personalized-tea-discovery-box" as const}
            size={"small" as const}
          >
            {"Get Your Box"}
          </Button>
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "h3", "text", "button"],
  img: ["img"],
  h3: ["h3"],
  text: ["text"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  h3: "h3";
  text: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionFooterPromo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionFooterPromo__VariantsArgs;
    args?: PlasmicSectionFooterPromo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSectionFooterPromo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSectionFooterPromo__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSectionFooterPromo__ArgProps,
          internalVariantPropNames: PlasmicSectionFooterPromo__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSectionFooterPromo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionFooterPromo";
  } else {
    func.displayName = `PlasmicSectionFooterPromo.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionFooterPromo = Object.assign(
  // Top-level PlasmicSectionFooterPromo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    h3: makeNodeComponent("h3"),
    text: makeNodeComponent("text"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicSectionFooterPromo
    internalVariantProps: PlasmicSectionFooterPromo__VariantProps,
    internalArgProps: PlasmicSectionFooterPromo__ArgProps
  }
);

export default PlasmicSectionFooterPromo;
/* prettier-ignore-end */
