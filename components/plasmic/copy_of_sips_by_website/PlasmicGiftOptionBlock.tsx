// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: M3buD_ZFfjTQVx
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonLnUpdate from "../../ButtonLnUpdate"; // plasmic-import: W3xFx930gMYiRb/component

import { useScreenVariants as useScreenVariants_6PiZsruRybCC } from "../sips_by_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: 6piZsruRybC-C/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicGiftOptionBlock.module.css"; // plasmic-import: M3buD_ZFfjTQVx/css

import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: 4jh5_0ppZYDExl/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: MpX9BP8blGMfpD/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 4feDHP-bpH6OM4/icon

export type PlasmicGiftOptionBlock__VariantMembers = {};

export type PlasmicGiftOptionBlock__VariantsArgs = {};
type VariantPropType = keyof PlasmicGiftOptionBlock__VariantsArgs;
export const PlasmicGiftOptionBlock__VariantProps =
  new Array<VariantPropType>();

export type PlasmicGiftOptionBlock__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot3?: React.ReactNode;
  slot2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicGiftOptionBlock__ArgsType;
export const PlasmicGiftOptionBlock__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot3",
  "slot2"
);

export type PlasmicGiftOptionBlock__OverridesType = {
  root?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
};

export interface DefaultGiftOptionBlockProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot3?: React.ReactNode;
  slot2?: React.ReactNode;
  className?: string;
}

function PlasmicGiftOptionBlock__RenderFunc(props: {
  variants: PlasmicGiftOptionBlock__VariantsArgs;
  args: PlasmicGiftOptionBlock__ArgsType;
  overrides: PlasmicGiftOptionBlock__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6PiZsruRybCC()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_sips_by_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <Icon10Icon
            className={classNames(projectcss.all, sty.svg__fvTw)}
            role={"img"}
          />
        ),

        value: args.slot3
      })}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__rmoUe)}
      >
        <h2
          data-plasmic-name={"h2"}
          data-plasmic-override={overrides.h2}
          className={classNames(projectcss.all, projectcss.h2, sty.h2)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Email it",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </h2>

        <div className={classNames(projectcss.all, sty.freeBox__erHCt)}>
          {p.renderPlasmicSlot({
            defaultContents:
              "Perfect for tea lovers, tea newbies, and last-minute gifts.",
            value: args.slot,
            className: classNames(sty.slotTargetSlot)
          })}
        </div>

        {p.renderPlasmicSlot({
          defaultContents: (
            <ButtonLnUpdate
              className={classNames(
                "__wab_instance",
                sty.buttonLnUpdate__bTsXx
              )}
            >
              {"Button"}
            </ButtonLnUpdate>
          ),

          value: args.slot2
        })}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h2"],
  h2: ["h2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h2: "h2";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGiftOptionBlock__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGiftOptionBlock__VariantsArgs;
    args?: PlasmicGiftOptionBlock__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGiftOptionBlock__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicGiftOptionBlock__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGiftOptionBlock__ArgProps,
          internalVariantPropNames: PlasmicGiftOptionBlock__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicGiftOptionBlock__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGiftOptionBlock";
  } else {
    func.displayName = `PlasmicGiftOptionBlock.${nodeName}`;
  }
  return func;
}

export const PlasmicGiftOptionBlock = Object.assign(
  // Top-level PlasmicGiftOptionBlock renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),

    // Metadata about props expected for PlasmicGiftOptionBlock
    internalVariantProps: PlasmicGiftOptionBlock__VariantProps,
    internalArgProps: PlasmicGiftOptionBlock__ArgProps
  }
);

export default PlasmicGiftOptionBlock;
/* prettier-ignore-end */
