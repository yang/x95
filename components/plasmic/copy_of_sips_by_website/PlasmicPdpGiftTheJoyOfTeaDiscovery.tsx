// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: jXFrPr0gboxEYQ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageRow from "../../PageRow"; // plasmic-import: AKAM4dN1Fw/component
import SectionMetricsMetric from "../../SectionMetricsMetric"; // plasmic-import: sW6svfkibZkesa/component
import { Carousel } from "../../../../components/carousel"; // plasmic-import: VJ9-SKBWJjSYFK/codeComponent
import Faq from "../../Faq"; // plasmic-import: myilu9wkwV/component
import FaqQuestion from "../../FaqQuestion"; // plasmic-import: 6NoymXHwcF/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent
import { ContentOnHover } from "../../../../components/contentonhover"; // plasmic-import: Q7v4G60Gqx2JfX/codeComponent

import { useScreenVariants as useScreenVariants_6PiZsruRybCC } from "../sips_by_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: 6piZsruRybC-C/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicPdpGiftTheJoyOfTeaDiscovery.module.css"; // plasmic-import: jXFrPr0gboxEYQ/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Id8KGjLkdQoXxj/icon
import BuzzFeedOnWhitesvgIcon from "./icons/PlasmicIcon__BuzzFeedOnWhitesvg"; // plasmic-import: yjRsogMQK2JuLx/icon
import Layer1SvgIcon from "./icons/PlasmicIcon__Layer1Svg"; // plasmic-import: e-kCsG3zM6OO-z/icon
import GroupsvgIcon from "./icons/PlasmicIcon__Groupsvg"; // plasmic-import: IridhowzujR8_J/icon

export type PlasmicPdpGiftTheJoyOfTeaDiscovery__VariantMembers = {};

export type PlasmicPdpGiftTheJoyOfTeaDiscovery__VariantsArgs = {};
type VariantPropType = keyof PlasmicPdpGiftTheJoyOfTeaDiscovery__VariantsArgs;
export const PlasmicPdpGiftTheJoyOfTeaDiscovery__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPdpGiftTheJoyOfTeaDiscovery__ArgsType = {};
type ArgPropType = keyof PlasmicPdpGiftTheJoyOfTeaDiscovery__ArgsType;
export const PlasmicPdpGiftTheJoyOfTeaDiscovery__ArgProps =
  new Array<ArgPropType>();

export type PlasmicPdpGiftTheJoyOfTeaDiscovery__OverridesType = {
  root?: p.Flex<"div">;
  whatYouGetUpdated2?: p.Flex<"section">;
  metricsUpdated?: p.Flex<"section">;
  testimonialsUpdate3?: p.Flex<"section">;
  carousel?: p.Flex<typeof Carousel>;
  faQs?: p.Flex<"div">;
  faq?: p.Flex<typeof Faq>;
  pressSlider?: p.Flex<"section">;
  contentOnHover?: p.Flex<typeof ContentOnHover>;
  buzzfeed2?: p.Flex<"div">;
  huffpost2?: p.Flex<"div">;
  usatoday2?: p.Flex<"div">;
};

export interface DefaultPdpGiftTheJoyOfTeaDiscoveryProps {}

function PlasmicPdpGiftTheJoyOfTeaDiscovery__RenderFunc(props: {
  variants: PlasmicPdpGiftTheJoyOfTeaDiscovery__VariantsArgs;
  args: PlasmicPdpGiftTheJoyOfTeaDiscovery__ArgsType;
  overrides: PlasmicPdpGiftTheJoyOfTeaDiscovery__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6PiZsruRybCC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_sips_by_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"whatYouGetUpdated2"}
            data-plasmic-override={overrides.whatYouGetUpdated2}
            className={classNames(projectcss.all, sty.whatYouGetUpdated2)}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow__xtW4A)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__wjOvW
                )}
              >
                {hasVariant(globalVariants, "screen", "tabletPortrait")
                  ? "Gift the #1 rated tea club"
                  : "Gift the #1 rated tea club"}
              </h2>

              <div className={classNames(projectcss.all, sty.freeBox__myvkB)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fFlnA)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__knUxm)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__dDl3M)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("100px" as const)
                          : ("55px" as const)
                      }
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("100%" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("100px" as const)
                          : ("55px" as const)
                      }
                      loading={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("lazy" as const)
                          : ("lazy" as const)
                      }
                      src={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-bag.svg?v=1636499860" as const)
                          : ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-bag.svg?v=1636499860" as const)
                      }
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6GUfk
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "desktop")
                        ? "Four new teas personally curated every month"
                        : hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                        ? "Four new teas personally curated every month"
                        : hasVariant(globalVariants, "screen", "tabletPortrait")
                        ? "Four new teas personally curated every month"
                        : "Four new teas personally curated every month"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__oi1E)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__viS)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("100px" as const)
                          : ("55px" as const)
                      }
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("100%" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("100px" as const)
                          : ("55px" as const)
                      }
                      loading={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("lazy" as const)
                          : ("lazy" as const)
                      }
                      src={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-pot.svg?v=1636499860" as const)
                          : ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-pot.svg?v=1636499860" as const)
                      }
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__y5Oh
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "desktop")
                        ? "Access to exclusive tea brands only on Sips by"
                        : hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                        ? "Access to exclusive tea brands only on Sips by"
                        : hasVariant(globalVariants, "screen", "tabletPortrait")
                        ? "Access to exclusive tea brands only on Sips by"
                        : "Access to exclusive tea brands only on Sips by"}
                    </div>
                  </p.Stack>
                </p.Stack>

                {(
                  hasVariant(globalVariants, "screen", "desktop")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2J5Im)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__rvcia)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("100%" as const)
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? ("100%" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("545px" as const)
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? ("100%" as const)
                          : ("214px" as const)
                      }
                      loading={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("lazy" as const)
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? ("lazy" as const)
                          : ("lazy" as const)
                      }
                      src={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                          : ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                      }
                    />
                  </div>
                ) : null}

                {(
                  hasVariant(globalVariants, "screen", "desktop")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___0Erq6)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__dWOo)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__iQwM)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        loading={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("lazy" as const)
                            : ("lazy" as const)
                        }
                        src={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-teacup.svg?v=1636499860" as const)
                            : ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-teacup.svg?v=1636499860" as const)
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tSo7M
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "desktop")
                          ? "Reusable tea filters for loose teas + brewing tips"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? "Reusable tea filters for loose teas + brewing tips"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletPortrait"
                            )
                          ? "Reusable tea filters for loose teas + brewing tips"
                          : "Reusable tea filters for loose teas + brewing tips"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__mx037)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__enUtQ)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        loading={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("lazy" as const)
                            : ("lazy" as const)
                        }
                        src={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-leaves.svg?v=1636499860" as const)
                            : ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-leaves.svg?v=1636499860" as const)
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__khPro
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? "Early access to product launches and sales"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletPortrait"
                            )
                          ? "Early access to product launches and sales"
                          : "Early access to product launches and sales"}
                      </div>
                    </p.Stack>
                  </p.Stack>
                ) : null}

                {(
                  hasVariant(globalVariants, "screen", "desktop")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ptzYv)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__eXkkY)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("100%" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("214px" as const)
                          : ("214px" as const)
                      }
                      loading={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("lazy" as const)
                          : ("lazy" as const)
                      }
                      src={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                          : ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                      }
                    />
                  </div>
                ) : null}
              </div>
            </PageRow>
          </section>

          <section
            data-plasmic-name={"metricsUpdated"}
            data-plasmic-override={overrides.metricsUpdated}
            className={classNames(projectcss.all, sty.metricsUpdated)}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow__hdeD)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns___13KqH)}
              >
                <div className={classNames(projectcss.all, sty.column__jai6R)}>
                  <SectionMetricsMetric
                    className={classNames(
                      "__wab_instance",
                      sty.sectionMetricsMetric__x05LZ
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iVa38
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "desktop")
                          ? "tea lovers served"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? "tea lovers served"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletPortrait"
                            )
                          ? "tea lovers served"
                          : "tea lovers served"}
                      </div>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oAm3C
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "desktop")
                        ? "1m"
                        : hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                        ? "1m"
                        : "1m"}
                    </div>
                  </SectionMetricsMetric>
                </div>

                <div className={classNames(projectcss.all, sty.column__uVj0D)}>
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg___6Yfzo)}
                    role={"img"}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__wabBy)}>
                  <SectionMetricsMetric
                    className={classNames(
                      "__wab_instance",
                      sty.sectionMetricsMetric__qOcBl
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zzZzc
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "desktop")
                          ? "tea brands"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? "tea brands"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletPortrait"
                            )
                          ? "tea brands"
                          : "tea brands"}
                      </div>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ijz3N
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "desktop")
                        ? "150+"
                        : hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                        ? "150+"
                        : hasVariant(globalVariants, "screen", "tabletPortrait")
                        ? "150+"
                        : "150+"}
                    </div>
                  </SectionMetricsMetric>
                </div>

                <div className={classNames(projectcss.all, sty.column__q1C23)}>
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__t5AVs)}
                    role={"img"}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__xtTiP)}>
                  <SectionMetricsMetric
                    className={classNames(
                      "__wab_instance",
                      sty.sectionMetricsMetric__gnShd
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rohzz
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "desktop")
                          ? "different teas"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? "different teas"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletPortrait"
                            )
                          ? "different teas"
                          : "different teas"}
                      </div>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__w5Fdl
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "desktop")
                        ? "2k"
                        : hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                        ? "2k"
                        : "2k"}
                    </div>
                  </SectionMetricsMetric>
                </div>
              </p.Stack>
            </PageRow>

            <section
              data-plasmic-name={"testimonialsUpdate3"}
              data-plasmic-override={overrides.testimonialsUpdate3}
              className={classNames(projectcss.all, sty.testimonialsUpdate3)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__oBVkU)}
              >
                {(
                  hasVariant(globalVariants, "screen", "desktop")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.columns__vfi0I)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__vJpSn)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? true
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletPortrait"
                            )
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jJxZ
                          )}
                        >
                          <Carousel
                            data-plasmic-name={"carousel"}
                            data-plasmic-override={overrides.carousel}
                            className={classNames(
                              "__wab_instance",
                              sty.carousel
                            )}
                            lazyLoad={true}
                            navigation={true}
                            navigationButtonAlpha={0.05 as const}
                            navigationOnTop={false}
                            pagination={true}
                            paginationOnTop={false}
                            random={false}
                            slidesPerView={
                              hasVariant(globalVariants, "screen", "desktop")
                                ? {
                                    default: 1,
                                    smallPhones: 1,
                                    phones: 1,
                                    portraitTablets: 1,
                                    landscapeTablets: 1,
                                    bigDesktops: 1
                                  }
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletLandscape"
                                  )
                                ? {
                                    default: 1,
                                    smallPhones: 1,
                                    phones: 1,
                                    portraitTablets: 1,
                                    landscapeTablets: 1,
                                    bigDesktops: 1
                                  }
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletPortrait"
                                  )
                                ? {
                                    default: 1,
                                    smallPhones: 1,
                                    phones: 1,
                                    portraitTablets: 1,
                                    landscapeTablets: 1,
                                    bigDesktops: 1
                                  }
                                : {
                                    default: 1,
                                    smallPhones: 1,
                                    phones: 1,
                                    portraitTablets: 1,
                                    landscapeTablets: 1,
                                    bigDesktops: 1
                                  }
                            }
                          >
                            {(
                              hasVariant(globalVariants, "screen", "desktop")
                                ? true
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletLandscape"
                                  )
                                ? true
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletPortrait"
                                  )
                                ? true
                                : true
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__pzteu
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__a7Tqf
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "desktop"
                                  )
                                    ? "What Sippers Are Saying:"
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletLandscape"
                                      )
                                    ? "What Sippers Are Saying:"
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletPortrait"
                                      )
                                    ? "What Sippers Are Saying:"
                                    : "What Sippers Are Saying:"}
                                </h2>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__jc5S3
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "desktop"
                                  )
                                    ? "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletLandscape"
                                      )
                                    ? "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletPortrait"
                                      )
                                    ? "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""
                                    : "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""}
                                </div>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__s762H
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "desktop"
                                  )
                                    ? "— Lori D."
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletLandscape"
                                      )
                                    ? "— Lori D."
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletPortrait"
                                      )
                                    ? "— Lori D."
                                    : "— Lori D."}
                                </div>
                              </div>
                            ) : null}

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__cnxcD
                              )}
                            >
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__oWYje
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? "What Sippers Are Saying:"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? "What Sippers Are Saying:"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? "What Sippers Are Saying:"
                                  : "What Sippers Are Saying:"}
                              </h2>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__bvc1W
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? '"This whole box was loved! I must admit, I have to fight with my husband over these."'
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? '"This whole box was loved! I must admit, I have to fight with my husband over these."'
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? '"This whole box was loved! I must admit, I have to fight with my husband over these."'
                                  : '"This whole box was loved! I must admit, I have to fight with my husband over these."'}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yDsd6
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? "—  Grace C."
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? "—  Grace C."
                                  : "—  Grace C."}
                              </div>
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___6GLrw
                              )}
                            >
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__ix3Xh
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? "What Sippers Are Saying:"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? "What Sippers Are Saying:"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? "What Sippers Are Saying:"
                                  : "What Sippers Are Saying:"}
                              </h2>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yV6Y
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? '"I wait for my new boxes with child-like anticipation! I love this!"'
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? '"I wait for my new boxes with child-like anticipation! I love this!"'
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? '"I wait for my new boxes with child-like anticipation! I love this!"'
                                  : '"I wait for my new boxes with child-like anticipation! I love this!"'}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___77Ji4
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? "—  Tobi M."
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? "—  Tobi M."
                                  : "—  Tobi M."}
                              </div>
                            </div>
                          </Carousel>
                        </div>
                      ) : null}
                    </div>
                  </div>
                ) : null}
              </PageRow>
            </section>
          </section>

          {true ? (
            <div
              data-plasmic-name={"faQs"}
              data-plasmic-override={overrides.faQs}
              className={classNames(projectcss.all, sty.faQs)}
              id={"pl-section-faq" as const}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__c9I13)}
                width={"reduced" as const}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__aDvfB
                  )}
                >
                  {"Frequently Asked Questions"}
                </h2>

                <Faq
                  data-plasmic-name={"faq"}
                  data-plasmic-override={overrides.faq}
                  className={classNames("__wab_instance", sty.faq)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3GkNi
                      )}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mAEmZ
                          )}
                        >
                          <FaqQuestion
                            className={classNames(
                              "__wab_instance",
                              sty.faqQuestion__dJt4
                            )}
                          >
                            <Embed
                              className={classNames(
                                "__wab_instance",
                                sty.embedHtml__xeYwr
                              )}
                              code={
                                "<details>\n  <summary>\n    <h3>How will my gift card be delivered?</h3>\n  </summary>\n  <div>\n    <p>This is a digital gift card that can be downloaded or emailed. At checkout, choose between downloading a printable card or scheduling an email delivery.</p>\n  </div>\n</details>" as const
                              }
                            />
                          </FaqQuestion>
                        </div>
                      ) : null}

                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__frKjt
                          )}
                        >
                          <FaqQuestion
                            className={classNames(
                              "__wab_instance",
                              sty.faqQuestion__blqyq
                            )}
                          >
                            <Embed
                              className={classNames(
                                "__wab_instance",
                                sty.embedHtml__hCd7W
                              )}
                              code={
                                '<details>\n  <summary>\n    <h3>How can I purchase a physical gift card to be mailed?</h3>\n  </summary>\n  <div>\n    <p>Purchase a physical gift card <a href="https://www.sipsby.com/products/sips-by-box-subscription-physical-gift-card?_pos=6&_sid=70146ee27&_ss=r">here</a>. Please allow up to 10 days for delivery.</p>\n  </div>\n</details>' as const
                              }
                            />
                          </FaqQuestion>
                        </div>
                      ) : null}

                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__z8NMk
                          )}
                        >
                          <FaqQuestion
                            className={classNames(
                              "__wab_instance",
                              sty.faqQuestion__y4FyB
                            )}
                          >
                            <Embed
                              className={classNames(
                                "__wab_instance",
                                sty.embedHtml__ckKaC
                              )}
                              code={
                                "<details>\n  <summary>\n    <h3>What types of products can my gift card be applied to?</h3>\n  </summary>\n  <div>\n    <p>Your gift card can be applied to new or existing personalized Sips by Box Subscriptions* ($16 per month including free shipping within the U.S.).</p>\n  </div>\n</details>" as const
                              }
                            />
                          </FaqQuestion>
                        </div>
                      ) : null}

                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rR21C
                          )}
                        >
                          <FaqQuestion
                            className={classNames(
                              "__wab_instance",
                              sty.faqQuestion__aqHox
                            )}
                          >
                            <Embed
                              className={classNames(
                                "__wab_instance",
                                sty.embedHtml___5W1Kv
                              )}
                              code={
                                '<details>\n  <summary>\n    <h3>Looking to claim a tea gift you received?</h3>\n  </summary>\n  <div>\n    <p>Redeem your gift <a href="https://www.sipsby.com/pages/mygift">here</a>.</p>\n  </div>\n</details>' as const
                              }
                            />
                          </FaqQuestion>
                        </div>
                      ) : null}
                    </p.Stack>
                  ) : null}
                </Faq>
              </PageRow>
            </div>
          ) : null}

          {true ? (
            <section
              data-plasmic-name={"pressSlider"}
              data-plasmic-override={overrides.pressSlider}
              className={classNames(projectcss.all, sty.pressSlider)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__ozlkO)}
              >
                <ContentOnHover
                  data-plasmic-name={"contentOnHover"}
                  data-plasmic-override={overrides.contentOnHover}
                  buttons={
                    <PageRow
                      className={classNames(
                        "__wab_instance",
                        sty.pageRow__wr1Fw
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.columns__byMr5
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__imgl6
                          )}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__t8OxL
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            <p.PlasmicIcon
                              PlasmicIconType={
                                hasVariant(globalVariants, "screen", "desktop")
                                  ? BuzzFeedOnWhitesvgIcon
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? BuzzFeedOnWhitesvgIcon
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? BuzzFeedOnWhitesvgIcon
                                  : BuzzFeedOnWhitesvgIcon
                              }
                              className={classNames(
                                projectcss.all,
                                sty.svg__xOlqT
                              )}
                              role={"img"}
                            />
                          </p.PlasmicLink>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__dSes
                          )}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link___75RyY
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            <p.PlasmicIcon
                              PlasmicIconType={
                                hasVariant(globalVariants, "screen", "desktop")
                                  ? Layer1SvgIcon
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? Layer1SvgIcon
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? Layer1SvgIcon
                                  : Layer1SvgIcon
                              }
                              className={classNames(
                                projectcss.all,
                                sty.svg___3UK6M
                              )}
                              role={"img"}
                            />
                          </p.PlasmicLink>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__sAokf
                          )}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link___37YwA
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            <p.PlasmicIcon
                              PlasmicIconType={
                                hasVariant(globalVariants, "screen", "desktop")
                                  ? GroupsvgIcon
                                  : GroupsvgIcon
                              }
                              className={classNames(
                                projectcss.all,
                                sty.svg__kvxul
                              )}
                              role={"img"}
                            />
                          </p.PlasmicLink>
                        </div>
                      </p.Stack>
                    </PageRow>
                  }
                  className={classNames("__wab_instance", sty.contentOnHover)}
                  defaultDisplay={1 as const}
                  displays={
                    <React.Fragment>
                      {true ? (
                        <div
                          data-plasmic-name={"buzzfeed2"}
                          data-plasmic-override={overrides.buzzfeed2}
                          className={classNames(projectcss.all, sty.buzzfeed2)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hg5Yp
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                              ? '"Perfect for any tea drinker who wants to mix up their go-to flavors with personalized, carefully selected options each month."'
                              : '"Perfect for any tea drinker who wants personalized, carefully selected options each month."\n'}
                          </div>
                        </div>
                      ) : null}

                      {true ? (
                        <div
                          data-plasmic-name={"huffpost2"}
                          data-plasmic-override={overrides.huffpost2}
                          className={classNames(projectcss.all, sty.huffpost2)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___00SeZ
                            )}
                          >
                            {' "An absolute must for all tea devotees."'}
                          </div>
                        </div>
                      ) : null}

                      {true ? (
                        <div
                          data-plasmic-name={"usatoday2"}
                          data-plasmic-override={overrides.usatoday2}
                          className={classNames(projectcss.all, sty.usatoday2)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0Kkyz
                            )}
                          >
                            {
                              '"We love the adorable packaging and wide variety of teas they delivered."'
                            }
                          </div>
                        </div>
                      ) : null}
                    </React.Fragment>
                  }
                />
              </PageRow>
            </section>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "whatYouGetUpdated2",
    "metricsUpdated",
    "testimonialsUpdate3",
    "carousel",
    "faQs",
    "faq",
    "pressSlider",
    "contentOnHover",
    "buzzfeed2",
    "huffpost2",
    "usatoday2"
  ],
  whatYouGetUpdated2: ["whatYouGetUpdated2"],
  metricsUpdated: ["metricsUpdated", "testimonialsUpdate3", "carousel"],
  testimonialsUpdate3: ["testimonialsUpdate3", "carousel"],
  carousel: ["carousel"],
  faQs: ["faQs", "faq"],
  faq: ["faq"],
  pressSlider: [
    "pressSlider",
    "contentOnHover",
    "buzzfeed2",
    "huffpost2",
    "usatoday2"
  ],
  contentOnHover: ["contentOnHover", "buzzfeed2", "huffpost2", "usatoday2"],
  buzzfeed2: ["buzzfeed2"],
  huffpost2: ["huffpost2"],
  usatoday2: ["usatoday2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  whatYouGetUpdated2: "section";
  metricsUpdated: "section";
  testimonialsUpdate3: "section";
  carousel: typeof Carousel;
  faQs: "div";
  faq: typeof Faq;
  pressSlider: "section";
  contentOnHover: typeof ContentOnHover;
  buzzfeed2: "div";
  huffpost2: "div";
  usatoday2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPdpGiftTheJoyOfTeaDiscovery__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPdpGiftTheJoyOfTeaDiscovery__VariantsArgs;
    args?: PlasmicPdpGiftTheJoyOfTeaDiscovery__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicPdpGiftTheJoyOfTeaDiscovery__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicPdpGiftTheJoyOfTeaDiscovery__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPdpGiftTheJoyOfTeaDiscovery__ArgProps,
          internalVariantPropNames:
            PlasmicPdpGiftTheJoyOfTeaDiscovery__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPdpGiftTheJoyOfTeaDiscovery__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPdpGiftTheJoyOfTeaDiscovery";
  } else {
    func.displayName = `PlasmicPdpGiftTheJoyOfTeaDiscovery.${nodeName}`;
  }
  return func;
}

export const PlasmicPdpGiftTheJoyOfTeaDiscovery = Object.assign(
  // Top-level PlasmicPdpGiftTheJoyOfTeaDiscovery renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    whatYouGetUpdated2: makeNodeComponent("whatYouGetUpdated2"),
    metricsUpdated: makeNodeComponent("metricsUpdated"),
    testimonialsUpdate3: makeNodeComponent("testimonialsUpdate3"),
    carousel: makeNodeComponent("carousel"),
    faQs: makeNodeComponent("faQs"),
    faq: makeNodeComponent("faq"),
    pressSlider: makeNodeComponent("pressSlider"),
    contentOnHover: makeNodeComponent("contentOnHover"),
    buzzfeed2: makeNodeComponent("buzzfeed2"),
    huffpost2: makeNodeComponent("huffpost2"),
    usatoday2: makeNodeComponent("usatoday2"),

    // Metadata about props expected for PlasmicPdpGiftTheJoyOfTeaDiscovery
    internalVariantProps: PlasmicPdpGiftTheJoyOfTeaDiscovery__VariantProps,
    internalArgProps: PlasmicPdpGiftTheJoyOfTeaDiscovery__ArgProps
  }
);

export default PlasmicPdpGiftTheJoyOfTeaDiscovery;
/* prettier-ignore-end */
