// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: 7S036wSbZ9Mk-
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicPageHomeReview.module.css"; // plasmic-import: 7S036wSbZ9Mk-/css

import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: sfoG5FkTnFO26P/icon

export type PlasmicPageHomeReview__VariantMembers = {};

export type PlasmicPageHomeReview__VariantsArgs = {};
type VariantPropType = keyof PlasmicPageHomeReview__VariantsArgs;
export const PlasmicPageHomeReview__VariantProps = new Array<VariantPropType>();

export type PlasmicPageHomeReview__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicPageHomeReview__ArgsType;
export const PlasmicPageHomeReview__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicPageHomeReview__OverridesType = {
  root?: p.Flex<"blockquote">;
  svg?: p.Flex<"svg">;
  span?: p.Flex<"span">;
};

export interface DefaultPageHomeReviewProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

function PlasmicPageHomeReview__RenderFunc(props: {
  variants: PlasmicPageHomeReview__VariantsArgs;
  args: PlasmicPageHomeReview__ArgsType;
  overrides: PlasmicPageHomeReview__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <blockquote
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_sips_by_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <Icon4Icon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={"img"}
      />

      <div className={classNames(projectcss.all, sty.freeBox__i0Eh)}>
        {p.renderPlasmicSlot({
          defaultContents:
            "Molestie at eros donec montes finibus arcu porta libero phasellus, facilisi erat massa imperdiet etiam congue lacus accumsan!",
          value: args.slot,
          className: classNames(sty.slotTargetSlot)
        })}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__rFdDm)}>
        <span
          data-plasmic-name={"span"}
          data-plasmic-override={overrides.span}
          className={classNames(
            projectcss.all,
            projectcss.span,
            projectcss.__wab_text,
            sty.span
          )}
        >
          {"â€”"}
        </span>

        <div className={classNames(projectcss.all, sty.freeBox__pqhKn)}>
          {p.renderPlasmicSlot({
            defaultContents: "Name of Author",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </div>
      </div>
    </blockquote>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "span"],
  svg: ["svg"],
  span: ["span"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "blockquote";
  svg: "svg";
  span: "span";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPageHomeReview__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPageHomeReview__VariantsArgs;
    args?: PlasmicPageHomeReview__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPageHomeReview__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPageHomeReview__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPageHomeReview__ArgProps,
          internalVariantPropNames: PlasmicPageHomeReview__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPageHomeReview__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPageHomeReview";
  } else {
    func.displayName = `PlasmicPageHomeReview.${nodeName}`;
  }
  return func;
}

export const PlasmicPageHomeReview = Object.assign(
  // Top-level PlasmicPageHomeReview renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    span: makeNodeComponent("span"),

    // Metadata about props expected for PlasmicPageHomeReview
    internalVariantProps: PlasmicPageHomeReview__VariantProps,
    internalArgProps: PlasmicPageHomeReview__ArgProps
  }
);

export default PlasmicPageHomeReview;
/* prettier-ignore-end */
