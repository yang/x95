// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: F_4-MrCQPfwKe0
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 8Vxup5os6DQ6vy/component

import { useScreenVariants as useScreenVariants_6PiZsruRybCC } from "../sips_by_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: 6piZsruRybC-C/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicSectionMySipsStoriesStory.module.css"; // plasmic-import: F_4-MrCQPfwKe0/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: MpX9BP8blGMfpD/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 4feDHP-bpH6OM4/icon

export type PlasmicSectionMySipsStoriesStory__VariantMembers = {
  wide: "wide";
};

export type PlasmicSectionMySipsStoriesStory__VariantsArgs = {
  wide?: SingleBooleanChoiceArg<"wide">;
};

type VariantPropType = keyof PlasmicSectionMySipsStoriesStory__VariantsArgs;
export const PlasmicSectionMySipsStoriesStory__VariantProps =
  new Array<VariantPropType>("wide");

export type PlasmicSectionMySipsStoriesStory__ArgsType = {
  image?: React.ComponentProps<typeof p.PlasmicImg>["src"];
  children?: React.ReactNode;
  imageAltText?: string;
  destination?: string;
};

type ArgPropType = keyof PlasmicSectionMySipsStoriesStory__ArgsType;
export const PlasmicSectionMySipsStoriesStory__ArgProps =
  new Array<ArgPropType>("image", "children", "imageAltText", "destination");

export type PlasmicSectionMySipsStoriesStory__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  button?: p.Flex<typeof Button>;
};

export interface DefaultSectionMySipsStoriesStoryProps {
  image?: React.ComponentProps<typeof p.PlasmicImg>["src"];
  children?: React.ReactNode;
  imageAltText?: string;
  destination?: string;
  wide?: SingleBooleanChoiceArg<"wide">;
  className?: string;
}

function PlasmicSectionMySipsStoriesStory__RenderFunc(props: {
  variants: PlasmicSectionMySipsStoriesStory__VariantsArgs;
  args: PlasmicSectionMySipsStoriesStory__ArgsType;
  overrides: PlasmicSectionMySipsStoriesStory__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          image:
            "https://cdn.shopify.com/s/files/1/0220/8920/3784/articles/2022_Blog_Squares_-_2022-06-29T102409583.png?v=1656703503" as const
        },
        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6PiZsruRybCC()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_sips_by_design_system_css.plasmic_tokens,
        sty.root,
        { [sty.rootwide]: hasVariant(variants, "wide", "wide") }
      )}
    >
      {true ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__ezkj8, {
            [sty.freeBoxwide__ezkj8ZjQgP]: hasVariant(variants, "wide", "wide")
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox___20Ox6)}>
            {true ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__y19Ex, {
                  [sty.freeBoxwide__y19ExzjQgP]: hasVariant(
                    variants,
                    "wide",
                    "wide"
                  )
                })}
              >
                <p.PlasmicImg
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={args.imageAltText}
                  className={classNames(sty.img)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={args.image}
                />
              </div>
            ) : null}
          </div>

          <div
            className={classNames(projectcss.all, sty.freeBox__cSpp, {
              [sty.freeBoxwide__cSpPzjQgP]: hasVariant(variants, "wide", "wide")
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Enter some text",
              value: args.children,
              className: classNames(sty.slotTargetChildren, {
                [sty.slotTargetChildrenwide]: hasVariant(
                  variants,
                  "wide",
                  "wide"
                )
              })
            })}

            {(
              hasVariant(variants, "wide", "wide") &&
              hasVariant(globalVariants, "screen", "tabletPortrait")
                ? true
                : true
            ) ? (
              <p.PlasmicLink
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(projectcss.all, projectcss.a, sty.link, {
                  [sty.linkwide]: hasVariant(variants, "wide", "wide")
                })}
                component={Link}
                href={args.destination}
                platform={"nextjs"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4SgPs,
                    {
                      [sty.textwide___4SgPszjQgP]: hasVariant(
                        variants,
                        "wide",
                        "wide"
                      )
                    }
                  )}
                >
                  {"SHOW ME"}
                </div>
              </p.PlasmicLink>
            ) : null}

            {(
              hasVariant(variants, "wide", "wide") &&
              hasVariant(globalVariants, "screen", "tabletPortrait")
                ? true
                : true
            ) ? (
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button, {
                  [sty.buttonwide]: hasVariant(variants, "wide", "wide")
                })}
                color={"softGreen" as const}
                link={args.destination}
                shape={"sharp" as const}
                size={"compact" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gyV4N
                  )}
                >
                  {"SHOW ME"}
                </div>
              </Button>
            ) : null}
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "link", "button"],
  img: ["img"],
  link: ["link"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  link: "a";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionMySipsStoriesStory__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionMySipsStoriesStory__VariantsArgs;
    args?: PlasmicSectionMySipsStoriesStory__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSectionMySipsStoriesStory__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSectionMySipsStoriesStory__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSectionMySipsStoriesStory__ArgProps,
          internalVariantPropNames:
            PlasmicSectionMySipsStoriesStory__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSectionMySipsStoriesStory__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionMySipsStoriesStory";
  } else {
    func.displayName = `PlasmicSectionMySipsStoriesStory.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionMySipsStoriesStory = Object.assign(
  // Top-level PlasmicSectionMySipsStoriesStory renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    link: makeNodeComponent("link"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicSectionMySipsStoriesStory
    internalVariantProps: PlasmicSectionMySipsStoriesStory__VariantProps,
    internalArgProps: PlasmicSectionMySipsStoriesStory__ArgProps
  }
);

export default PlasmicSectionMySipsStoriesStory;
/* prettier-ignore-end */
