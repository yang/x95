// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: hmGb0i4cuixo2
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonLnUpdate from "../../ButtonLnUpdate"; // plasmic-import: W3xFx930gMYiRb/component

import { useScreenVariants as useScreenVariants_6PiZsruRybCC } from "../sips_by_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: 6piZsruRybC-C/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicHeroSplitImage.module.css"; // plasmic-import: hmGb0i4cuixo2/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: MpX9BP8blGMfpD/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 4feDHP-bpH6OM4/icon

export type PlasmicHeroSplitImage__VariantMembers = {
  verticalInvert: "verticalInvert";
  verticalImageOffset: "_60" | "_70" | "_90" | "_100" | "_0" | "_30";
  verticalImageHeight: "_50" | "_42";
};

export type PlasmicHeroSplitImage__VariantsArgs = {
  verticalInvert?: SingleBooleanChoiceArg<"verticalInvert">;
  verticalImageOffset?: SingleChoiceArg<
    "_60" | "_70" | "_90" | "_100" | "_0" | "_30"
  >;
  verticalImageHeight?: SingleChoiceArg<"_50" | "_42">;
};

type VariantPropType = keyof PlasmicHeroSplitImage__VariantsArgs;
export const PlasmicHeroSplitImage__VariantProps = new Array<VariantPropType>(
  "verticalInvert",
  "verticalImageOffset",
  "verticalImageHeight"
);

export type PlasmicHeroSplitImage__ArgsType = {
  image?: React.ComponentProps<typeof p.PlasmicImg>["src"];
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHeroSplitImage__ArgsType;
export const PlasmicHeroSplitImage__ArgProps = new Array<ArgPropType>(
  "image",
  "children"
);

export type PlasmicHeroSplitImage__OverridesType = {
  root?: p.Flex<"section">;
  heroMobileImage2?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultHeroSplitImageProps {
  image?: React.ComponentProps<typeof p.PlasmicImg>["src"];
  children?: React.ReactNode;
  verticalInvert?: SingleBooleanChoiceArg<"verticalInvert">;
  verticalImageOffset?: SingleChoiceArg<
    "_60" | "_70" | "_90" | "_100" | "_0" | "_30"
  >;
  verticalImageHeight?: SingleChoiceArg<"_50" | "_42">;
  className?: string;
}

function PlasmicHeroSplitImage__RenderFunc(props: {
  variants: PlasmicHeroSplitImage__VariantsArgs;
  args: PlasmicHeroSplitImage__ArgsType;
  overrides: PlasmicHeroSplitImage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          image: {
            src: "/plasmic/copy_of_sips_by_website/images/imagepng.png",
            fullWidth: 3360,
            fullHeight: 4851,
            aspectRatio: undefined
          }
        },
        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6PiZsruRybCC()
  });

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_sips_by_design_system_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootverticalImageHeight__42]: hasVariant(
            variants,
            "verticalImageHeight",
            "_42"
          ),
          [sty.rootverticalImageHeight__50]: hasVariant(
            variants,
            "verticalImageHeight",
            "_50"
          ),
          [sty.rootverticalInvert]: hasVariant(
            variants,
            "verticalInvert",
            "verticalInvert"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__ziCHt, {
          [sty.freeBoxverticalImageHeight__42__ziCHtjHZkK]: hasVariant(
            variants,
            "verticalImageHeight",
            "_42"
          ),
          [sty.freeBoxverticalImageHeight__50__ziCHtIPwOw]: hasVariant(
            variants,
            "verticalImageHeight",
            "_50"
          ),
          [sty.freeBoxverticalInvert__ziCHtkoLaS]: hasVariant(
            variants,
            "verticalInvert",
            "verticalInvert"
          )
        })}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__aBwjd, {
            [sty.freeBoxverticalImageHeight__42__aBwjDjHZkK]: hasVariant(
              variants,
              "verticalImageHeight",
              "_42"
            ),
            [sty.freeBoxverticalInvert__aBwjDkoLaS]: hasVariant(
              variants,
              "verticalInvert",
              "verticalInvert"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__fqgF8
                  )}
                >
                  {"Your Better Path to Tea Starts Here"}
                </h2>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sNq29
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"Join the only "}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontStyle: "italic" }}
                    >
                      {"truly"}
                    </span>
                    <React.Fragment>
                      {
                        " personalized tea club\nto discover your new favorites, or shop thousands of premium top-rated teas and hundreds of the world's best tea brands now."
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__kAbH)}
                >
                  <ButtonLnUpdate
                    buttonColor={"darkPink" as const}
                    className={classNames(
                      "__wab_instance",
                      sty.buttonLnUpdate__fwDvl
                    )}
                    link={"/account/register" as const}
                  >
                    {"Join The Club"}
                  </ButtonLnUpdate>

                  <ButtonLnUpdate
                    buttonColor={"darkPink" as const}
                    className={classNames(
                      "__wab_instance",
                      sty.buttonLnUpdate__bfvOq
                    )}
                    link={
                      "https://www.sipsby.com/collections/iced-tea-favorites/" as const
                    }
                  >
                    {"Shop Now"}
                  </ButtonLnUpdate>
                </p.Stack>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__iGaeD
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/" as const}
                  platform={"nextjs"}
                >
                  {"Shop All Tea Now"}
                </p.PlasmicLink>
              </React.Fragment>
            ),
            value: args.children
          })}
        </p.Stack>
      </div>

      <p.PlasmicImg
        data-plasmic-name={"heroMobileImage2"}
        data-plasmic-override={overrides.heroMobileImage2}
        alt={
          hasVariant(globalVariants, "screen", "desktop")
            ? ("A m" as const)
            : hasVariant(globalVariants, "screen", "tabletLandscape")
            ? ("A m" as const)
            : ("A m" as const)
        }
        className={classNames(sty.heroMobileImage2, {
          [sty.heroMobileImage2verticalImageHeight__42]: hasVariant(
            variants,
            "verticalImageHeight",
            "_42"
          ),
          [sty.heroMobileImage2verticalImageHeight__50]: hasVariant(
            variants,
            "verticalImageHeight",
            "_50"
          ),
          [sty.heroMobileImage2verticalImageOffset__0]: hasVariant(
            variants,
            "verticalImageOffset",
            "_0"
          ),
          [sty.heroMobileImage2verticalImageOffset__100]: hasVariant(
            variants,
            "verticalImageOffset",
            "_100"
          ),
          [sty.heroMobileImage2verticalImageOffset__30]: hasVariant(
            variants,
            "verticalImageOffset",
            "_30"
          ),
          [sty.heroMobileImage2verticalImageOffset__60]: hasVariant(
            variants,
            "verticalImageOffset",
            "_60"
          ),
          [sty.heroMobileImage2verticalImageOffset__70]: hasVariant(
            variants,
            "verticalImageOffset",
            "_70"
          ),
          [sty.heroMobileImage2verticalImageOffset__90]: hasVariant(
            variants,
            "verticalImageOffset",
            "_90"
          ),
          [sty.heroMobileImage2verticalInvert]: hasVariant(
            variants,
            "verticalInvert",
            "verticalInvert"
          )
        })}
        displayHeight={
          hasVariant(variants, "verticalImageHeight", "_42") &&
          hasVariant(globalVariants, "screen", "tabletLandscape")
            ? ("100%" as const)
            : hasVariant(variants, "verticalImageHeight", "_42")
            ? ("42%" as const)
            : hasVariant(variants, "verticalImageHeight", "_50") &&
              hasVariant(globalVariants, "screen", "tabletLandscape")
            ? ("100%" as const)
            : hasVariant(variants, "verticalImageHeight", "_50")
            ? ("50%" as const)
            : hasVariant(globalVariants, "screen", "desktop")
            ? ("100%" as const)
            : hasVariant(globalVariants, "screen", "tabletLandscape")
            ? ("100%" as const)
            : hasVariant(globalVariants, "screen", "tabletPortrait")
            ? ("40%" as const)
            : ("35%" as const)
        }
        displayMaxHeight={"none" as const}
        displayMaxWidth={
          hasVariant(globalVariants, "screen", "desktop")
            ? ("100%" as const)
            : hasVariant(globalVariants, "screen", "tabletLandscape")
            ? ("100%" as const)
            : ("100%" as const)
        }
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={
          hasVariant(globalVariants, "screen", "desktop")
            ? ("50%" as const)
            : hasVariant(globalVariants, "screen", "tabletLandscape")
            ? ("50%" as const)
            : ("100%" as const)
        }
        loading={
          hasVariant(globalVariants, "screen", "desktop")
            ? ("eager" as const)
            : hasVariant(globalVariants, "screen", "tabletLandscape")
            ? ("eager" as const)
            : ("eager" as const)
        }
        src={args.image}
      />
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "heroMobileImage2"],
  heroMobileImage2: ["heroMobileImage2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
  heroMobileImage2: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeroSplitImage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeroSplitImage__VariantsArgs;
    args?: PlasmicHeroSplitImage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeroSplitImage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeroSplitImage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHeroSplitImage__ArgProps,
          internalVariantPropNames: PlasmicHeroSplitImage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHeroSplitImage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroSplitImage";
  } else {
    func.displayName = `PlasmicHeroSplitImage.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroSplitImage = Object.assign(
  // Top-level PlasmicHeroSplitImage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    heroMobileImage2: makeNodeComponent("heroMobileImage2"),

    // Metadata about props expected for PlasmicHeroSplitImage
    internalVariantProps: PlasmicHeroSplitImage__VariantProps,
    internalArgProps: PlasmicHeroSplitImage__ArgProps
  }
);

export default PlasmicHeroSplitImage;
/* prettier-ignore-end */
