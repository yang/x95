// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: CkZYy5llJqF9n6
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MenuLinkDesktop from "../../MenuLinkDesktop"; // plasmic-import: UGKDap61CYE_TA/component
import DesktopMenuFeaturedBlock from "../../DesktopMenuFeaturedBlock"; // plasmic-import: 5GribXSnrnPdXi/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicNavDropdownLnTeawareMenu.module.css"; // plasmic-import: CkZYy5llJqF9n6/css

export type PlasmicNavDropdownLnTeawareMenu__VariantMembers = {};

export type PlasmicNavDropdownLnTeawareMenu__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavDropdownLnTeawareMenu__VariantsArgs;
export const PlasmicNavDropdownLnTeawareMenu__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNavDropdownLnTeawareMenu__ArgsType = {
  link?: string;
};

type ArgPropType = keyof PlasmicNavDropdownLnTeawareMenu__ArgsType;
export const PlasmicNavDropdownLnTeawareMenu__ArgProps = new Array<ArgPropType>(
  "link"
);

export type PlasmicNavDropdownLnTeawareMenu__OverridesType = {
  root?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  menuColumn8?: p.Flex<"div">;
  menuColumn9?: p.Flex<"div">;
  productColumn3?: p.Flex<"div">;
};

export interface DefaultNavDropdownLnTeawareMenuProps {}

function PlasmicNavDropdownLnTeawareMenu__RenderFunc(props: {
  variants: PlasmicNavDropdownLnTeawareMenu__VariantsArgs;
  args: PlasmicNavDropdownLnTeawareMenu__ArgsType;
  overrides: PlasmicNavDropdownLnTeawareMenu__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          link: "/" as const
        },
        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_sips_by_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__zjib7)}>
              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___5Zp9Z)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"menuColumn8"}
                    data-plasmic-override={overrides.menuColumn8}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.menuColumn8)}
                  >
                    <p
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p__pEsjI
                      )}
                    >
                      {"Explore"}
                    </p>

                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dqLqi
                        )}
                      >
                        <MenuLinkDesktop
                          className={classNames(
                            "__wab_instance",
                            sty.menuLinkDesktop__uDycC
                          )}
                          link={"/collections/new-tea-arrivals/" as const}
                        >
                          {"New Arrivals"}
                        </MenuLinkDesktop>

                        <MenuLinkDesktop
                          className={classNames(
                            "__wab_instance",
                            sty.menuLinkDesktop__vuMe9
                          )}
                          link={"/collections/best-selling-teaware/" as const}
                        >
                          {"Best Sellers"}
                        </MenuLinkDesktop>

                        <MenuLinkDesktop
                          className={classNames(
                            "__wab_instance",
                            sty.menuLinkDesktop__s9Rmt
                          )}
                          link={"/collections/tea-gifts/" as const}
                        >
                          {"Gifts for Tea Lovers"}
                        </MenuLinkDesktop>
                      </p.Stack>
                    ) : null}
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"menuColumn9"}
                    data-plasmic-override={overrides.menuColumn9}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.menuColumn9)}
                  >
                    <p
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p__cj4Pd
                      )}
                    >
                      {"Teaware"}
                    </p>

                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__z09T4
                        )}
                      >
                        <MenuLinkDesktop
                          className={classNames(
                            "__wab_instance",
                            sty.menuLinkDesktop__yfSm
                          )}
                          link={"/collections/mugs/" as const}
                        >
                          {"Teacups + Mugs"}
                        </MenuLinkDesktop>

                        <MenuLinkDesktop
                          className={classNames(
                            "__wab_instance",
                            sty.menuLinkDesktop__zNtc
                          )}
                          link={"/collections/teapots-tea-makers/" as const}
                        >
                          {"Teapots + Tea Makers"}
                        </MenuLinkDesktop>

                        <MenuLinkDesktop
                          className={classNames(
                            "__wab_instance",
                            sty.menuLinkDesktop__ybc5O
                          )}
                          link={"/collections/filters-infusers/" as const}
                        >
                          {"Infusers + Filters"}
                        </MenuLinkDesktop>

                        <MenuLinkDesktop
                          className={classNames(
                            "__wab_instance",
                            sty.menuLinkDesktop___9W0Hv
                          )}
                          link={"/collections/tea-accessories-all" as const}
                        >
                          {"Shop All"}
                        </MenuLinkDesktop>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                </div>
              ) : null}
            </div>

            <div className={classNames(projectcss.all, sty.column__zhFm)}>
              <p.Stack
                as={"div"}
                data-plasmic-name={"productColumn3"}
                data-plasmic-override={overrides.productColumn3}
                hasGap={true}
                className={classNames(projectcss.all, sty.productColumn3)}
              >
                <p
                  className={classNames(
                    projectcss.all,
                    projectcss.p,
                    projectcss.__wab_text,
                    sty.p__q0Cgp
                  )}
                >
                  {"Featured Teaware"}
                </p>

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___1Foil)}
                  >
                    <DesktopMenuFeaturedBlock
                      className={classNames(
                        "__wab_instance",
                        sty.desktopMenuFeaturedBlock__ywH1B
                      )}
                      link={
                        "https://www.sipsby.com/products/glass-infuser-teapot" as const
                      }
                      slot={"Galaxy Glass Teapot"}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__zKbt8)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/copy_of_sips_by_website/images/sipsByMayTeapotjpg.jpeg",
                          fullWidth: 2511,
                          fullHeight: 2511,
                          aspectRatio: undefined
                        }}
                      />
                    </DesktopMenuFeaturedBlock>

                    <DesktopMenuFeaturedBlock
                      className={classNames(
                        "__wab_instance",
                        sty.desktopMenuFeaturedBlock__cvYzj
                      )}
                      link={
                        "https://www.sipsby.com/products/rifle-paper-co-strawberry-fields-porcelain-mug" as const
                      }
                      slot={"Strawberry Fields Mug"}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__y6BUo)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/copy_of_sips_by_website/images/riflePaperCoStrawberryFieldsMugFrontpng.png",
                          fullWidth: 1080,
                          fullHeight: 1080,
                          aspectRatio: undefined
                        }}
                      />
                    </DesktopMenuFeaturedBlock>

                    <DesktopMenuFeaturedBlock
                      className={classNames(
                        "__wab_instance",
                        sty.desktopMenuFeaturedBlock__kxs7L
                      )}
                      link={
                        "https://www.sipsby.com/products/gold-heart-tea-infuser" as const
                      }
                      slot={"Gold Heart Tea Infuser"}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__xcRfn)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/copy_of_sips_by_website/images/goldTeaInfuserLeaf58A9E3A512Aa4493Ad9B96B5Bb0D592Ajpg.jpeg",
                          fullWidth: 3000,
                          fullHeight: 3000,
                          aspectRatio: undefined
                        }}
                      />
                    </DesktopMenuFeaturedBlock>
                  </p.Stack>
                ) : null}
              </p.Stack>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "menuColumn8", "menuColumn9", "productColumn3"],
  columns: ["columns", "menuColumn8", "menuColumn9", "productColumn3"],
  menuColumn8: ["menuColumn8"],
  menuColumn9: ["menuColumn9"],
  productColumn3: ["productColumn3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  menuColumn8: "div";
  menuColumn9: "div";
  productColumn3: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavDropdownLnTeawareMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavDropdownLnTeawareMenu__VariantsArgs;
    args?: PlasmicNavDropdownLnTeawareMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavDropdownLnTeawareMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavDropdownLnTeawareMenu__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavDropdownLnTeawareMenu__ArgProps,
          internalVariantPropNames:
            PlasmicNavDropdownLnTeawareMenu__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNavDropdownLnTeawareMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavDropdownLnTeawareMenu";
  } else {
    func.displayName = `PlasmicNavDropdownLnTeawareMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicNavDropdownLnTeawareMenu = Object.assign(
  // Top-level PlasmicNavDropdownLnTeawareMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    menuColumn8: makeNodeComponent("menuColumn8"),
    menuColumn9: makeNodeComponent("menuColumn9"),
    productColumn3: makeNodeComponent("productColumn3"),

    // Metadata about props expected for PlasmicNavDropdownLnTeawareMenu
    internalVariantProps: PlasmicNavDropdownLnTeawareMenu__VariantProps,
    internalArgProps: PlasmicNavDropdownLnTeawareMenu__ArgProps
  }
);

export default PlasmicNavDropdownLnTeawareMenu;
/* prettier-ignore-end */
