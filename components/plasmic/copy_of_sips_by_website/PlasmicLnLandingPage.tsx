// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: ZIS6NQWWmNM0WX
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageRow from "../../PageRow"; // plasmic-import: AKAM4dN1Fw/component
import ButtonLnUpdate from "../../ButtonLnUpdate"; // plasmic-import: W3xFx930gMYiRb/component
import SectionMetricsMetric from "../../SectionMetricsMetric"; // plasmic-import: sW6svfkibZkesa/component
import { ContentOnHover } from "../../../../components/contentonhover"; // plasmic-import: Q7v4G60Gqx2JfX/codeComponent
import PressQuote from "../../PressQuote"; // plasmic-import: Jafmc9q9Y29joe/component
import EcommBlockModule from "../../EcommBlockModule"; // plasmic-import: SVsSN17uZItN3m/component
import { Carousel } from "../../../../components/carousel"; // plasmic-import: VJ9-SKBWJjSYFK/codeComponent
import { Styler } from "../../../../components/styler"; // plasmic-import: A1XXeY8abna3Rm/codeComponent

import { useScreenVariants as useScreenVariants_6PiZsruRybCC } from "../sips_by_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: 6piZsruRybC-C/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicLnLandingPage.module.css"; // plasmic-import: ZIS6NQWWmNM0WX/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: MpX9BP8blGMfpD/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 4feDHP-bpH6OM4/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Id8KGjLkdQoXxj/icon
import BuzzFeedOnWhitesvgIcon from "./icons/PlasmicIcon__BuzzFeedOnWhitesvg"; // plasmic-import: yjRsogMQK2JuLx/icon
import Layer1SvgIcon from "./icons/PlasmicIcon__Layer1Svg"; // plasmic-import: e-kCsG3zM6OO-z/icon
import GroupsvgIcon from "./icons/PlasmicIcon__Groupsvg"; // plasmic-import: IridhowzujR8_J/icon

export type PlasmicLnLandingPage__VariantMembers = {};

export type PlasmicLnLandingPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicLnLandingPage__VariantsArgs;
export const PlasmicLnLandingPage__VariantProps = new Array<VariantPropType>();

export type PlasmicLnLandingPage__ArgsType = {};
type ArgPropType = keyof PlasmicLnLandingPage__ArgsType;
export const PlasmicLnLandingPage__ArgProps = new Array<ArgPropType>();

export type PlasmicLnLandingPage__OverridesType = {
  root?: p.Flex<"div">;
  hero?: p.Flex<"section">;
  landingPageDoubleCta?: p.Flex<"div">;
  heroMobileImage?: p.Flex<typeof p.PlasmicImg>;
  whatYouGetUpdated?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  landingPageDoubleCta2?: p.Flex<"div">;
  metricsUpdated?: p.Flex<"section">;
  pressSlider?: p.Flex<"section">;
  contentOnHover?: p.Flex<typeof ContentOnHover>;
  buzzfeed2?: p.Flex<"div">;
  huffpost2?: p.Flex<"div">;
  usatoday2?: p.Flex<"div">;
  pressStatic?: p.Flex<"section">;
  usatoday3?: p.Flex<"div">;
  huffpost3?: p.Flex<"div">;
  buzzfeed3?: p.Flex<"div">;
  pressQuote?: p.Flex<typeof PressQuote>;
  aboutUs?: p.Flex<"div">;
  testimonials?: p.Flex<"section">;
  carousel?: p.Flex<typeof Carousel>;
  styler?: p.Flex<typeof Styler>;
};

export interface DefaultLnLandingPageProps {}

function PlasmicLnLandingPage__RenderFunc(props: {
  variants: PlasmicLnLandingPage__VariantsArgs;
  args: PlasmicLnLandingPage__ArgsType;
  overrides: PlasmicLnLandingPage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6PiZsruRybCC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_sips_by_design_system_css.plasmic_tokens,
              sty.root
            )}
          >
            <section
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              className={classNames(projectcss.all, sty.hero)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___173K)}>
                <PageRow
                  className={classNames("__wab_instance", sty.pageRow__zqmLb)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__v0Wdu)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__rrA34
                      )}
                    >
                      {"Tea is the perfect gift for mom (orÂ yourself)."}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gvUrM
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "desktop")
                        ? "Made by tea lovers, just for you. Four personalized teas for just $16/month. "
                        : "Made by tea lovers, just for you. Four personalized teas for just $16/month. "}
                    </div>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"landingPageDoubleCta"}
                      data-plasmic-override={overrides.landingPageDoubleCta}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.landingPageDoubleCta
                      )}
                    >
                      <ButtonLnUpdate
                        buttonColor={"darkPink" as const}
                        className={classNames(
                          "__wab_instance",
                          sty.buttonLnUpdate___9LnAz
                        )}
                        link={"/account/register" as const}
                      >
                        {"Get the Box"}
                      </ButtonLnUpdate>

                      <ButtonLnUpdate
                        buttonColor={"darkPink" as const}
                        className={classNames(
                          "__wab_instance",
                          sty.buttonLnUpdate__t5Vg2
                        )}
                        link={"/pages/lp-gift" as const}
                      >
                        {"Give the Box"}
                      </ButtonLnUpdate>
                    </p.Stack>
                  </p.Stack>
                </PageRow>
              </div>

              <p.PlasmicImg
                data-plasmic-name={"heroMobileImage"}
                data-plasmic-override={overrides.heroMobileImage}
                alt={"A m" as const}
                className={classNames(sty.heroMobileImage)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? ("100%" as const)
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? ("100%" as const)
                    : ("50%" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? ("50%" as const)
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? ("50%" as const)
                    : ("100%" as const)
                }
                loading={"eager" as const}
                src={{
                  src: "/plasmic/copy_of_sips_by_website/images/image2.png",
                  fullWidth: 8116,
                  fullHeight: 5414,
                  aspectRatio: undefined
                }}
              />
            </section>

            <section
              data-plasmic-name={"whatYouGetUpdated"}
              data-plasmic-override={overrides.whatYouGetUpdated}
              className={classNames(projectcss.all, sty.whatYouGetUpdated)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__i72O3)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {hasVariant(globalVariants, "screen", "desktop")
                    ? "Join the #1 rated tea club"
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? "Join the #1 rated tea club"
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? "Join the #1 rated tea club"
                    : "Join the #1 rated tea club"}
                </h1>

                <div className={classNames(projectcss.all, sty.freeBox__myvkB)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__fFlnA)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__knUxm)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__dDl3M)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        loading={"lazy" as const}
                        src={
                          "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-bag.svg?v=1636499860" as const
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6GUfk
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "desktop")
                          ? "Four new teas personally curated every month"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? "Four new teas personally curated every month"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletPortrait"
                            )
                          ? "Four new teas personally curated every month"
                          : "Four new teas personally curated every month"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__oi1E)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__viS)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        loading={"lazy" as const}
                        src={
                          "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-pot.svg?v=1636499860" as const
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__y5Oh
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "desktop")
                          ? "Access to exclusive tea brands only on Sips by"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletPortrait"
                            )
                          ? "Access to exclusive tea brands only on Sips by"
                          : "Access to exclusive tea brands only on Sips by"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  {(
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? true
                      : hasVariant(globalVariants, "screen", "tabletPortrait")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2J5Im
                      )}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__rvcia)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("545px" as const)
                            : hasVariant(
                                globalVariants,
                                "screen",
                                "tabletLandscape"
                              )
                            ? ("100%" as const)
                            : ("214px" as const)
                        }
                        loading={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("lazy" as const)
                            : ("lazy" as const)
                        }
                        src={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                            : ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                        }
                      />
                    </div>
                  ) : null}

                  {(
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? true
                      : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0Erq6
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dWOo
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__iQwM)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? ("100px" as const)
                              : ("55px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? ("100px" as const)
                              : ("55px" as const)
                          }
                          loading={"lazy" as const}
                          src={
                            "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-teacup.svg?v=1636499860" as const
                          }
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tSo7M
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? "Reusable tea filters for loose teas + brewing tips"
                            : hasVariant(
                                globalVariants,
                                "screen",
                                "tabletPortrait"
                              )
                            ? "Reusable tea filters for loose teas + brewing tips"
                            : "Reusable tea filters for loose teas + brewing tips"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mx037
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__enUtQ)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? ("100px" as const)
                              : ("55px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? ("100px" as const)
                              : ("55px" as const)
                          }
                          loading={"lazy" as const}
                          src={
                            "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-leaves.svg?v=1636499860" as const
                          }
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__khPro
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "tabletPortrait"
                          )
                            ? "Early access to product launches and sales"
                            : "Early access to product launches and sales"}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  ) : null}

                  {(
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ptzYv)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__eXkkY)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("214px" as const)
                            : ("214px" as const)
                        }
                        loading={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("lazy" as const)
                            : ("lazy" as const)
                        }
                        src={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                            : ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                        }
                      />
                    </div>
                  ) : null}
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"landingPageDoubleCta2"}
                  data-plasmic-override={overrides.landingPageDoubleCta2}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.landingPageDoubleCta2
                  )}
                >
                  <ButtonLnUpdate
                    className={classNames(
                      "__wab_instance",
                      sty.buttonLnUpdate__kgGh
                    )}
                    link={"/account/register" as const}
                  >
                    {"Get the Box"}
                  </ButtonLnUpdate>

                  <ButtonLnUpdate
                    className={classNames(
                      "__wab_instance",
                      sty.buttonLnUpdate__sFlSw
                    )}
                    link={"/pages/lp-gift" as const}
                  >
                    {"Give the Box"}
                  </ButtonLnUpdate>
                </p.Stack>
              </PageRow>
            </section>

            {true ? (
              <section
                data-plasmic-name={"metricsUpdated"}
                data-plasmic-override={overrides.metricsUpdated}
                className={classNames(projectcss.all, sty.metricsUpdated)}
              >
                <PageRow
                  className={classNames("__wab_instance", sty.pageRow__gjS4L)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns__sdsvD)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__n5Xit)}
                    >
                      <SectionMetricsMetric
                        className={classNames(
                          "__wab_instance",
                          sty.sectionMetricsMetric__vwp1A
                        )}
                        slot={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___2BrX8
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "desktop")
                              ? "tea lovers served"
                              : "tea lovers served"}
                          </div>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ypWpi
                          )}
                        >
                          {"1m"}
                        </div>
                      </SectionMetricsMetric>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__lMcYe)}
                    >
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg___5NCtc)}
                        role={"img"}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column___7GWp)}
                    >
                      <SectionMetricsMetric
                        className={classNames(
                          "__wab_instance",
                          sty.sectionMetricsMetric__buDqh
                        )}
                        slot={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cnsvL
                            )}
                          >
                            {"tea brands"}
                          </div>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ieZfl
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "desktop")
                            ? "150+"
                            : "150+"}
                        </div>
                      </SectionMetricsMetric>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__oAjiw)}
                    >
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg__xx4G9)}
                        role={"img"}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__ofpS7)}
                    >
                      <SectionMetricsMetric
                        className={classNames(
                          "__wab_instance",
                          sty.sectionMetricsMetric___4Fzpu
                        )}
                        slot={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qZwvk
                            )}
                          >
                            {"different teas"}
                          </div>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1UItC
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "desktop")
                            ? "2k"
                            : "2k"}
                        </div>
                      </SectionMetricsMetric>
                    </div>
                  </p.Stack>
                </PageRow>
              </section>
            ) : null}

            <section
              data-plasmic-name={"pressSlider"}
              data-plasmic-override={overrides.pressSlider}
              className={classNames(projectcss.all, sty.pressSlider)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow___41BSv)}
              >
                <ContentOnHover
                  data-plasmic-name={"contentOnHover"}
                  data-plasmic-override={overrides.contentOnHover}
                  buttons={
                    <PageRow
                      className={classNames(
                        "__wab_instance",
                        sty.pageRow__gKjM
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.columns__mrIgo
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__q9Lyk
                          )}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link___3KrB
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            <p.PlasmicIcon
                              PlasmicIconType={
                                hasVariant(globalVariants, "screen", "desktop")
                                  ? BuzzFeedOnWhitesvgIcon
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? BuzzFeedOnWhitesvgIcon
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? BuzzFeedOnWhitesvgIcon
                                  : BuzzFeedOnWhitesvgIcon
                              }
                              className={classNames(
                                projectcss.all,
                                sty.svg__hD7Fw
                              )}
                              role={"img"}
                            />
                          </p.PlasmicLink>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__xeHj
                          )}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__wuYnk
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            <p.PlasmicIcon
                              PlasmicIconType={
                                hasVariant(globalVariants, "screen", "desktop")
                                  ? Layer1SvgIcon
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? Layer1SvgIcon
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? Layer1SvgIcon
                                  : Layer1SvgIcon
                              }
                              className={classNames(
                                projectcss.all,
                                sty.svg__nJk3N
                              )}
                              role={"img"}
                            />
                          </p.PlasmicLink>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__t8Hn0
                          )}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__sHbC3
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            <p.PlasmicIcon
                              PlasmicIconType={
                                hasVariant(globalVariants, "screen", "desktop")
                                  ? GroupsvgIcon
                                  : GroupsvgIcon
                              }
                              className={classNames(
                                projectcss.all,
                                sty.svg__lvkqO
                              )}
                              role={"img"}
                            />
                          </p.PlasmicLink>
                        </div>
                      </p.Stack>
                    </PageRow>
                  }
                  className={classNames("__wab_instance", sty.contentOnHover)}
                  defaultDisplay={2 as const}
                  displays={
                    <React.Fragment>
                      {true ? (
                        <div
                          data-plasmic-name={"buzzfeed2"}
                          data-plasmic-override={overrides.buzzfeed2}
                          className={classNames(projectcss.all, sty.buzzfeed2)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wphRe
                            )}
                          >
                            {
                              '"Perfect for any tea drinker who wants to mix up their go-to flavors with personalized, carefully selected options each month."'
                            }
                          </div>
                        </div>
                      ) : null}

                      {true ? (
                        <div
                          data-plasmic-name={"huffpost2"}
                          data-plasmic-override={overrides.huffpost2}
                          className={classNames(projectcss.all, sty.huffpost2)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___00SeZ
                            )}
                          >
                            {' "An absolute must for all tea devotees."'}
                          </div>
                        </div>
                      ) : null}

                      {true ? (
                        <div
                          data-plasmic-name={"usatoday2"}
                          data-plasmic-override={overrides.usatoday2}
                          className={classNames(projectcss.all, sty.usatoday2)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0Kkyz
                            )}
                          >
                            {
                              '"We love the adorable packaging and wide variety of teas they delivered."'
                            }
                          </div>
                        </div>
                      ) : null}
                    </React.Fragment>
                  }
                />
              </PageRow>
            </section>

            <section
              data-plasmic-name={"pressStatic"}
              data-plasmic-override={overrides.pressStatic}
              className={classNames(projectcss.all, sty.pressStatic)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__seRaI)}
              >
                {true ? (
                  <div
                    data-plasmic-name={"usatoday3"}
                    data-plasmic-override={overrides.usatoday3}
                    className={classNames(projectcss.all, sty.usatoday3)}
                  />
                ) : null}

                {true ? (
                  <div
                    data-plasmic-name={"huffpost3"}
                    data-plasmic-override={overrides.huffpost3}
                    className={classNames(projectcss.all, sty.huffpost3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___00SeZ
                      )}
                    >
                      {' "An absolute must for all tea devotees."'}
                    </div>
                  </div>
                ) : null}

                {true ? (
                  <div
                    data-plasmic-name={"buzzfeed3"}
                    data-plasmic-override={overrides.buzzfeed3}
                    className={classNames(projectcss.all, sty.buzzfeed3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__agrw4
                      )}
                    >
                      {
                        '"Perfect for any tea drinker who wants to mix up their go-to flavors with personalized, carefully selected options each month."'
                      }
                    </div>
                  </div>
                ) : null}

                <div className={classNames(projectcss.all, sty.freeBox__qbYgU)}>
                  <PressQuote
                    data-plasmic-name={"pressQuote"}
                    data-plasmic-override={overrides.pressQuote}
                    className={classNames("__wab_instance", sty.pressQuote)}
                  />
                </div>
              </PageRow>
            </section>

            <EcommBlockModule
              className={classNames(
                "__wab_instance",
                sty.ecommBlockModule__p0R4
              )}
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hl0Lz
                  )}
                >
                  {hasVariant(globalVariants, "screen", "desktop")
                    ? "Heart of Gold"
                    : "Heart of Gold"}
                </div>
              }
              slot2={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kTSzR
                  )}
                >
                  {hasVariant(globalVariants, "screen", "desktop")
                    ? "Celebrate mom with handpicked gifts guaranteed to make her feel loved."
                    : "Celebrate mom with handpicked gifts guaranteed to make her feel loved."}
                </div>
              }
              slot3={
                <ButtonLnUpdate
                  className={classNames(
                    "__wab_instance",
                    sty.buttonLnUpdate__z31Wg
                  )}
                  link={"/collections/mothers-day-tea-gift-shop" as const}
                >
                  {"Shop Now"}
                </ButtonLnUpdate>
              }
            >
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__xfYvi
                )}
                component={Link}
                href={"/collections/mothers-day-tea-gift-shop" as const}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__fuPvG)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_sips_by_website/images/heartSteeperjpg.jpeg",
                    fullWidth: 3007,
                    fullHeight: 3007,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>
            </EcommBlockModule>

            <EcommBlockModule
              className={classNames(
                "__wab_instance",
                sty.ecommBlockModule__tujUh
              )}
              slot={
                hasVariant(globalVariants, "screen", "desktop")
                  ? "The Peach Tea Collection"
                  : "The Peach Tea Collection"
              }
              slot2={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xwwDp
                  )}
                >
                  {
                    "Savor the sweetness of a ripe peach with our newest curated collection."
                  }
                </div>
              }
              slot3={
                <ButtonLnUpdate
                  className={classNames(
                    "__wab_instance",
                    sty.buttonLnUpdate__pNOqP
                  )}
                  link={"/products/peach-tea-collection" as const}
                >
                  {"Shop Now"}
                </ButtonLnUpdate>
              }
            >
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__mlAHq
                )}
                component={Link}
                href={"/products/peach-tea-collection" as const}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__qLkog)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_sips_by_website/images/_16Jpg.jpeg",
                    fullWidth: 1048,
                    fullHeight: 1048,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>
            </EcommBlockModule>

            <div
              data-plasmic-name={"aboutUs"}
              data-plasmic-override={overrides.aboutUs}
              className={classNames(projectcss.all, sty.aboutUs)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__byKyx)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__b5PHb)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__afPTx)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? ("130px" as const)
                        : ("100px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? ("none" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_sips_by_website/images/teaheartmugBlackgif.gif",
                      fullWidth: 568,
                      fullHeight: 2100,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aYc4A
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "desktop")
                      ? "Meet Sips by"
                      : "Meet Sips by"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cEj13
                    )}
                  >
                    {
                      "Weâre proudly female-founded and led, and love bringing smiles to tea drinker faces, and more day-to-day delight into their kettles and kitchens. Based out of Austin, Texas, we are adept at savoring a hot mug even when itâs seasonally inappropriate."
                    }
                  </div>

                  <ButtonLnUpdate
                    className={classNames(
                      "__wab_instance",
                      sty.buttonLnUpdate__rjCuT
                    )}
                  >
                    {"Learn More"}
                  </ButtonLnUpdate>
                </p.Stack>
              </PageRow>
            </div>

            <section
              data-plasmic-name={"testimonials"}
              data-plasmic-override={overrides.testimonials}
              className={classNames(projectcss.all, sty.testimonials)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__t1GYr)}
              >
                {(
                  hasVariant(globalVariants, "screen", "desktop")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.columns__pgmbf)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__xt8FV)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? true
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletPortrait"
                            )
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___7NnHs
                          )}
                        >
                          <Carousel
                            data-plasmic-name={"carousel"}
                            data-plasmic-override={overrides.carousel}
                            className={classNames(
                              "__wab_instance",
                              sty.carousel
                            )}
                            lazyLoad={true}
                            navigation={true}
                            navigationButtonAlpha={0.05 as const}
                            navigationOnTop={false}
                            pagination={true}
                            paginationOnTop={false}
                            random={false}
                            slidesPerView={
                              hasVariant(globalVariants, "screen", "desktop")
                                ? {
                                    default: 1,
                                    smallPhones: 1,
                                    phones: 1,
                                    portraitTablets: 1,
                                    landscapeTablets: 1,
                                    bigDesktops: 1
                                  }
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletLandscape"
                                  )
                                ? {
                                    default: 1,
                                    smallPhones: 1,
                                    phones: 1,
                                    portraitTablets: 1,
                                    landscapeTablets: 1,
                                    bigDesktops: 1
                                  }
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletPortrait"
                                  )
                                ? {
                                    default: 1,
                                    smallPhones: 1,
                                    phones: 1,
                                    portraitTablets: 1,
                                    landscapeTablets: 1,
                                    bigDesktops: 1
                                  }
                                : {
                                    default: 1,
                                    smallPhones: 1,
                                    phones: 1,
                                    portraitTablets: 1,
                                    landscapeTablets: 1,
                                    bigDesktops: 1
                                  }
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__cyJ3E
                              )}
                            >
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__x7NvF
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? "What Sippers Are Saying:"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? "What Sippers Are Saying:"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? "What Sippers Are Saying:"
                                  : "What Sippers Are Saying:"}
                              </h2>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fDbeD
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? '"This whole box was loved! I must admit, I have to fight with my husband over these."'
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? '"This whole box was loved! I must admit, I have to fight with my husband over these."'
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? '"This whole box was loved! I must admit, I have to fight with my husband over these."'
                                  : '"This whole box was loved! I must admit, I have to fight with my husband over these."'}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__aBwD
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? "â  Grace C."
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? "â  Grace C."
                                  : "â  Grace C."}
                              </div>
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___6GLrw
                              )}
                            >
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__ix3Xh
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? "What Sippers Are Saying:"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? "What Sippers Are Saying:"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? "What Sippers Are Saying:"
                                  : "What Sippers Are Saying:"}
                              </h2>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yV6Y
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? '"I wait for my new boxes with child-like anticipation! I love this!"'
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? '"I wait for my new boxes with child-like anticipation! I love this!"'
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? '"I wait for my new boxes with child-like anticipation! I love this!"'
                                  : '"I wait for my new boxes with child-like anticipation! I love this!"'}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___77Ji4
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? "â  Tobi M."
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? "â  Tobi M."
                                  : "â  Tobi M."}
                              </div>
                            </div>

                            {(
                              hasVariant(globalVariants, "screen", "desktop")
                                ? true
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletLandscape"
                                  )
                                ? true
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletPortrait"
                                  )
                                ? true
                                : true
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ct8Nv
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__ey1Mz
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "desktop"
                                  )
                                    ? "What Sippers Are Saying:"
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletLandscape"
                                      )
                                    ? "What Sippers Are Saying:"
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletPortrait"
                                      )
                                    ? "What Sippers Are Saying:"
                                    : "What Sippers Are Saying:"}
                                </h2>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__zjbYh
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "desktop"
                                  )
                                    ? "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletLandscape"
                                      )
                                    ? "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletPortrait"
                                      )
                                    ? "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""
                                    : "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""}
                                </div>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__o2Eco
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "desktop"
                                  )
                                    ? "â Lori D."
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletLandscape"
                                      )
                                    ? "â Lori D."
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletPortrait"
                                      )
                                    ? "â Lori D."
                                    : "â Lori D."}
                                </div>
                              </div>
                            ) : null}
                          </Carousel>
                        </div>
                      ) : null}
                    </div>
                  </div>
                ) : null}
              </PageRow>
            </section>

            <EcommBlockModule
              className={classNames(
                "__wab_instance",
                sty.ecommBlockModule__nPwAf
              )}
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__q8U4Y
                  )}
                >
                  {"Meet Cookie Tea"}
                </div>
              }
              slot2={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0L6J5
                  )}
                >
                  {hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? "Brew up all the flavors of your favorite childhood treats in a delicious mug of tea."
                    : "Brew up all the flavors of your favorite childhood treats in a delicious mug of tea."}
                </div>
              }
              slot3={
                <ButtonLnUpdate
                  className={classNames(
                    "__wab_instance",
                    sty.buttonLnUpdate__r9FNo
                  )}
                  link={"/brands/cookie-tea" as const}
                >
                  {"Shop Now"}
                </ButtonLnUpdate>
              }
              swapBlocksMobile={
                hasVariant(globalVariants, "screen", "tabletPortrait")
                  ? undefined
                  : true
              }
            >
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link___5Wbfy
                )}
                component={Link}
                href={"/brands/cookie-tea" as const}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__jiu7)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_sips_by_website/images/ezgifcomGifMaker151Gif.gif",
                    fullWidth: 1200,
                    fullHeight: 1200,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>
            </EcommBlockModule>

            <Styler
              data-plasmic-name={"styler"}
              data-plasmic-override={overrides.styler}
              className={classNames("__wab_instance", sty.styler)}
              styles={[
                { "--sb-header-bg-color": "rgb(254, 232, 209)" },
                { "--sb-header-border-color": "transparent" },
                { "--sb-header-border-width": "0" }
              ]}
            />
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "landingPageDoubleCta",
    "heroMobileImage",
    "whatYouGetUpdated",
    "h1",
    "landingPageDoubleCta2",
    "metricsUpdated",
    "pressSlider",
    "contentOnHover",
    "buzzfeed2",
    "huffpost2",
    "usatoday2",
    "pressStatic",
    "usatoday3",
    "huffpost3",
    "buzzfeed3",
    "pressQuote",
    "aboutUs",
    "testimonials",
    "carousel",
    "styler"
  ],
  hero: ["hero", "landingPageDoubleCta", "heroMobileImage"],
  landingPageDoubleCta: ["landingPageDoubleCta"],
  heroMobileImage: ["heroMobileImage"],
  whatYouGetUpdated: ["whatYouGetUpdated", "h1", "landingPageDoubleCta2"],
  h1: ["h1"],
  landingPageDoubleCta2: ["landingPageDoubleCta2"],
  metricsUpdated: ["metricsUpdated"],
  pressSlider: [
    "pressSlider",
    "contentOnHover",
    "buzzfeed2",
    "huffpost2",
    "usatoday2"
  ],
  contentOnHover: ["contentOnHover", "buzzfeed2", "huffpost2", "usatoday2"],
  buzzfeed2: ["buzzfeed2"],
  huffpost2: ["huffpost2"],
  usatoday2: ["usatoday2"],
  pressStatic: [
    "pressStatic",
    "usatoday3",
    "huffpost3",
    "buzzfeed3",
    "pressQuote"
  ],
  usatoday3: ["usatoday3"],
  huffpost3: ["huffpost3"],
  buzzfeed3: ["buzzfeed3"],
  pressQuote: ["pressQuote"],
  aboutUs: ["aboutUs"],
  testimonials: ["testimonials", "carousel"],
  carousel: ["carousel"],
  styler: ["styler"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  hero: "section";
  landingPageDoubleCta: "div";
  heroMobileImage: typeof p.PlasmicImg;
  whatYouGetUpdated: "section";
  h1: "h1";
  landingPageDoubleCta2: "div";
  metricsUpdated: "section";
  pressSlider: "section";
  contentOnHover: typeof ContentOnHover;
  buzzfeed2: "div";
  huffpost2: "div";
  usatoday2: "div";
  pressStatic: "section";
  usatoday3: "div";
  huffpost3: "div";
  buzzfeed3: "div";
  pressQuote: typeof PressQuote;
  aboutUs: "div";
  testimonials: "section";
  carousel: typeof Carousel;
  styler: typeof Styler;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLnLandingPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLnLandingPage__VariantsArgs;
    args?: PlasmicLnLandingPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLnLandingPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLnLandingPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLnLandingPage__ArgProps,
          internalVariantPropNames: PlasmicLnLandingPage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLnLandingPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLnLandingPage";
  } else {
    func.displayName = `PlasmicLnLandingPage.${nodeName}`;
  }
  return func;
}

export const PlasmicLnLandingPage = Object.assign(
  // Top-level PlasmicLnLandingPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    landingPageDoubleCta: makeNodeComponent("landingPageDoubleCta"),
    heroMobileImage: makeNodeComponent("heroMobileImage"),
    whatYouGetUpdated: makeNodeComponent("whatYouGetUpdated"),
    h1: makeNodeComponent("h1"),
    landingPageDoubleCta2: makeNodeComponent("landingPageDoubleCta2"),
    metricsUpdated: makeNodeComponent("metricsUpdated"),
    pressSlider: makeNodeComponent("pressSlider"),
    contentOnHover: makeNodeComponent("contentOnHover"),
    buzzfeed2: makeNodeComponent("buzzfeed2"),
    huffpost2: makeNodeComponent("huffpost2"),
    usatoday2: makeNodeComponent("usatoday2"),
    pressStatic: makeNodeComponent("pressStatic"),
    usatoday3: makeNodeComponent("usatoday3"),
    huffpost3: makeNodeComponent("huffpost3"),
    buzzfeed3: makeNodeComponent("buzzfeed3"),
    pressQuote: makeNodeComponent("pressQuote"),
    aboutUs: makeNodeComponent("aboutUs"),
    testimonials: makeNodeComponent("testimonials"),
    carousel: makeNodeComponent("carousel"),
    styler: makeNodeComponent("styler"),

    // Metadata about props expected for PlasmicLnLandingPage
    internalVariantProps: PlasmicLnLandingPage__VariantProps,
    internalArgProps: PlasmicLnLandingPage__ArgProps
  }
);

export default PlasmicLnLandingPage;
/* prettier-ignore-end */
