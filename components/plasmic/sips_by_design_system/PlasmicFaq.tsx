// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mrgn3VC2r6s7VB3wKPe7xp
// Component: myilu9wkwV
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import sty from "./PlasmicFaq.module.css"; // plasmic-import: myilu9wkwV/css

export type PlasmicFaq__VariantMembers = {};

export type PlasmicFaq__VariantsArgs = {};
type VariantPropType = keyof PlasmicFaq__VariantsArgs;
export const PlasmicFaq__VariantProps = new Array<VariantPropType>();

export type PlasmicFaq__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicFaq__ArgsType;
export const PlasmicFaq__ArgProps = new Array<ArgPropType>("children");

export type PlasmicFaq__OverridesType = {
  root?: p.Flex<"div">;
  style?: p.Flex<typeof Embed>;
  freeBox?: p.Flex<"div">;
};

export interface DefaultFaqProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicFaq__RenderFunc(props: {
  variants: PlasmicFaq__VariantsArgs;
  args: PlasmicFaq__ArgsType;
  overrides: PlasmicFaq__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Embed
        data-plasmic-name={"style"}
        data-plasmic-override={overrides.style}
        className={classNames("__wab_instance", sty.style)}
        code={
          '<style>\n.sb-plasmic-faq {\n  --sb-plasmic-faq-icon-size: 1.5em;\n}\n\n.sb-plasmic-faq,\n.sb-plasmic-faq * {\n  white-space: normal;\n}\n\n.sb-plasmic-faq :where(summary) {\n  cursor: pointer;\n  font-size: 16px;\n  position: relative;\n  padding-right: calc(var(--sb-plasmic-faq-icon-size) + 1ch);\n}\n\n@media screen and (min-width: 600px) {\n  .sb-plasmic-faq :where(summary) {\n    font-size: 18px;\n  }\n}\n\n@media screen and (min-width: 800px) {\n  .sb-plasmic-faq :where(summary) {\n    font-size: 24px;\n  }\n}\n\n.sb-plasmic-faq :where(summary)::marker {\n  content: none;\n}\n\n.sb-plasmic-faq :where(summary)::after {\n  background-image: url(\'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24"><path d="M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"></path></svg>\');\n  background-size: contain;\n  content: "";\n  height: var(--sb-plasmic-faq-icon-size);\n  opacity: 0.85;\n  position: absolute;\n  right: 0;\n  top: 0;\n  transition: transform 0.3s ease-out;\n  width: var(--sb-plasmic-faq-icon-size);\n}\n\n.sb-plasmic-faq :where(details[open] summary)::after {\n  transform: rotate(180deg);\n}\n\n.sb-plasmic-faq :where(summary) :where(h2, h3, h4, h5, h6) {\n  display: inline;\n  line-height: 1.3;\n  font-size: inherit;\n  font-weight: 600;\n  margin: 0;\n}\n\n.sb-plasmic-faq :where(summary + div) {\n  display: grid;\n  font-size: 14px;\n  line-height: 1.5;\n  grid-row-gap: 16px;\n  margin-top: 16px;\n}\n\n@media screen and (min-width: 600px) {\n  .sb-plasmic-faq :where(summary + div) {\n    font-size: 16px;\n  }\n}\n\n.sb-plasmic-faq :where(summary + div) > * {\n  margin: 0;\n}\n\n.sb-plasmic-faq :where(a) {\n  color: inherit;\n  text-decoration-line: underline;\n}\n</style>' as const
        }
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(
          projectcss.all,
          sty.freeBox,
          "sb-plasmic-faq" as const
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.children
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "style", "freeBox"],
  style: ["style"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  style: typeof Embed;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFaq__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFaq__VariantsArgs;
    args?: PlasmicFaq__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFaq__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFaq__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFaq__ArgProps,
          internalVariantPropNames: PlasmicFaq__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFaq__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaq";
  } else {
    func.displayName = `PlasmicFaq.${nodeName}`;
  }
  return func;
}

export const PlasmicFaq = Object.assign(
  // Top-level PlasmicFaq renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    style: makeNodeComponent("style"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicFaq
    internalVariantProps: PlasmicFaq__VariantProps,
    internalArgProps: PlasmicFaq__ArgProps
  }
);

export default PlasmicFaq;
/* prettier-ignore-end */
