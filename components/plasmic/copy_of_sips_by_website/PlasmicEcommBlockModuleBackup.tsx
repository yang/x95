// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: oUKDmdXeBkMoWB
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageRow from "../../PageRow"; // plasmic-import: AKAM4dN1Fw/component
import ButtonLnUpdate from "../../ButtonLnUpdate"; // plasmic-import: W3xFx930gMYiRb/component

import { useScreenVariants as useScreenVariants_6PiZsruRybCC } from "../sips_by_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: 6piZsruRybC-C/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicEcommBlockModuleBackup.module.css"; // plasmic-import: oUKDmdXeBkMoWB/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: MpX9BP8blGMfpD/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 4feDHP-bpH6OM4/icon

export type PlasmicEcommBlockModuleBackup__VariantMembers = {
  swapBlocksLargerScreens: "swapBlocksLargerScreens";
  swapBlocksMobile: "swapBlocksMobile";
};

export type PlasmicEcommBlockModuleBackup__VariantsArgs = {
  swapBlocksLargerScreens?: SingleBooleanChoiceArg<"swapBlocksLargerScreens">;
  swapBlocksMobile?: SingleBooleanChoiceArg<"swapBlocksMobile">;
};

type VariantPropType = keyof PlasmicEcommBlockModuleBackup__VariantsArgs;
export const PlasmicEcommBlockModuleBackup__VariantProps =
  new Array<VariantPropType>("swapBlocksLargerScreens", "swapBlocksMobile");

export type PlasmicEcommBlockModuleBackup__ArgsType = {
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicEcommBlockModuleBackup__ArgsType;
export const PlasmicEcommBlockModuleBackup__ArgProps = new Array<ArgPropType>(
  "slot",
  "slot2",
  "slot3",
  "children"
);

export type PlasmicEcommBlockModuleBackup__OverridesType = {
  root?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  pageRow?: p.Flex<typeof PageRow>;
};

export interface DefaultEcommBlockModuleBackupProps {
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  children?: React.ReactNode;
  swapBlocksLargerScreens?: SingleBooleanChoiceArg<"swapBlocksLargerScreens">;
  swapBlocksMobile?: SingleBooleanChoiceArg<"swapBlocksMobile">;
  className?: string;
}

function PlasmicEcommBlockModuleBackup__RenderFunc(props: {
  variants: PlasmicEcommBlockModuleBackup__VariantsArgs;
  args: PlasmicEcommBlockModuleBackup__ArgsType;
  overrides: PlasmicEcommBlockModuleBackup__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6PiZsruRybCC()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_sips_by_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        hasGap={true}
        className={classNames(projectcss.all, sty.columns, {
          [sty.columnsswapBlocksLargerScreens]: hasVariant(
            variants,
            "swapBlocksLargerScreens",
            "swapBlocksLargerScreens"
          ),
          [sty.columnsswapBlocksMobile]: hasVariant(
            variants,
            "swapBlocksMobile",
            "swapBlocksMobile"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.column__zdIsy, {
            [sty.columnswapBlocksLargerScreens__zdIsyL3Ia]: hasVariant(
              variants,
              "swapBlocksLargerScreens",
              "swapBlocksLargerScreens"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__cdrWc
                )}
                component={Link}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___4AoCo)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_sips_by_website/images/image4.png",
                    fullWidth: 4384,
                    fullHeight: 4384,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>
            ),

            value: args.children
          })}
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.column___6CrzG)}
        >
          <PageRow
            data-plasmic-name={"pageRow"}
            data-plasmic-override={overrides.pageRow}
            className={classNames("__wab_instance", sty.pageRow)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__um1N)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___0LiEz)}>
                {p.renderPlasmicSlot({
                  defaultContents: "Wellness Tea",
                  value: args.slot,
                  className: classNames(sty.slotTargetSlot)
                })}
              </div>

              {p.renderPlasmicSlot({
                defaultContents:
                  "From a mood-boost to allergy relief, find some extra relief in your cuppa!",
                value: args.slot2,
                className: classNames(sty.slotTargetSlot2)
              })}

              {p.renderPlasmicSlot({
                defaultContents: (
                  <ButtonLnUpdate
                    className={classNames(
                      "__wab_instance",
                      sty.buttonLnUpdate__cCmTh
                    )}
                    link={"" as const}
                  >
                    {"Button"}
                  </ButtonLnUpdate>
                ),

                value: args.slot3
              })}
            </p.Stack>
          </PageRow>
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "pageRow"],
  columns: ["columns", "pageRow"],
  pageRow: ["pageRow"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  pageRow: typeof PageRow;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEcommBlockModuleBackup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEcommBlockModuleBackup__VariantsArgs;
    args?: PlasmicEcommBlockModuleBackup__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEcommBlockModuleBackup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEcommBlockModuleBackup__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicEcommBlockModuleBackup__ArgProps,
          internalVariantPropNames: PlasmicEcommBlockModuleBackup__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicEcommBlockModuleBackup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEcommBlockModuleBackup";
  } else {
    func.displayName = `PlasmicEcommBlockModuleBackup.${nodeName}`;
  }
  return func;
}

export const PlasmicEcommBlockModuleBackup = Object.assign(
  // Top-level PlasmicEcommBlockModuleBackup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    pageRow: makeNodeComponent("pageRow"),

    // Metadata about props expected for PlasmicEcommBlockModuleBackup
    internalVariantProps: PlasmicEcommBlockModuleBackup__VariantProps,
    internalArgProps: PlasmicEcommBlockModuleBackup__ArgProps
  }
);

export default PlasmicEcommBlockModuleBackup;
/* prettier-ignore-end */
