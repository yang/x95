// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: L2qTBSWgLznnN5
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeroSplitImage from "../../HeroSplitImage"; // plasmic-import: hmGb0i4cuixo2/component
import ButtonLnUpdate from "../../ButtonLnUpdate"; // plasmic-import: W3xFx930gMYiRb/component
import PageRow from "../../PageRow"; // plasmic-import: AKAM4dN1Fw/component
import EcommBlockModule from "../../EcommBlockModule"; // plasmic-import: SVsSN17uZItN3m/component
import SectionMetricsMetric from "../../SectionMetricsMetric"; // plasmic-import: sW6svfkibZkesa/component
import { Accordian } from "../../../../components/accordian"; // plasmic-import: cCgo9xBVwdcOdS/codeComponent

import { useScreenVariants as useScreenVariants_6PiZsruRybCC } from "../sips_by_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: 6piZsruRybC-C/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicHomeNext.module.css"; // plasmic-import: L2qTBSWgLznnN5/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: MpX9BP8blGMfpD/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 4feDHP-bpH6OM4/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Id8KGjLkdQoXxj/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: OpQFaS-uHAf6sL/icon

export type PlasmicHomeNext__VariantMembers = {};

export type PlasmicHomeNext__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomeNext__VariantsArgs;
export const PlasmicHomeNext__VariantProps = new Array<VariantPropType>();

export type PlasmicHomeNext__ArgsType = {};
type ArgPropType = keyof PlasmicHomeNext__ArgsType;
export const PlasmicHomeNext__ArgProps = new Array<ArgPropType>();

export type PlasmicHomeNext__OverridesType = {
  root?: p.Flex<"div">;
  landingPageDoubleCta4?: p.Flex<"div">;
  whatYouGetUpdated?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  landingPageDoubleCta2?: p.Flex<"div">;
  aboutUs?: p.Flex<"div">;
  metricsUpdated2?: p.Flex<"section">;
  testimonialsStatic?: p.Flex<"section">;
  landingPageDoubleCta5?: p.Flex<"div">;
  seoContentBlock?: p.Flex<"div">;
  landingPageDoubleCta6?: p.Flex<"div">;
  accordian?: p.Flex<typeof Accordian>;
};

export interface DefaultHomeNextProps {}

function PlasmicHomeNext__RenderFunc(props: {
  variants: PlasmicHomeNext__VariantsArgs;
  args: PlasmicHomeNext__ArgsType;
  overrides: PlasmicHomeNext__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6PiZsruRybCC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_sips_by_design_system_css.plasmic_tokens,
              sty.root
            )}
          >
            <HeroSplitImage
              className={classNames(
                "__wab_instance",
                sty.heroSplitImage___2SoXb
              )}
              verticalImageHeight={"_42" as const}
              verticalImageOffset={"_60" as const}
            >
              <div className={classNames(projectcss.all, sty.freeBox__tDoTs)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2___3GvkC
                  )}
                >
                  {"Your Better Path to Tea Starts Here"}
                </h2>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qngKn
                  )}
                >
                  {hasVariant(globalVariants, "screen", "tabletPortrait") ? (
                    <React.Fragment>
                      <React.Fragment>{"Join the only "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontStyle: "italic" }}
                      >
                        {"truly"}
                      </span>
                      <React.Fragment>
                        {
                          " personalized tea club\nto discover your new favorites, or shop now to explore thousands of premium top-rated teas and hundreds of the best tea brands."
                        }
                      </React.Fragment>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <React.Fragment>{"Join the only "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontStyle: "italic" }}
                      >
                        {"truly"}
                      </span>
                      <React.Fragment>
                        {
                          " personalized tea club\nto discover your new favorites or shop now to explore thousands of premium top-rated teas, \nand hundreds of the world's best tea brands."
                        }
                      </React.Fragment>
                    </React.Fragment>
                  )}
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"landingPageDoubleCta4"}
                  data-plasmic-override={overrides.landingPageDoubleCta4}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.landingPageDoubleCta4
                  )}
                >
                  {(
                    hasVariant(globalVariants, "screen", "tabletPortrait")
                      ? true
                      : true
                  ) ? (
                    <ButtonLnUpdate
                      buttonColor={"darkPink" as const}
                      className={classNames(
                        "__wab_instance",
                        sty.buttonLnUpdate__dAmz1
                      )}
                      link={"/account/register" as const}
                    >
                      {"Join The #1 Rated Tea Club"}
                    </ButtonLnUpdate>
                  ) : null}

                  {(
                    hasVariant(globalVariants, "screen", "tabletPortrait")
                      ? true
                      : true
                  ) ? (
                    <ButtonLnUpdate
                      buttonColor={"darkPink" as const}
                      className={classNames(
                        "__wab_instance",
                        sty.buttonLnUpdate___4Ox6F
                      )}
                      link={
                        hasVariant(globalVariants, "screen", "tabletPortrait")
                          ? ("/collections/tea" as const)
                          : ("/collections/iced-tea-favorites" as const)
                      }
                    >
                      {"Shop Most Popular Iced Tea Now"}
                    </ButtonLnUpdate>
                  ) : null}

                  {(
                    hasVariant(globalVariants, "screen", "tabletPortrait")
                      ? true
                      : true
                  ) ? (
                    <ButtonLnUpdate
                      buttonColor={"darkPink" as const}
                      className={classNames(
                        "__wab_instance",
                        sty.buttonLnUpdate___9TIgf
                      )}
                      link={"/account/register" as const}
                    >
                      {"Join The Club"}
                    </ButtonLnUpdate>
                  ) : null}

                  {(
                    hasVariant(globalVariants, "screen", "tabletPortrait")
                      ? true
                      : true
                  ) ? (
                    <ButtonLnUpdate
                      buttonColor={"darkPink" as const}
                      className={classNames(
                        "__wab_instance",
                        sty.buttonLnUpdate__rHdHc
                      )}
                      link={"/collections/shop" as const}
                    >
                      {"Shop Tea Now"}
                    </ButtonLnUpdate>
                  ) : null}
                </p.Stack>

                {(
                  hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__iiJjS
                    )}
                    component={Link}
                    href={"https://www.plasmic.app/" as const}
                    platform={"nextjs"}
                  >
                    {"Shop All Tea Now"}
                  </p.PlasmicLink>
                ) : null}
              </div>
            </HeroSplitImage>

            <section
              data-plasmic-name={"whatYouGetUpdated"}
              data-plasmic-override={overrides.whatYouGetUpdated}
              className={classNames(projectcss.all, sty.whatYouGetUpdated)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__ygBXx)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? "Join the #1 rated tea club"
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? "Gift The #1 rated tea club"
                    : "Join the #1 rated tea club"}
                </h1>

                <div className={classNames(projectcss.all, sty.freeBox__myvkB)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__fFlnA)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__knUxm)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__dDl3M)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        loading={"lazy" as const}
                        src={
                          "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-bag.svg?v=1636499860" as const
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6GUfk
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "desktop")
                          ? "Four new teas personally curated every month"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? "Four new teas personally curated every month"
                          : "Four new premium teas each month, chosen for you"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__oi1E)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__viS)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        loading={"lazy" as const}
                        src={
                          "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-pot.svg?v=1636499860" as const
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__y5Oh
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "desktop")
                          ? "Access to exclusive tea brands only on Sips by"
                          : "Access to the world's best tea brands, big and small"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  {(
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? true
                      : hasVariant(globalVariants, "screen", "tabletPortrait")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2J5Im
                      )}
                    >
                      <p.PlasmicImg
                        alt={"Sips by Box filled with tea samples" as const}
                        className={classNames(sty.img__rvcia)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("362px" as const)
                            : hasVariant(
                                globalVariants,
                                "screen",
                                "tabletLandscape"
                              )
                            ? ("238px" as const)
                            : ("auto" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("545px" as const)
                            : hasVariant(
                                globalVariants,
                                "screen",
                                "tabletLandscape"
                              )
                            ? ("273px" as const)
                            : ("304px" as const)
                        }
                        loading={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("lazy" as const)
                            : ("lazy" as const)
                        }
                        src={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                            : ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                        }
                      />
                    </div>
                  ) : null}

                  {(
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? true
                      : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0Erq6
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dWOo
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__iQwM)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? ("100px" as const)
                              : ("55px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? ("100px" as const)
                              : ("55px" as const)
                          }
                          loading={"lazy" as const}
                          src={
                            "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-teacup.svg?v=1636499860" as const
                          }
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tSo7M
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? "Reusable tea filters for loose teas + brewing tips"
                            : "Biodegradable tea filters, and expert brewing tips"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mx037
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__enUtQ)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? ("100px" as const)
                              : ("55px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? ("100px" as const)
                              : ("55px" as const)
                          }
                          loading={"lazy" as const}
                          src={
                            "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-leaves.svg?v=1636499860" as const
                          }
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__khPro
                          )}
                        >
                          {"Steep Society Member’s Only Perks and Tea Parties"}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  ) : null}

                  {(
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ptzYv)}
                    >
                      <p.PlasmicImg
                        alt={"Sips by Box filled with tea samples" as const}
                        className={classNames(sty.img__eXkkY)}
                        displayHeight={"188px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("214px" as const)
                            : ("214px" as const)
                        }
                        loading={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("lazy" as const)
                            : ("lazy" as const)
                        }
                        src={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                            : ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                        }
                      />
                    </div>
                  ) : null}
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"landingPageDoubleCta2"}
                  data-plasmic-override={overrides.landingPageDoubleCta2}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.landingPageDoubleCta2
                  )}
                >
                  <ButtonLnUpdate
                    className={classNames(
                      "__wab_instance",
                      sty.buttonLnUpdate__deDvc
                    )}
                    link={
                      "/account/register?ckey=default-register-join-now" as const
                    }
                  >
                    {"Join Now"}
                  </ButtonLnUpdate>

                  <ButtonLnUpdate
                    className={classNames(
                      "__wab_instance",
                      sty.buttonLnUpdate__y8AdX
                    )}
                    link={"https://m.sipsby.com/p/gift" as const}
                  >
                    {"Give a Gift"}
                  </ButtonLnUpdate>
                </p.Stack>
              </PageRow>
            </section>

            <EcommBlockModule
              className={classNames(
                "__wab_instance",
                sty.ecommBlockModule___9Irr
              )}
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c1Ssw
                  )}
                >
                  {"Shop Summer Favorites"}
                </div>
              }
              slot2={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__t3Hn6
                  )}
                >
                  {
                    "It's not too late to shop the most popular iced tea and teaware this summer. Shop now to enjoy the rest of these long summer days."
                  }
                </div>
              }
              slot3={
                <ButtonLnUpdate
                  className={classNames(
                    "__wab_instance",
                    sty.buttonLnUpdate__a6ErE
                  )}
                  link={"/collections/summer-tea-shop" as const}
                >
                  {"Shop Now"}
                </ButtonLnUpdate>
              }
            >
              <p.PlasmicLink
                aria-label={"Upgrade Your Teaware" as const}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__oytwd
                )}
                component={Link}
                href={"/collections/summer-tea-shop" as const}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={" A woman pouring tea from a teapot into a mug" as const}
                  className={classNames(sty.img___8WiPl)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_sips_by_website/images/icedTeasSqjpg.jpeg",
                    fullWidth: 1200,
                    fullHeight: 1200,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>
            </EcommBlockModule>

            <EcommBlockModule
              className={classNames(
                "__wab_instance",
                sty.ecommBlockModule__a7Aa
              )}
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xhBjt
                  )}
                >
                  {"Upgrade Your Teaware"}
                </div>
              }
              slot2={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__w9I8V
                  )}
                >
                  {
                    "Upgrade your tea ritual with these popular teapots, mugs and infusers."
                  }
                </div>
              }
              slot3={
                <ButtonLnUpdate
                  className={classNames(
                    "__wab_instance",
                    sty.buttonLnUpdate__owme
                  )}
                  link={"/collections/tea-accessories-all" as const}
                >
                  <div
                    aria-label={"Shop cookie tea" as const}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__a6AeU
                    )}
                  >
                    {"Shop Now"}
                  </div>
                </ButtonLnUpdate>
              }
              swapBlocks={true}
              swapBlocksMobile={
                hasVariant(globalVariants, "screen", "tabletLandscape")
                  ? undefined
                  : hasVariant(globalVariants, "screen", "tabletPortrait")
                  ? undefined
                  : undefined
              }
            >
              <p.PlasmicLink
                aria-label={"Shop cookie tea" as const}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__xeosH
                )}
                component={Link}
                href={"/collections/tea-accessories-all" as const}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={
                    "Foldable paper box in the shape of a mini oven" as const
                  }
                  className={classNames(sty.img__ghLx5)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_sips_by_website/images/_27Png.png",
                    fullWidth: 1080,
                    fullHeight: 1080,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>
            </EcommBlockModule>

            <div
              data-plasmic-name={"aboutUs"}
              data-plasmic-override={overrides.aboutUs}
              className={classNames(projectcss.all, sty.aboutUs)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__b13Fb)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wznNo)}
                >
                  <p.PlasmicImg
                    alt={"Cartoon mug of tea decorated with a heart" as const}
                    className={classNames(sty.img__z3NfZ)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? ("130px" as const)
                        : ("100px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_sips_by_website/images/teaheartmugBlackgif.gif",
                      fullWidth: 568,
                      fullHeight: 2100,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w2HMw
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "desktop")
                      ? "Meet Sips by"
                      : "Meet Sips by"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6Ch1C
                    )}
                  >
                    {
                      "Proudly female-founded and led, we love bringing more day-to-day joy into Member kettles and kitchens with the world's best way to shop for tea online across thousands of teas and hundreds of tea brands with the only (truly) personalized tea discovery club."
                    }
                  </div>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__s7E55
                    )}
                    component={Link}
                    href={"/products/personalized-tea-discovery-box" as const}
                    platform={"nextjs"}
                  >
                    {"Let's be Tea-ffs"}
                  </p.PlasmicLink>
                </p.Stack>
              </PageRow>
            </div>

            <section
              data-plasmic-name={"metricsUpdated2"}
              data-plasmic-override={overrides.metricsUpdated2}
              className={classNames(projectcss.all, sty.metricsUpdated2)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__fnl76)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns___999Rv)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__axmVa)}
                  >
                    <SectionMetricsMetric
                      className={classNames(
                        "__wab_instance",
                        sty.sectionMetricsMetric__rpcee
                      )}
                      slot={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6D4Vt
                          )}
                        >
                          {"happy members"}
                        </div>
                      }
                    >
                      {(
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dqVwd
                          )}
                        >
                          {"1,000,000+"}
                        </div>
                      ) : null}

                      {(
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xkj5J
                          )}
                        >
                          {"1m"}
                        </div>
                      ) : null}
                    </SectionMetricsMetric>
                  </div>

                  <div className={classNames(projectcss.all, sty.column__iDVx)}>
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__wAHo)}
                      role={"img"}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__cgj8F)}
                  >
                    <SectionMetricsMetric
                      className={classNames(
                        "__wab_instance",
                        sty.sectionMetricsMetric__rcbvf
                      )}
                      slot={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pp5Ed
                            )}
                          >
                            {"premium teas"}
                          </div>

                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link___3Pfaw
                            )}
                            component={Link}
                            href={"/collections/top-rated-teas" as const}
                            platform={"nextjs"}
                          >
                            {"Browse Top-Rated Teas"}
                          </p.PlasmicLink>
                        </React.Fragment>
                      }
                    >
                      {(
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ykL8
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "desktop")
                            ? "1k"
                            : "1,000+"}
                        </div>
                      ) : null}

                      {(
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aNrRz
                          )}
                        >
                          {"1k"}
                        </div>
                      ) : null}
                    </SectionMetricsMetric>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column___4CW0F)}
                  >
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__uCgHe)}
                      role={"img"}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__aeNnk)}
                  >
                    <SectionMetricsMetric
                      className={classNames(
                        "__wab_instance",
                        sty.sectionMetricsMetric__iD7LF
                      )}
                      slot={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cWnF
                            )}
                          >
                            {"best tea brands"}
                          </div>

                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__xmmu2
                            )}
                            component={Link}
                            href={"/collections/tea" as const}
                            platform={"nextjs"}
                          >
                            {"Shop Now"}
                          </p.PlasmicLink>
                        </React.Fragment>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__olCoN
                        )}
                      >
                        {"100+"}
                      </div>
                    </SectionMetricsMetric>
                  </div>
                </p.Stack>
              </PageRow>
            </section>

            <section
              data-plasmic-name={"testimonialsStatic"}
              data-plasmic-override={overrides.testimonialsStatic}
              className={classNames(projectcss.all, sty.testimonialsStatic)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow___3QP71)}
              >
                {(
                  hasVariant(globalVariants, "screen", "desktop")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.columns___5B8Ef)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__eq7M3)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? true
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletPortrait"
                            )
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__roBRu
                          )}
                        >
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2__jnn7Z
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "desktop")
                              ? "What Sippers Are Saying:"
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletLandscape"
                                )
                              ? "What Sippers Are Saying:"
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletPortrait"
                                )
                              ? "What Sippers Are Saying:"
                              : "What Sippers Are Saying:"}
                          </h2>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kaC7
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "desktop")
                              ? "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletLandscape"
                                )
                              ? "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""
                              : "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__e09UZ
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "desktop")
                              ? "— Lori D."
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletLandscape"
                                )
                              ? "— Lori D."
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletPortrait"
                                )
                              ? "— Lori D."
                              : "— Lori D."}
                          </div>
                        </div>
                      ) : null}
                    </div>
                  </div>
                ) : null}
              </PageRow>
            </section>

            <HeroSplitImage
              className={classNames(
                "__wab_instance",
                sty.heroSplitImage__zeeXz
              )}
              image={{
                src: "/plasmic/copy_of_sips_by_website/images/untitledDesign10Png.png",
                fullWidth: 1728,
                fullHeight: 2304,
                aspectRatio: undefined
              }}
              verticalImageHeight={"_50" as const}
              verticalImageOffset={"_30" as const}
            >
              <div className={classNames(projectcss.all, sty.freeBox__rTj36)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2___2V89H
                  )}
                >
                  {"The Perfect Gift For Tea Lovers"}
                </h2>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fssoq
                  )}
                >
                  {
                    "Looking for the best gift for the tea lover\nin your life? You're in the right place."
                  }
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"landingPageDoubleCta5"}
                  data-plasmic-override={overrides.landingPageDoubleCta5}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.landingPageDoubleCta5
                  )}
                >
                  {(
                    hasVariant(globalVariants, "screen", "desktop")
                      ? true
                      : true
                  ) ? (
                    <ButtonLnUpdate
                      buttonColor={"darkPink" as const}
                      className={classNames(
                        "__wab_instance",
                        sty.buttonLnUpdate__az9X5
                      )}
                      link={"/account/register" as const}
                    >
                      {"Shop Digital Gift Cards"}
                    </ButtonLnUpdate>
                  ) : null}

                  {(
                    hasVariant(globalVariants, "screen", "desktop")
                      ? true
                      : true
                  ) ? (
                    <ButtonLnUpdate
                      buttonColor={"darkPink" as const}
                      className={classNames(
                        "__wab_instance",
                        sty.buttonLnUpdate__oLPq
                      )}
                      link={
                        "https://www.sipsby.com/collections/iced-tea-favorites/" as const
                      }
                    >
                      {"Shop Physical Gift Cards"}
                    </ButtonLnUpdate>
                  ) : null}

                  {(
                    hasVariant(globalVariants, "screen", "desktop")
                      ? true
                      : true
                  ) ? (
                    <ButtonLnUpdate
                      buttonColor={"darkPink" as const}
                      className={classNames(
                        "__wab_instance",
                        sty.buttonLnUpdate___3DaG
                      )}
                      link={"https://m.sipsby.com/p/gift" as const}
                    >
                      {"Gift Now"}
                    </ButtonLnUpdate>
                  ) : null}
                </p.Stack>
              </div>
            </HeroSplitImage>

            {true ? (
              <div
                data-plasmic-name={"seoContentBlock"}
                data-plasmic-override={overrides.seoContentBlock}
                className={classNames(projectcss.all, sty.seoContentBlock)}
              >
                <PageRow
                  className={classNames("__wab_instance", sty.pageRow__fzUyy)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns__ircN)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "tabletLandscape")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.column___43D4Z
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__tB7NG
                          )}
                        >
                          {
                            "Sips by is the best tea subscription, a monthly tea box for your taste"
                          }
                        </h2>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"landingPageDoubleCta6"}
                          data-plasmic-override={
                            overrides.landingPageDoubleCta6
                          }
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.landingPageDoubleCta6
                          )}
                        >
                          <ButtonLnUpdate
                            className={classNames(
                              "__wab_instance",
                              sty.buttonLnUpdate__f2Tep
                            )}
                            link={
                              "https://www.sipsby.com/products/personalized-tea-discovery-box" as const
                            }
                          >
                            {"Get Started"}
                          </ButtonLnUpdate>

                          <ButtonLnUpdate
                            className={classNames(
                              "__wab_instance",
                              sty.buttonLnUpdate__d68Vo
                            )}
                            link={"https://m.sipsby.com/p/gift" as const}
                          >
                            {"Give a Gift"}
                          </ButtonLnUpdate>
                        </p.Stack>
                      </p.Stack>
                    ) : null}

                    {(
                      hasVariant(globalVariants, "screen", "tabletLandscape")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__q4SkF
                        )}
                      >
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__vMeuY
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tpZJz
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "tabletLandscape"
                              )
                                ? "Join our tea of the month club and you’ll also join our thriving community of tea lovers. Your tea membership will help you find your new favorite sips, access exclusive tea brand offers, and discover ways to enhance your personal tea practice."
                                : "Join our tea of the month club and you’ll also join our thriving community of tea lovers. Your tea membership will help you find your new favorite sips, access exclusive tea brand offers, and discover ways to enhance your personal tea practice. "}
                            </div>

                            <Accordian
                              data-plasmic-name={"accordian"}
                              data-plasmic-override={overrides.accordian}
                              arrow={null}
                              arrowRotationOnOpen={90 as const}
                              arrowSide={"right" as const}
                              className={classNames(
                                "__wab_instance",
                                sty.accordian
                              )}
                              content={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__gnvJr
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>
                                      {
                                        "Our brand partners range from large international brands to local tea shops and farms. As tea lovers ourselves, we know that navigating the world of tea can be daunting - we want to help guide your exploration with our tea of the month club. Choose loose leaf or bagged tea, caffeinated or herbal, or have a mix of each, all unique to your preferences.  \n\nLooking for a thoughtful and personalized gift for tea lovers? Our "
                                      }
                                    </React.Fragment>
                                    {
                                      <p.PlasmicLink
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          projectcss.plasmic_default__inline,
                                          sty.link__rTUpD
                                        )}
                                        component={Link}
                                        href={"/products/subscription" as const}
                                        platform={"nextjs"}
                                      >
                                        {"monthly tea subscriptions"}
                                      </p.PlasmicLink>
                                    }
                                    <React.Fragment>
                                      {" will make them smile. Purchase a "}
                                    </React.Fragment>
                                    {
                                      <p.PlasmicLink
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          projectcss.plasmic_default__inline,
                                          sty.link__gWuVg
                                        )}
                                        component={Link}
                                        href={
                                          "/products/gift-the-joy-of-tea-discovery" as const
                                        }
                                        platform={"nextjs"}
                                      >
                                        {"Sips by gift card"}
                                      </p.PlasmicLink>
                                    }
                                    <React.Fragment>
                                      {
                                        " or one of our seasonal themed tea boxes.\n\nNot ready to subscribe? Get started with a "
                                      }
                                    </React.Fragment>
                                    {
                                      <p.PlasmicLink
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          projectcss.plasmic_default__inline,
                                          sty.link__kxt58
                                        )}
                                        component={Link}
                                        href={"/account/register" as const}
                                        platform={"nextjs"}
                                      >
                                        {"free Sips by profile"}
                                      </p.PlasmicLink>
                                    }
                                    <React.Fragment>
                                      {
                                        " to access special brand offers, win free tea, refer friends for rewards, join our tea club of 750,000+ tea lovers on our "
                                      }
                                    </React.Fragment>
                                    {
                                      <p.PlasmicLink
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          projectcss.plasmic_default__inline,
                                          sty.link__gmcU4
                                        )}
                                        component={Link}
                                        href={"/pages/blog" as const}
                                        platform={"nextjs"}
                                      >
                                        {"blog"}
                                      </p.PlasmicLink>
                                    }
                                    <React.Fragment>
                                      {
                                        ", learn more about the best tea subscription box, and shop thousands of teas from hundreds of brands big and small. If you're looking for the best tea around the world, you're in the right place!"
                                      }
                                    </React.Fragment>
                                  </React.Fragment>
                                </div>
                              }
                              defaultOpen={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletLandscape"
                                )
                                  ? false
                                  : false
                              }
                              title={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__zByJ7
                                  )}
                                >
                                  {"Read More"}
                                </div>
                              }
                              titleSide={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletLandscape"
                                )
                                  ? ("center" as const)
                                  : ("center" as const)
                              }
                            />
                          </div>
                        ) : null}

                        <Icon17Icon
                          className={classNames(projectcss.all, sty.svg__mvGs)}
                          role={"img"}
                        />
                      </div>
                    ) : null}
                  </p.Stack>
                </PageRow>
              </div>
            ) : null}
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "landingPageDoubleCta4",
    "whatYouGetUpdated",
    "h1",
    "landingPageDoubleCta2",
    "aboutUs",
    "metricsUpdated2",
    "testimonialsStatic",
    "landingPageDoubleCta5",
    "seoContentBlock",
    "landingPageDoubleCta6",
    "accordian"
  ],
  landingPageDoubleCta4: ["landingPageDoubleCta4"],
  whatYouGetUpdated: ["whatYouGetUpdated", "h1", "landingPageDoubleCta2"],
  h1: ["h1"],
  landingPageDoubleCta2: ["landingPageDoubleCta2"],
  aboutUs: ["aboutUs"],
  metricsUpdated2: ["metricsUpdated2"],
  testimonialsStatic: ["testimonialsStatic"],
  landingPageDoubleCta5: ["landingPageDoubleCta5"],
  seoContentBlock: ["seoContentBlock", "landingPageDoubleCta6", "accordian"],
  landingPageDoubleCta6: ["landingPageDoubleCta6"],
  accordian: ["accordian"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  landingPageDoubleCta4: "div";
  whatYouGetUpdated: "section";
  h1: "h1";
  landingPageDoubleCta2: "div";
  aboutUs: "div";
  metricsUpdated2: "section";
  testimonialsStatic: "section";
  landingPageDoubleCta5: "div";
  seoContentBlock: "div";
  landingPageDoubleCta6: "div";
  accordian: typeof Accordian;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomeNext__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomeNext__VariantsArgs;
    args?: PlasmicHomeNext__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomeNext__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomeNext__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomeNext__ArgProps,
          internalVariantPropNames: PlasmicHomeNext__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomeNext__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomeNext";
  } else {
    func.displayName = `PlasmicHomeNext.${nodeName}`;
  }
  return func;
}

export const PlasmicHomeNext = Object.assign(
  // Top-level PlasmicHomeNext renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    landingPageDoubleCta4: makeNodeComponent("landingPageDoubleCta4"),
    whatYouGetUpdated: makeNodeComponent("whatYouGetUpdated"),
    h1: makeNodeComponent("h1"),
    landingPageDoubleCta2: makeNodeComponent("landingPageDoubleCta2"),
    aboutUs: makeNodeComponent("aboutUs"),
    metricsUpdated2: makeNodeComponent("metricsUpdated2"),
    testimonialsStatic: makeNodeComponent("testimonialsStatic"),
    landingPageDoubleCta5: makeNodeComponent("landingPageDoubleCta5"),
    seoContentBlock: makeNodeComponent("seoContentBlock"),
    landingPageDoubleCta6: makeNodeComponent("landingPageDoubleCta6"),
    accordian: makeNodeComponent("accordian"),

    // Metadata about props expected for PlasmicHomeNext
    internalVariantProps: PlasmicHomeNext__VariantProps,
    internalArgProps: PlasmicHomeNext__ArgProps
  }
);

export default PlasmicHomeNext;
/* prettier-ignore-end */
