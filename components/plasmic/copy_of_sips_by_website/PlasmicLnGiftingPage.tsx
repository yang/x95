// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: jVb7-ra1b1CBAd
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageRow from "../../PageRow"; // plasmic-import: AKAM4dN1Fw/component
import ButtonLnUpdate from "../../ButtonLnUpdate"; // plasmic-import: W3xFx930gMYiRb/component
import GiftOptionBlock from "../../GiftOptionBlock"; // plasmic-import: M3buD_ZFfjTQVx/component
import WhatYouGetImageColumns from "../../WhatYouGetImageColumns"; // plasmic-import: YsJjrubhubtDkG/component
import SectionMetricsMetric from "../../SectionMetricsMetric"; // plasmic-import: sW6svfkibZkesa/component
import { Carousel } from "../../../../components/carousel"; // plasmic-import: VJ9-SKBWJjSYFK/codeComponent
import { ContentOnHover } from "../../../../components/contentonhover"; // plasmic-import: Q7v4G60Gqx2JfX/codeComponent
import { Styler } from "../../../../components/styler"; // plasmic-import: A1XXeY8abna3Rm/codeComponent

import { useScreenVariants as useScreenVariants_6PiZsruRybCC } from "../sips_by_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: 6piZsruRybC-C/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicLnGiftingPage.module.css"; // plasmic-import: jVb7-ra1b1CBAd/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: MpX9BP8blGMfpD/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 4feDHP-bpH6OM4/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: 3GVusUnw5zu4d-/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: xfDmjnI0Q38oFt/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: 4jh5_0ppZYDExl/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: bVw9SsvGfnpPWC/icon
import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: vMxhpIIIPMbfuv/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Id8KGjLkdQoXxj/icon
import BuzzFeedOnWhitesvgIcon from "./icons/PlasmicIcon__BuzzFeedOnWhitesvg"; // plasmic-import: yjRsogMQK2JuLx/icon
import Layer1SvgIcon from "./icons/PlasmicIcon__Layer1Svg"; // plasmic-import: e-kCsG3zM6OO-z/icon
import GroupsvgIcon from "./icons/PlasmicIcon__Groupsvg"; // plasmic-import: IridhowzujR8_J/icon

export type PlasmicLnGiftingPage__VariantMembers = {};

export type PlasmicLnGiftingPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicLnGiftingPage__VariantsArgs;
export const PlasmicLnGiftingPage__VariantProps = new Array<VariantPropType>();

export type PlasmicLnGiftingPage__ArgsType = {};
type ArgPropType = keyof PlasmicLnGiftingPage__ArgsType;
export const PlasmicLnGiftingPage__ArgProps = new Array<ArgPropType>();

export type PlasmicLnGiftingPage__OverridesType = {
  root?: p.Flex<"div">;
  hero?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  heroMobileImage?: p.Flex<typeof p.PlasmicImg>;
  giftCardCallout?: p.Flex<"div">;
  jumpArrow?: p.Flex<"a"> & Partial<LinkProps>;
  giftingOptions?: p.Flex<"section">;
  whatYouGetImageColumns?: p.Flex<typeof WhatYouGetImageColumns>;
  metricsUpdated?: p.Flex<"section">;
  testimonialsUpdate3?: p.Flex<"section">;
  carousel?: p.Flex<typeof Carousel>;
  pressSlider?: p.Flex<"section">;
  contentOnHover?: p.Flex<typeof ContentOnHover>;
  buzzfeed2?: p.Flex<"div">;
  huffpost2?: p.Flex<"div">;
  usatoday2?: p.Flex<"div">;
  preFooterCta?: p.Flex<"section">;
  landingPageDoubleCta2?: p.Flex<"div">;
  styler?: p.Flex<typeof Styler>;
};

export interface DefaultLnGiftingPageProps {}

function PlasmicLnGiftingPage__RenderFunc(props: {
  variants: PlasmicLnGiftingPage__VariantsArgs;
  args: PlasmicLnGiftingPage__ArgsType;
  overrides: PlasmicLnGiftingPage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const [isN3224454Hover, triggerN3224454HoverProps] = useTrigger(
    "useHover",
    {}
  );
  const [isN3224672Hover, triggerN3224672HoverProps] = useTrigger(
    "useHover",
    {}
  );
  const triggers = {
    hover_3224454: isN3224454Hover,
    hover_3224672: isN3224672Hover
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6PiZsruRybCC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_sips_by_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            className={classNames(projectcss.all, sty.hero)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__rs0Bx)}>
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__pJq2W)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__w6SkX)}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "desktop")
                      ? "Personalized, premium tea boxes. The perfect gift for everyone."
                      : hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? "Personalized, premium tea boxes. The perfect gift for everyone."
                      : "Personalized, premium tea boxes. The perfect gift for everyone."}
                  </h1>

                  {(
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? true
                      : true
                  ) ? (
                    <ButtonLnUpdate
                      className={classNames(
                        "__wab_instance",
                        sty.buttonLnUpdate___7Pnc5
                      )}
                      link={"#gifting-options" as const}
                    >
                      {"Shop Gift Subscriptions"}
                    </ButtonLnUpdate>
                  ) : null}

                  {(
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4O9Wb
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {"Got Sips by as a gift? "}
                        </React.Fragment>
                        {
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__oP1Lp
                            )}
                            component={Link}
                            href={
                              "https://www.sipsby.com/pages/mygift" as const
                            }
                            platform={"nextjs"}
                            data-plasmic-trigger-props={[
                              triggerN3224454HoverProps
                            ]}
                          >
                            {triggers.hover_3224454
                              ? "Redeem it now!"
                              : "Redeem it now!"}
                          </p.PlasmicLink>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  ) : null}

                  {true ? (
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__he0Cl
                      )}
                      component={Link}
                      href={"#gifting-options" as const}
                      platform={"nextjs"}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? true
                          : false
                      ) ? (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___6Rqm)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                              ? ("80px" as const)
                              : ("auto" as const)
                          }
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_sips_by_website/images/image10.svg",
                            fullWidth: 130,
                            fullHeight: 150,
                            aspectRatio: 0.866071
                          }}
                        />
                      ) : null}
                    </p.PlasmicLink>
                  ) : null}
                </p.Stack>
              </PageRow>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__wvrmF)}>
              <p.PlasmicImg
                data-plasmic-name={"heroMobileImage"}
                data-plasmic-override={overrides.heroMobileImage}
                alt={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? ("A m" as const)
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? ("A m" as const)
                    : ("A m" as const)
                }
                className={classNames(sty.heroMobileImage)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? ("100%" as const)
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? ("100%" as const)
                    : ("100%" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? ("100%" as const)
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? ("100%" as const)
                    : ("100%" as const)
                }
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? ("100%" as const)
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? ("100%" as const)
                    : ("100%" as const)
                }
                loading={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? ("eager" as const)
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? ("eager" as const)
                    : ("eager" as const)
                }
                src={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? {
                        src: "/plasmic/copy_of_sips_by_website/images/croppedAnimatedStarTeapotPour1Gif.gif",
                        fullWidth: 1080,
                        fullHeight: 1080,
                        aspectRatio: undefined
                      }
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? {
                        src: "/plasmic/copy_of_sips_by_website/images/croppedAnimatedStarTeapotPour1Gif.gif",
                        fullWidth: 1080,
                        fullHeight: 1080,
                        aspectRatio: undefined
                      }
                    : {
                        src: "/plasmic/copy_of_sips_by_website/images/croppedAnimatedStarTeapotPour1Gif.gif",
                        fullWidth: 1080,
                        fullHeight: 1080,
                        aspectRatio: undefined
                      }
                }
              />

              {(
                hasVariant(globalVariants, "screen", "tabletLandscape")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__dqO7Q)}
                />
              ) : null}

              {(
                hasVariant(globalVariants, "screen", "tabletLandscape")
                  ? true
                  : true
              ) ? (
                <div
                  data-plasmic-name={"giftCardCallout"}
                  data-plasmic-override={overrides.giftCardCallout}
                  className={classNames(projectcss.all, sty.giftCardCallout)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jheRs
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {"Got Sips by as a gift? "}
                      </React.Fragment>
                      {
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link__vQFnz
                          )}
                          component={Link}
                          href={"https://www.sipsby.com/pages/mygift" as const}
                          platform={"nextjs"}
                          data-plasmic-trigger-props={[
                            triggerN3224672HoverProps
                          ]}
                        >
                          {triggers.hover_3224672
                            ? "Redeem it now!"
                            : "Redeem it now!"}
                        </p.PlasmicLink>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>

                  <Icon16Icon
                    className={classNames(projectcss.all, sty.svg__bn3Jr)}
                    role={"img"}
                  />
                </div>
              ) : null}

              {(
                hasVariant(globalVariants, "screen", "tabletLandscape")
                  ? true
                  : true
              ) ? (
                <p.PlasmicLink
                  data-plasmic-name={"jumpArrow"}
                  data-plasmic-override={overrides.jumpArrow}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.jumpArrow
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <Icon15Icon
                    className={classNames(projectcss.all, sty.svg__tGTx)}
                    role={"img"}
                  />
                </p.PlasmicLink>
              ) : null}
            </div>
          </section>

          <section
            data-plasmic-name={"giftingOptions"}
            data-plasmic-override={overrides.giftingOptions}
            className={classNames(projectcss.all, sty.giftingOptions)}
            id={"gifting-options" as const}
          >
            <div className={classNames(projectcss.all, sty.column__uQl7U)}>
              <GiftOptionBlock
                className={classNames(
                  "__wab_instance",
                  sty.giftOptionBlock__sFuBe
                )}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tpxcB
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "desktop")
                      ? "Perfect for tea lovers, tea newbies, and last-minute gifts."
                      : "Perfect for tea lovers, tea newbies, and last-minute gifts."}
                  </div>
                }
                slot2={
                  <ButtonLnUpdate
                    className={classNames(
                      "__wab_instance",
                      sty.buttonLnUpdate__ke98M
                    )}
                    link={"/pages/content?ckey=gift-order-form-email" as const}
                  >
                    {"Shop Digital Gift Cards"}
                  </ButtonLnUpdate>
                }
                slot3={
                  <Icon10Icon
                    className={classNames(projectcss.all, sty.svg__zusPp)}
                    role={"img"}
                  />
                }
              />
            </div>

            <div className={classNames(projectcss.all, sty.column__vj6Qt)}>
              <GiftOptionBlock
                className={classNames(
                  "__wab_instance",
                  sty.giftOptionBlock__qkiw2
                )}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hjUxu
                    )}
                  >
                    {"A great in-person gift, without ever leaving the house."}
                  </div>
                }
                slot2={
                  <ButtonLnUpdate
                    className={classNames(
                      "__wab_instance",
                      sty.buttonLnUpdate___5CzVb
                    )}
                    link={"/pages/content?ckey=gift-order-form-print" as const}
                  >
                    {"Shop Printable Gift Cards"}
                  </ButtonLnUpdate>
                }
                slot3={
                  <Icon11Icon
                    className={classNames(projectcss.all, sty.svg__wxpuc)}
                    role={"img"}
                  />
                }
              >
                {"Print it"}
              </GiftOptionBlock>
            </div>

            <div className={classNames(projectcss.all, sty.column__nPk6D)}>
              <GiftOptionBlock
                className={classNames(
                  "__wab_instance",
                  sty.giftOptionBlock__hSmry
                )}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hijNx
                    )}
                  >
                    {"You write the card, we’ll take care of the rest."}
                  </div>
                }
                slot2={
                  <ButtonLnUpdate
                    className={classNames(
                      "__wab_instance",
                      sty.buttonLnUpdate__mhDuV
                    )}
                    link={"/pages/content?ckey=gift-order-form-mail" as const}
                  >
                    {"Shop Physical Gift Cards "}
                  </ButtonLnUpdate>
                }
                slot3={
                  <Icon14Icon
                    className={classNames(projectcss.all, sty.svg__ui5QK)}
                    role={"img"}
                  />
                }
              >
                {"Mail it"}
              </GiftOptionBlock>
            </div>
          </section>

          <WhatYouGetImageColumns
            data-plasmic-name={"whatYouGetImageColumns"}
            data-plasmic-override={overrides.whatYouGetImageColumns}
            className={classNames("__wab_instance", sty.whatYouGetImageColumns)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__n8Jmn
              )}
            >
              {hasVariant(globalVariants, "screen", "desktop")
                ? "What they get"
                : "What they get"}
            </div>
          </WhatYouGetImageColumns>

          <section
            data-plasmic-name={"metricsUpdated"}
            data-plasmic-override={overrides.metricsUpdated}
            className={classNames(projectcss.all, sty.metricsUpdated)}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow__r9P3W)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns___2VxAj)}
              >
                <div className={classNames(projectcss.all, sty.column__bIsNx)}>
                  <SectionMetricsMetric
                    className={classNames(
                      "__wab_instance",
                      sty.sectionMetricsMetric__wb5Mf
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kQdUz
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "desktop")
                          ? "tea lovers served"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? "tea lovers served"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletPortrait"
                            )
                          ? "tea lovers served"
                          : "tea lovers served"}
                      </div>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__my0DK
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "desktop")
                        ? "1m"
                        : hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                        ? "1m"
                        : "1m"}
                    </div>
                  </SectionMetricsMetric>
                </div>

                <div className={classNames(projectcss.all, sty.column__m8X49)}>
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__mFnXw)}
                    role={"img"}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__jiWq7)}>
                  <SectionMetricsMetric
                    className={classNames(
                      "__wab_instance",
                      sty.sectionMetricsMetric__bfyBn
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___92PtA
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "desktop")
                          ? "tea brands"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? "tea brands"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletPortrait"
                            )
                          ? "tea brands"
                          : "tea brands"}
                      </div>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wp4Zi
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "desktop")
                        ? "150+"
                        : hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                        ? "150+"
                        : hasVariant(globalVariants, "screen", "tabletPortrait")
                        ? "150+"
                        : "150+"}
                    </div>
                  </SectionMetricsMetric>
                </div>

                <div className={classNames(projectcss.all, sty.column__ulKdK)}>
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__yzQqY)}
                    role={"img"}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__axqgn)}>
                  <SectionMetricsMetric
                    className={classNames(
                      "__wab_instance",
                      sty.sectionMetricsMetric__wd1Yr
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uiZlJ
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "desktop")
                          ? "different teas"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? "different teas"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletPortrait"
                            )
                          ? "different teas"
                          : "different teas"}
                      </div>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dozVs
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "desktop")
                        ? "2k"
                        : hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                        ? "2k"
                        : "2k"}
                    </div>
                  </SectionMetricsMetric>
                </div>
              </p.Stack>
            </PageRow>
          </section>

          <section
            data-plasmic-name={"testimonialsUpdate3"}
            data-plasmic-override={overrides.testimonialsUpdate3}
            className={classNames(projectcss.all, sty.testimonialsUpdate3)}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow__jgMqS)}
            >
              {(
                hasVariant(globalVariants, "screen", "desktop")
                  ? true
                  : hasVariant(globalVariants, "screen", "tabletLandscape")
                  ? true
                  : hasVariant(globalVariants, "screen", "tabletPortrait")
                  ? true
                  : true
              ) ? (
                <div className={classNames(projectcss.all, sty.columns___5JdC)}>
                  <div
                    className={classNames(projectcss.all, sty.column__olmQc)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "desktop")
                        ? true
                        : hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                        ? true
                        : hasVariant(globalVariants, "screen", "tabletPortrait")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__v2FdN
                        )}
                      >
                        <Carousel
                          data-plasmic-name={"carousel"}
                          data-plasmic-override={overrides.carousel}
                          className={classNames("__wab_instance", sty.carousel)}
                          lazyLoad={true}
                          navigation={true}
                          navigationButtonAlpha={0.05 as const}
                          navigationOnTop={false}
                          pagination={true}
                          paginationOnTop={false}
                          random={false}
                          slidesPerView={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? {
                                  default: 1,
                                  smallPhones: 1,
                                  phones: 1,
                                  portraitTablets: 1,
                                  landscapeTablets: 1,
                                  bigDesktops: 1
                                }
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletLandscape"
                                )
                              ? {
                                  default: 1,
                                  smallPhones: 1,
                                  phones: 1,
                                  portraitTablets: 1,
                                  landscapeTablets: 1,
                                  bigDesktops: 1
                                }
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletPortrait"
                                )
                              ? {
                                  default: 1,
                                  smallPhones: 1,
                                  phones: 1,
                                  portraitTablets: 1,
                                  landscapeTablets: 1,
                                  bigDesktops: 1
                                }
                              : {
                                  default: 1,
                                  smallPhones: 1,
                                  phones: 1,
                                  portraitTablets: 1,
                                  landscapeTablets: 1,
                                  bigDesktops: 1
                                }
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__vYkdg
                            )}
                          >
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2__rnaqz
                              )}
                            >
                              {hasVariant(globalVariants, "screen", "desktop")
                                ? "What Sippers Are Saying:"
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletLandscape"
                                  )
                                ? "What Sippers Are Saying:"
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletPortrait"
                                  )
                                ? "What Sippers Are Saying:"
                                : "What Sippers Are Saying:"}
                            </h2>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tP0Op
                              )}
                            >
                              {hasVariant(globalVariants, "screen", "desktop")
                                ? '"This whole box was loved! I must admit, I have to fight with my husband over these."'
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletLandscape"
                                  )
                                ? '"This whole box was loved! I must admit, I have to fight with my husband over these."'
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletPortrait"
                                  )
                                ? '"This whole box was loved! I must admit, I have to fight with my husband over these."'
                                : '"This whole box was loved! I must admit, I have to fight with my husband over these."'}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gscIt
                              )}
                            >
                              {hasVariant(globalVariants, "screen", "desktop")
                                ? "—  Grace C."
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletLandscape"
                                  )
                                ? "—  Grace C."
                                : "—  Grace C."}
                            </div>
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___6GLrw
                            )}
                          >
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2__ix3Xh
                              )}
                            >
                              {hasVariant(globalVariants, "screen", "desktop")
                                ? "What Sippers Are Saying:"
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletLandscape"
                                  )
                                ? "What Sippers Are Saying:"
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletPortrait"
                                  )
                                ? "What Sippers Are Saying:"
                                : "What Sippers Are Saying:"}
                            </h2>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yV6Y
                              )}
                            >
                              {hasVariant(globalVariants, "screen", "desktop")
                                ? '"I wait for my new boxes with child-like anticipation! I love this!"'
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletLandscape"
                                  )
                                ? '"I wait for my new boxes with child-like anticipation! I love this!"'
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletPortrait"
                                  )
                                ? '"I wait for my new boxes with child-like anticipation! I love this!"'
                                : '"I wait for my new boxes with child-like anticipation! I love this!"'}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___77Ji4
                              )}
                            >
                              {hasVariant(globalVariants, "screen", "desktop")
                                ? "—  Tobi M."
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletLandscape"
                                  )
                                ? "—  Tobi M."
                                : "—  Tobi M."}
                            </div>
                          </div>

                          {(
                            hasVariant(globalVariants, "screen", "desktop")
                              ? true
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletLandscape"
                                )
                              ? true
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletPortrait"
                                )
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ct8Nv
                              )}
                            >
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__ey1Mz
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? "What Sippers Are Saying:"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? "What Sippers Are Saying:"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? "What Sippers Are Saying:"
                                  : "What Sippers Are Saying:"}
                              </h2>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zjbYh
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""
                                  : "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__o2Eco
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "desktop")
                                  ? "— Lori D."
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? "— Lori D."
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? "— Lori D."
                                  : "— Lori D."}
                              </div>
                            </div>
                          ) : null}
                        </Carousel>
                      </div>
                    ) : null}
                  </div>
                </div>
              ) : null}
            </PageRow>
          </section>

          <section
            data-plasmic-name={"pressSlider"}
            data-plasmic-override={overrides.pressSlider}
            className={classNames(projectcss.all, sty.pressSlider)}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow__zE4EK)}
            >
              <ContentOnHover
                data-plasmic-name={"contentOnHover"}
                data-plasmic-override={overrides.contentOnHover}
                buttons={
                  <PageRow
                    className={classNames("__wab_instance", sty.pageRow__qBqMl)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.columns__hCiTx)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__bsyG4
                        )}
                      >
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__brDms
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          <p.PlasmicIcon
                            PlasmicIconType={
                              hasVariant(globalVariants, "screen", "desktop")
                                ? BuzzFeedOnWhitesvgIcon
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletLandscape"
                                  )
                                ? BuzzFeedOnWhitesvgIcon
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletPortrait"
                                  )
                                ? BuzzFeedOnWhitesvgIcon
                                : BuzzFeedOnWhitesvgIcon
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg__wt0Hp
                            )}
                            role={"img"}
                          />
                        </p.PlasmicLink>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___4Ylq
                        )}
                      >
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__iiHkn
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          <p.PlasmicIcon
                            PlasmicIconType={
                              hasVariant(globalVariants, "screen", "desktop")
                                ? Layer1SvgIcon
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletLandscape"
                                  )
                                ? Layer1SvgIcon
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletPortrait"
                                  )
                                ? Layer1SvgIcon
                                : Layer1SvgIcon
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg___4Pq0K
                            )}
                            role={"img"}
                          />
                        </p.PlasmicLink>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__gd3Pd
                        )}
                      >
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__ghyLl
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          <p.PlasmicIcon
                            PlasmicIconType={
                              hasVariant(globalVariants, "screen", "desktop")
                                ? GroupsvgIcon
                                : GroupsvgIcon
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg__htIKz
                            )}
                            role={"img"}
                          />
                        </p.PlasmicLink>
                      </div>
                    </p.Stack>
                  </PageRow>
                }
                className={classNames("__wab_instance", sty.contentOnHover)}
                defaultDisplay={2 as const}
                displays={
                  <React.Fragment>
                    {true ? (
                      <div
                        data-plasmic-name={"buzzfeed2"}
                        data-plasmic-override={overrides.buzzfeed2}
                        className={classNames(projectcss.all, sty.buzzfeed2)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nRRpL
                          )}
                        >
                          {
                            '"Perfect for any tea drinker who wants to mix up their go-to flavors with personalized, carefully selected options each month."'
                          }
                        </div>
                      </div>
                    ) : null}

                    {true ? (
                      <div
                        data-plasmic-name={"huffpost2"}
                        data-plasmic-override={overrides.huffpost2}
                        className={classNames(projectcss.all, sty.huffpost2)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___00SeZ
                          )}
                        >
                          {' "An absolute must for all tea devotees."'}
                        </div>
                      </div>
                    ) : null}

                    {true ? (
                      <div
                        data-plasmic-name={"usatoday2"}
                        data-plasmic-override={overrides.usatoday2}
                        className={classNames(projectcss.all, sty.usatoday2)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0Kkyz
                          )}
                        >
                          {
                            '"We love the adorable packaging and wide variety of teas they delivered."'
                          }
                        </div>
                      </div>
                    ) : null}
                  </React.Fragment>
                }
              />
            </PageRow>
          </section>

          <section
            data-plasmic-name={"preFooterCta"}
            data-plasmic-override={overrides.preFooterCta}
            className={classNames(projectcss.all, sty.preFooterCta)}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox___6E5M3)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__yyEHb)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? ("100%" as const)
                      : ("auto" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? ("100%" as const)
                      : ("100%" as const)
                  }
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_sips_by_website/images/mugHandSquareGif1Gif.gif",
                    fullWidth: 1080,
                    fullHeight: 1080,
                    aspectRatio: undefined
                  }}
                />
              </div>
            ) : null}

            <PageRow
              className={classNames("__wab_instance", sty.pageRow__tuGK)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__bCb1T)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__x08Ba
                  )}
                >
                  {"Ready to get gifting?"}
                </h2>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"landingPageDoubleCta2"}
                  data-plasmic-override={overrides.landingPageDoubleCta2}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.landingPageDoubleCta2
                  )}
                >
                  <ButtonLnUpdate
                    className={classNames(
                      "__wab_instance",
                      sty.buttonLnUpdate__maq1A
                    )}
                    link={"/pages/content?ckey=gift-order-form-email" as const}
                  >
                    {"Shop Digital Gift Cards"}
                  </ButtonLnUpdate>

                  <ButtonLnUpdate
                    className={classNames(
                      "__wab_instance",
                      sty.buttonLnUpdate__jcoRq
                    )}
                    link={"/pages/content?ckey=gift-order-form-mail" as const}
                  >
                    {"Shop Physical Gift Cards"}
                  </ButtonLnUpdate>
                </p.Stack>
              </div>
            </PageRow>
          </section>

          <Styler
            data-plasmic-name={"styler"}
            data-plasmic-override={overrides.styler}
            className={classNames("__wab_instance", sty.styler)}
            styles={[
              { "--sb-header-bg-color": "rgb(252, 239, 228)" },
              { "--sb-header-border-color": "transparent" },
              { "--sb-header-border-width": "0" }
            ]}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "h1",
    "heroMobileImage",
    "giftCardCallout",
    "jumpArrow",
    "giftingOptions",
    "whatYouGetImageColumns",
    "metricsUpdated",
    "testimonialsUpdate3",
    "carousel",
    "pressSlider",
    "contentOnHover",
    "buzzfeed2",
    "huffpost2",
    "usatoday2",
    "preFooterCta",
    "landingPageDoubleCta2",
    "styler"
  ],
  hero: ["hero", "h1", "heroMobileImage", "giftCardCallout", "jumpArrow"],
  h1: ["h1"],
  heroMobileImage: ["heroMobileImage"],
  giftCardCallout: ["giftCardCallout"],
  jumpArrow: ["jumpArrow"],
  giftingOptions: ["giftingOptions"],
  whatYouGetImageColumns: ["whatYouGetImageColumns"],
  metricsUpdated: ["metricsUpdated"],
  testimonialsUpdate3: ["testimonialsUpdate3", "carousel"],
  carousel: ["carousel"],
  pressSlider: [
    "pressSlider",
    "contentOnHover",
    "buzzfeed2",
    "huffpost2",
    "usatoday2"
  ],
  contentOnHover: ["contentOnHover", "buzzfeed2", "huffpost2", "usatoday2"],
  buzzfeed2: ["buzzfeed2"],
  huffpost2: ["huffpost2"],
  usatoday2: ["usatoday2"],
  preFooterCta: ["preFooterCta", "landingPageDoubleCta2"],
  landingPageDoubleCta2: ["landingPageDoubleCta2"],
  styler: ["styler"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  hero: "section";
  h1: "h1";
  heroMobileImage: typeof p.PlasmicImg;
  giftCardCallout: "div";
  jumpArrow: "a";
  giftingOptions: "section";
  whatYouGetImageColumns: typeof WhatYouGetImageColumns;
  metricsUpdated: "section";
  testimonialsUpdate3: "section";
  carousel: typeof Carousel;
  pressSlider: "section";
  contentOnHover: typeof ContentOnHover;
  buzzfeed2: "div";
  huffpost2: "div";
  usatoday2: "div";
  preFooterCta: "section";
  landingPageDoubleCta2: "div";
  styler: typeof Styler;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLnGiftingPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLnGiftingPage__VariantsArgs;
    args?: PlasmicLnGiftingPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLnGiftingPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLnGiftingPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLnGiftingPage__ArgProps,
          internalVariantPropNames: PlasmicLnGiftingPage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLnGiftingPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLnGiftingPage";
  } else {
    func.displayName = `PlasmicLnGiftingPage.${nodeName}`;
  }
  return func;
}

export const PlasmicLnGiftingPage = Object.assign(
  // Top-level PlasmicLnGiftingPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    h1: makeNodeComponent("h1"),
    heroMobileImage: makeNodeComponent("heroMobileImage"),
    giftCardCallout: makeNodeComponent("giftCardCallout"),
    jumpArrow: makeNodeComponent("jumpArrow"),
    giftingOptions: makeNodeComponent("giftingOptions"),
    whatYouGetImageColumns: makeNodeComponent("whatYouGetImageColumns"),
    metricsUpdated: makeNodeComponent("metricsUpdated"),
    testimonialsUpdate3: makeNodeComponent("testimonialsUpdate3"),
    carousel: makeNodeComponent("carousel"),
    pressSlider: makeNodeComponent("pressSlider"),
    contentOnHover: makeNodeComponent("contentOnHover"),
    buzzfeed2: makeNodeComponent("buzzfeed2"),
    huffpost2: makeNodeComponent("huffpost2"),
    usatoday2: makeNodeComponent("usatoday2"),
    preFooterCta: makeNodeComponent("preFooterCta"),
    landingPageDoubleCta2: makeNodeComponent("landingPageDoubleCta2"),
    styler: makeNodeComponent("styler"),

    // Metadata about props expected for PlasmicLnGiftingPage
    internalVariantProps: PlasmicLnGiftingPage__VariantProps,
    internalArgProps: PlasmicLnGiftingPage__ArgProps
  }
);

export default PlasmicLnGiftingPage;
/* prettier-ignore-end */
