// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: rzM0r7jkSsGssU
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SectionMobileMenuMainMenuButton from "../../SectionMobileMenuMainMenuButton"; // plasmic-import: n4laxhknGNKwOw/component
import { Accordian } from "../../../../components/accordian"; // plasmic-import: cCgo9xBVwdcOdS/codeComponent
import MobileEcomFeature from "../../MobileEcomFeature"; // plasmic-import: X-5x9z1iG-kBMY/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicNavMobileMenuLnTeaware.module.css"; // plasmic-import: rzM0r7jkSsGssU/css

import Icon24Icon from "./icons/PlasmicIcon__Icon24"; // plasmic-import: 3NsZoIk_ipGVNE/icon

export type PlasmicNavMobileMenuLnTeaware__VariantMembers = {};

export type PlasmicNavMobileMenuLnTeaware__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavMobileMenuLnTeaware__VariantsArgs;
export const PlasmicNavMobileMenuLnTeaware__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNavMobileMenuLnTeaware__ArgsType = {};
type ArgPropType = keyof PlasmicNavMobileMenuLnTeaware__ArgsType;
export const PlasmicNavMobileMenuLnTeaware__ArgProps = new Array<ArgPropType>();

export type PlasmicNavMobileMenuLnTeaware__OverridesType = {
  root?: p.Flex<"div">;
  sectionMobileMenuMainMenuButton?: p.Flex<
    typeof SectionMobileMenuMainMenuButton
  >;
  collectionsnewTeaArrivals?: p.Flex<"a"> & Partial<LinkProps>;
  collectionsbestSellingTeaware?: p.Flex<"a"> & Partial<LinkProps>;
  collectionsteaGifts?: p.Flex<"a"> & Partial<LinkProps>;
  collectionsmugs?: p.Flex<"a"> & Partial<LinkProps>;
  collectionsteapotsTeaMakers?: p.Flex<"a"> & Partial<LinkProps>;
  collectionsfiltersInfusers?: p.Flex<"a"> & Partial<LinkProps>;
  collectionsteaAccessoriesAll?: p.Flex<"a"> & Partial<LinkProps>;
  mobileEcomFeature?: p.Flex<typeof MobileEcomFeature>;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultNavMobileMenuLnTeawareProps {}

function PlasmicNavMobileMenuLnTeaware__RenderFunc(props: {
  variants: PlasmicNavMobileMenuLnTeaware__VariantsArgs;
  args: PlasmicNavMobileMenuLnTeaware__ArgsType;
  overrides: PlasmicNavMobileMenuLnTeaware__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_sips_by_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__vDlOe)}>
            <SectionMobileMenuMainMenuButton
              data-plasmic-name={"sectionMobileMenuMainMenuButton"}
              data-plasmic-override={overrides.sectionMobileMenuMainMenuButton}
              className={classNames(
                "__wab_instance",
                sty.sectionMobileMenuMainMenuButton
              )}
            >
              {"Teaware"}
            </SectionMobileMenuMainMenuButton>
          </div>

          {true ? (
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__uNrci,
                "" as const
              )}
            >
              <Accordian
                arrow={
                  true ? (
                    <Icon24Icon
                      className={classNames(projectcss.all, sty.svg__g8RIj)}
                      role={"img"}
                    />
                  ) : null
                }
                arrowRotationOnOpen={180 as const}
                arrowSide={"farright" as const}
                className={classNames("__wab_instance", sty.accordian__d1HA)}
                content={
                  true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__tvD47)}
                    >
                      <p.PlasmicLink
                        data-plasmic-name={"collectionsnewTeaArrivals"}
                        data-plasmic-override={
                          overrides.collectionsnewTeaArrivals
                        }
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.collectionsnewTeaArrivals
                        )}
                        component={Link}
                        href={"/collections/new-tea-arrivals" as const}
                        platform={"nextjs"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kiBn5
                          )}
                        >
                          {"New Arrivals"}
                        </div>
                      </p.PlasmicLink>

                      <p.PlasmicLink
                        data-plasmic-name={"collectionsbestSellingTeaware"}
                        data-plasmic-override={
                          overrides.collectionsbestSellingTeaware
                        }
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.collectionsbestSellingTeaware
                        )}
                        component={Link}
                        href={"/collections/best-selling-teaware" as const}
                        platform={"nextjs"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__izyr3
                          )}
                        >
                          {"Best Sellers"}
                        </div>
                      </p.PlasmicLink>

                      <p.PlasmicLink
                        data-plasmic-name={"collectionsteaGifts"}
                        data-plasmic-override={overrides.collectionsteaGifts}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.collectionsteaGifts
                        )}
                        component={Link}
                        href={"/collections/tea-gifts" as const}
                        platform={"nextjs"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hkeE9
                          )}
                        >
                          {"Gifts"}
                        </div>
                      </p.PlasmicLink>
                    </p.Stack>
                  ) : null
                }
                defaultOpen={true}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nBsXv
                    )}
                  >
                    {"Explore"}
                  </div>
                }
                titleSide={"left" as const}
              />
            </div>
          ) : null}

          {true ? (
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__rjGp5,
                "" as const
              )}
            >
              <Accordian
                arrow={
                  true ? (
                    <Icon24Icon
                      className={classNames(projectcss.all, sty.svg___0Zxng)}
                      role={"img"}
                    />
                  ) : null
                }
                arrowRotationOnOpen={180 as const}
                arrowSide={"farright" as const}
                className={classNames("__wab_instance", sty.accordian___2Yi7M)}
                content={
                  true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__g3Uw)}
                    >
                      <p.PlasmicLink
                        data-plasmic-name={"collectionsmugs"}
                        data-plasmic-override={overrides.collectionsmugs}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.collectionsmugs
                        )}
                        component={Link}
                        href={"/collections/mugs" as const}
                        platform={"nextjs"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mWUhH
                          )}
                        >
                          {"Teacups + Mugs"}
                        </div>
                      </p.PlasmicLink>

                      <p.PlasmicLink
                        data-plasmic-name={"collectionsteapotsTeaMakers"}
                        data-plasmic-override={
                          overrides.collectionsteapotsTeaMakers
                        }
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.collectionsteapotsTeaMakers
                        )}
                        component={Link}
                        href={"/collections/teapots-tea-makers" as const}
                        platform={"nextjs"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__focKp
                          )}
                        >
                          {"Teapots + Tea Makers"}
                        </div>
                      </p.PlasmicLink>

                      <p.PlasmicLink
                        data-plasmic-name={"collectionsfiltersInfusers"}
                        data-plasmic-override={
                          overrides.collectionsfiltersInfusers
                        }
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.collectionsfiltersInfusers
                        )}
                        component={Link}
                        href={"/collections/filters-infusers" as const}
                        platform={"nextjs"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sjBtk
                          )}
                        >
                          {"Infusers + Filters"}
                        </div>
                      </p.PlasmicLink>

                      <p.PlasmicLink
                        data-plasmic-name={"collectionsteaAccessoriesAll"}
                        data-plasmic-override={
                          overrides.collectionsteaAccessoriesAll
                        }
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.collectionsteaAccessoriesAll
                        )}
                        component={Link}
                        href={"/collections/tea-accessories-all" as const}
                        platform={"nextjs"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pPhk
                          )}
                        >
                          {"Shop All"}
                        </div>
                      </p.PlasmicLink>
                    </p.Stack>
                  ) : null
                }
                defaultOpen={false}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fhGxj
                    )}
                  >
                    {"Teaware"}
                  </div>
                }
                titleSide={"left" as const}
              />
            </div>
          ) : null}

          <MobileEcomFeature
            data-plasmic-name={"mobileEcomFeature"}
            data-plasmic-override={overrides.mobileEcomFeature}
            className={classNames("__wab_instance", sty.mobileEcomFeature)}
            link={"/products/glass-infuser-teapot" as const}
            slot={
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___7YFil)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mhSfi
                  )}
                >
                  {"Just restocked: The Galaxy Teapot! "}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jSfhj
                  )}
                >
                  {"Shop Now →"}
                </div>
              </p.Stack>
            }
          >
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={"Glass teapot with a crescent moon handle lid" as const}
              className={classNames(sty.img)}
              displayHeight={"100%" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100%" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/copy_of_sips_by_website/images/teapot1X1Jpg.jpeg",
                fullWidth: 2511,
                fullHeight: 2511,
                aspectRatio: undefined
              }}
            />
          </MobileEcomFeature>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sectionMobileMenuMainMenuButton",
    "collectionsnewTeaArrivals",
    "collectionsbestSellingTeaware",
    "collectionsteaGifts",
    "collectionsmugs",
    "collectionsteapotsTeaMakers",
    "collectionsfiltersInfusers",
    "collectionsteaAccessoriesAll",
    "mobileEcomFeature",
    "img"
  ],
  sectionMobileMenuMainMenuButton: ["sectionMobileMenuMainMenuButton"],
  collectionsnewTeaArrivals: ["collectionsnewTeaArrivals"],
  collectionsbestSellingTeaware: ["collectionsbestSellingTeaware"],
  collectionsteaGifts: ["collectionsteaGifts"],
  collectionsmugs: ["collectionsmugs"],
  collectionsteapotsTeaMakers: ["collectionsteapotsTeaMakers"],
  collectionsfiltersInfusers: ["collectionsfiltersInfusers"],
  collectionsteaAccessoriesAll: ["collectionsteaAccessoriesAll"],
  mobileEcomFeature: ["mobileEcomFeature", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sectionMobileMenuMainMenuButton: typeof SectionMobileMenuMainMenuButton;
  collectionsnewTeaArrivals: "a";
  collectionsbestSellingTeaware: "a";
  collectionsteaGifts: "a";
  collectionsmugs: "a";
  collectionsteapotsTeaMakers: "a";
  collectionsfiltersInfusers: "a";
  collectionsteaAccessoriesAll: "a";
  mobileEcomFeature: typeof MobileEcomFeature;
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavMobileMenuLnTeaware__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavMobileMenuLnTeaware__VariantsArgs;
    args?: PlasmicNavMobileMenuLnTeaware__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavMobileMenuLnTeaware__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavMobileMenuLnTeaware__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavMobileMenuLnTeaware__ArgProps,
          internalVariantPropNames: PlasmicNavMobileMenuLnTeaware__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNavMobileMenuLnTeaware__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavMobileMenuLnTeaware";
  } else {
    func.displayName = `PlasmicNavMobileMenuLnTeaware.${nodeName}`;
  }
  return func;
}

export const PlasmicNavMobileMenuLnTeaware = Object.assign(
  // Top-level PlasmicNavMobileMenuLnTeaware renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionMobileMenuMainMenuButton: makeNodeComponent(
      "sectionMobileMenuMainMenuButton"
    ),
    collectionsnewTeaArrivals: makeNodeComponent("collectionsnewTeaArrivals"),
    collectionsbestSellingTeaware: makeNodeComponent(
      "collectionsbestSellingTeaware"
    ),
    collectionsteaGifts: makeNodeComponent("collectionsteaGifts"),
    collectionsmugs: makeNodeComponent("collectionsmugs"),
    collectionsteapotsTeaMakers: makeNodeComponent(
      "collectionsteapotsTeaMakers"
    ),
    collectionsfiltersInfusers: makeNodeComponent("collectionsfiltersInfusers"),
    collectionsteaAccessoriesAll: makeNodeComponent(
      "collectionsteaAccessoriesAll"
    ),
    mobileEcomFeature: makeNodeComponent("mobileEcomFeature"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicNavMobileMenuLnTeaware
    internalVariantProps: PlasmicNavMobileMenuLnTeaware__VariantProps,
    internalArgProps: PlasmicNavMobileMenuLnTeaware__ArgProps
  }
);

export default PlasmicNavMobileMenuLnTeaware;
/* prettier-ignore-end */
