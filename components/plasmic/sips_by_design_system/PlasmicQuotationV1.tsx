// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mrgn3VC2r6s7VB3wKPe7xp
// Component: _Z8xXR8LUJ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import sty from "./PlasmicQuotationV1.module.css"; // plasmic-import: _Z8xXR8LUJ/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: Hxnz6Uousg/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: QH3TGD-PAa/icon

export type PlasmicQuotationV1__VariantMembers = {};

export type PlasmicQuotationV1__VariantsArgs = {};
type VariantPropType = keyof PlasmicQuotationV1__VariantsArgs;
export const PlasmicQuotationV1__VariantProps = new Array<VariantPropType>();

export type PlasmicQuotationV1__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
};

type ArgPropType = keyof PlasmicQuotationV1__ArgsType;
export const PlasmicQuotationV1__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3"
);

export type PlasmicQuotationV1__OverridesType = {
  root?: p.Flex<"div">;
  wrapper?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  text?: p.Flex<"div">;
};

export interface DefaultQuotationV1Props {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  className?: string;
}

function PlasmicQuotationV1__RenderFunc(props: {
  variants: PlasmicQuotationV1__VariantsArgs;
  args: PlasmicQuotationV1__ArgsType;
  overrides: PlasmicQuotationV1__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <div
          data-plasmic-name={"wrapper"}
          data-plasmic-override={overrides.wrapper}
          className={classNames(projectcss.all, sty.wrapper)}
        >
          <Icon2Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__qbE3U)}>
              {p.renderPlasmicSlot({
                defaultContents: (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__udr2F)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={"https://via.placeholder.com/400" as const}
                  />
                ),

                value: args.slot
              })}
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox__yO3Xt)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <Icon3Icon
                  className={classNames(projectcss.all, sty.svg__mdzyr)}
                  role={"img"}
                />
              ),

              value: args.slot2
            })}

            <div className={classNames(projectcss.all, sty.freeBox__yZ9Ci)}>
              {p.renderPlasmicSlot({
                defaultContents:
                  "It’s a new quote, which means new text! They hit this one out of the park!",
                value: args.slot3,
                className: classNames(sty.slotTargetSlot3)
              })}
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__nk37A)}>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"—"}
            </div>

            {p.renderPlasmicSlot({
              defaultContents: "Name of Person",
              value: args.children,
              className: classNames(sty.slotTargetChildren)
            })}
          </div>
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "wrapper", "svg", "text"],
  wrapper: ["wrapper", "svg", "text"],
  svg: ["svg"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  wrapper: "div";
  svg: "svg";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicQuotationV1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicQuotationV1__VariantsArgs;
    args?: PlasmicQuotationV1__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicQuotationV1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicQuotationV1__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicQuotationV1__ArgProps,
          internalVariantPropNames: PlasmicQuotationV1__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicQuotationV1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQuotationV1";
  } else {
    func.displayName = `PlasmicQuotationV1.${nodeName}`;
  }
  return func;
}

export const PlasmicQuotationV1 = Object.assign(
  // Top-level PlasmicQuotationV1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    wrapper: makeNodeComponent("wrapper"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicQuotationV1
    internalVariantProps: PlasmicQuotationV1__VariantProps,
    internalArgProps: PlasmicQuotationV1__ArgProps
  }
);

export default PlasmicQuotationV1;
/* prettier-ignore-end */
