// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: YsJjrubhubtDkG
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageRow from "../../PageRow"; // plasmic-import: AKAM4dN1Fw/component

import { useScreenVariants as useScreenVariants_6PiZsruRybCC } from "../sips_by_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: 6piZsruRybC-C/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicWhatYouGetImageColumns.module.css"; // plasmic-import: YsJjrubhubtDkG/css

export type PlasmicWhatYouGetImageColumns__VariantMembers = {};

export type PlasmicWhatYouGetImageColumns__VariantsArgs = {};
type VariantPropType = keyof PlasmicWhatYouGetImageColumns__VariantsArgs;
export const PlasmicWhatYouGetImageColumns__VariantProps =
  new Array<VariantPropType>();

export type PlasmicWhatYouGetImageColumns__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicWhatYouGetImageColumns__ArgsType;
export const PlasmicWhatYouGetImageColumns__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicWhatYouGetImageColumns__OverridesType = {
  root?: p.Flex<"section">;
  pageRow?: p.Flex<typeof PageRow>;
  h2?: p.Flex<"h2">;
};

export interface DefaultWhatYouGetImageColumnsProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicWhatYouGetImageColumns__RenderFunc(props: {
  variants: PlasmicWhatYouGetImageColumns__VariantsArgs;
  args: PlasmicWhatYouGetImageColumns__ArgsType;
  overrides: PlasmicWhatYouGetImageColumns__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6PiZsruRybCC()
  });

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_sips_by_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.column___4Cny)}>
        <PageRow
          data-plasmic-name={"pageRow"}
          data-plasmic-override={overrides.pageRow}
          className={classNames("__wab_instance", sty.pageRow)}
        >
          <h2
            data-plasmic-name={"h2"}
            data-plasmic-override={overrides.h2}
            className={classNames(projectcss.all, projectcss.h2, sty.h2)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "WHAT THEY GET",
              value: args.children,
              className: classNames(sty.slotTargetChildren)
            })}
          </h2>

          <div className={classNames(projectcss.all, sty.freeBox__myvkB)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fFlnA)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__knUxm)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__dDl3M)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "desktop")
                      ? ("70px" as const)
                      : ("55px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "desktop")
                      ? ("100%" as const)
                      : ("100%" as const)
                  }
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "desktop")
                      ? ("70px" as const)
                      : ("55px" as const)
                  }
                  loading={
                    hasVariant(globalVariants, "screen", "desktop")
                      ? ("lazy" as const)
                      : ("lazy" as const)
                  }
                  src={
                    hasVariant(globalVariants, "screen", "desktop")
                      ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-bag.svg?v=1636499860" as const)
                      : ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-bag.svg?v=1636499860" as const)
                  }
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6GUfk
                  )}
                >
                  {hasVariant(globalVariants, "screen", "desktop")
                    ? "Four new teas personally curated every month"
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? "Four new teas personally curated every month"
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? "Four new teas personally curated every month"
                    : "Four new teas personally curated every month"}
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__oi1E)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__viS)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "desktop")
                      ? ("70px" as const)
                      : ("55px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "desktop")
                      ? ("100%" as const)
                      : ("100%" as const)
                  }
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "desktop")
                      ? ("70px" as const)
                      : ("55px" as const)
                  }
                  loading={
                    hasVariant(globalVariants, "screen", "desktop")
                      ? ("lazy" as const)
                      : ("lazy" as const)
                  }
                  src={
                    hasVariant(globalVariants, "screen", "desktop")
                      ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-pot.svg?v=1636499860" as const)
                      : ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-pot.svg?v=1636499860" as const)
                  }
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__y5Oh
                  )}
                >
                  {hasVariant(globalVariants, "screen", "desktop")
                    ? "Access to exclusive tea brands only on Sips by"
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? "Access to exclusive tea brands only on Sips by"
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? "Access to exclusive tea brands only on Sips by"
                    : "Access to exclusive tea brands only on Sips by"}
                </div>
              </p.Stack>
            </p.Stack>

            {(
              hasVariant(globalVariants, "screen", "desktop")
                ? true
                : hasVariant(globalVariants, "screen", "tabletLandscape")
                ? true
                : hasVariant(globalVariants, "screen", "tabletPortrait")
                ? true
                : true
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox___2J5Im)}>
                {(
                  hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__rvcia)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? ("100%" as const)
                        : hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                        ? ("100%" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? ("545px" as const)
                        : hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                        ? ("100%" as const)
                        : ("214px" as const)
                    }
                    loading={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? ("lazy" as const)
                        : hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                        ? ("lazy" as const)
                        : ("lazy" as const)
                    }
                    src={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                        : hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                        ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                        : ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                    }
                  />
                ) : null}
              </div>
            ) : null}

            {(
              hasVariant(globalVariants, "screen", "desktop")
                ? true
                : hasVariant(globalVariants, "screen", "tabletLandscape")
                ? true
                : hasVariant(globalVariants, "screen", "tabletPortrait")
                ? true
                : true
            ) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___0Erq6)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__dWOo)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__iQwM)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? ("70px" as const)
                        : ("55px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? ("100%" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? ("70px" as const)
                        : ("55px" as const)
                    }
                    loading={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? ("lazy" as const)
                        : ("lazy" as const)
                    }
                    src={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-teacup.svg?v=1636499860" as const)
                        : ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-teacup.svg?v=1636499860" as const)
                    }
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tSo7M
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "desktop")
                      ? "Reusable tea filters for loose teas + brewing tips"
                      : hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? "Reusable tea filters for loose teas + brewing tips"
                      : hasVariant(globalVariants, "screen", "tabletPortrait")
                      ? "Reusable tea filters for loose teas + brewing tips"
                      : "Reusable tea filters for loose teas + brewing tips"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mx037)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__enUtQ)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? ("70px" as const)
                        : ("55px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? ("100%" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? ("70px" as const)
                        : ("55px" as const)
                    }
                    loading={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? ("lazy" as const)
                        : ("lazy" as const)
                    }
                    src={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-leaves.svg?v=1636499860" as const)
                        : ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-leaves.svg?v=1636499860" as const)
                    }
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__khPro
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? "Early access to product launches and sales"
                      : hasVariant(globalVariants, "screen", "tabletPortrait")
                      ? "Early access to product launches and sales"
                      : "Early access to product launches and sales"}
                  </div>
                </p.Stack>
              </p.Stack>
            ) : null}
          </div>
        </PageRow>
      </div>

      <div className={classNames(projectcss.all, sty.column__yl32E)}>
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__aePgu)}
          displayHeight={
            hasVariant(globalVariants, "screen", "tabletLandscape")
              ? ("100%" as const)
              : ("auto" as const)
          }
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={
            hasVariant(globalVariants, "screen", "tabletLandscape")
              ? ("100%" as const)
              : ("auto" as const)
          }
          loading={"lazy" as const}
          src={{
            src: "/plasmic/copy_of_sips_by_website/images/image8.png",
            fullWidth: 2330,
            fullHeight: 2538,
            aspectRatio: undefined
          }}
        />
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pageRow", "h2"],
  pageRow: ["pageRow", "h2"],
  h2: ["h2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
  pageRow: typeof PageRow;
  h2: "h2";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWhatYouGetImageColumns__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWhatYouGetImageColumns__VariantsArgs;
    args?: PlasmicWhatYouGetImageColumns__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWhatYouGetImageColumns__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicWhatYouGetImageColumns__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicWhatYouGetImageColumns__ArgProps,
          internalVariantPropNames: PlasmicWhatYouGetImageColumns__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicWhatYouGetImageColumns__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWhatYouGetImageColumns";
  } else {
    func.displayName = `PlasmicWhatYouGetImageColumns.${nodeName}`;
  }
  return func;
}

export const PlasmicWhatYouGetImageColumns = Object.assign(
  // Top-level PlasmicWhatYouGetImageColumns renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageRow: makeNodeComponent("pageRow"),
    h2: makeNodeComponent("h2"),

    // Metadata about props expected for PlasmicWhatYouGetImageColumns
    internalVariantProps: PlasmicWhatYouGetImageColumns__VariantProps,
    internalArgProps: PlasmicWhatYouGetImageColumns__ArgProps
  }
);

export default PlasmicWhatYouGetImageColumns;
/* prettier-ignore-end */
