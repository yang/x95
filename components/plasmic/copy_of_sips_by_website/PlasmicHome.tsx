// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: ncNz7zZumcIgCX
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageRow from "../../PageRow"; // plasmic-import: AKAM4dN1Fw/component
import ButtonLnUpdate from "../../ButtonLnUpdate"; // plasmic-import: W3xFx930gMYiRb/component
import EcommBlockModule from "../../EcommBlockModule"; // plasmic-import: SVsSN17uZItN3m/component
import { Accordian } from "../../../../components/accordian"; // plasmic-import: cCgo9xBVwdcOdS/codeComponent

import { useScreenVariants as useScreenVariants_6PiZsruRybCC } from "../sips_by_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: 6piZsruRybC-C/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: ncNz7zZumcIgCX/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: MpX9BP8blGMfpD/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 4feDHP-bpH6OM4/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: OpQFaS-uHAf6sL/icon

export type PlasmicHome__VariantMembers = {};

export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  hero2?: p.Flex<"section">;
  landingPageDoubleCta4?: p.Flex<"div">;
  heroMobileImage2?: p.Flex<typeof p.PlasmicImg>;
  whatYouGetUpdated?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  landingPageDoubleCta2?: p.Flex<"div">;
  aboutUs?: p.Flex<"div">;
  testimonialsStatic?: p.Flex<"section">;
  seoContentBlock?: p.Flex<"div">;
  landingPageDoubleCta6?: p.Flex<"div">;
  accordian?: p.Flex<typeof Accordian>;
  svg?: p.Flex<"svg">;
};

export interface DefaultHomeProps {}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6PiZsruRybCC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_sips_by_design_system_css.plasmic_tokens,
              sty.root
            )}
          >
            <section
              data-plasmic-name={"hero2"}
              data-plasmic-override={overrides.hero2}
              className={classNames(projectcss.all, sty.hero2)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__vclrW)}>
                <PageRow
                  className={classNames("__wab_instance", sty.pageRow___3Oh54)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___8Pv3I)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__zuCy
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletLandscape")
                        ? "The only tea box tailored to you."
                        : "The only tea box tailored to you."}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zpdZj
                      )}
                    >
                      {
                        "Made by tea lovers, just for you. Four personalized teas for just $16/month."
                      }
                    </div>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"landingPageDoubleCta4"}
                      data-plasmic-override={overrides.landingPageDoubleCta4}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.landingPageDoubleCta4
                      )}
                    >
                      <ButtonLnUpdate
                        buttonColor={"darkPink" as const}
                        className={classNames(
                          "__wab_instance",
                          sty.buttonLnUpdate__vazk8
                        )}
                        link={
                          "/products/personalized-tea-discovery-box" as const
                        }
                      >
                        {"Join Now"}
                      </ButtonLnUpdate>

                      <ButtonLnUpdate
                        buttonColor={"darkPink" as const}
                        className={classNames(
                          "__wab_instance",
                          sty.buttonLnUpdate__dkI6E
                        )}
                        link={"https://m.sipsby.com/p/gift" as const}
                      >
                        {"Give a Gift"}
                      </ButtonLnUpdate>
                    </p.Stack>
                  </p.Stack>
                </PageRow>
              </div>

              <p.PlasmicImg
                data-plasmic-name={"heroMobileImage2"}
                data-plasmic-override={overrides.heroMobileImage2}
                alt={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? ("A m" as const)
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? ("A m" as const)
                    : ("A m" as const)
                }
                className={classNames(sty.heroMobileImage2)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? ("100%" as const)
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? ("100%" as const)
                    : ("50%" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? ("100%" as const)
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? ("100%" as const)
                    : ("100%" as const)
                }
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? ("50%" as const)
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? ("50%" as const)
                    : ("100%" as const)
                }
                loading={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? ("eager" as const)
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? ("eager" as const)
                    : ("eager" as const)
                }
                src={
                  hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? {
                        src: "/plasmic/copy_of_sips_by_website/images/image18.jpeg",
                        fullWidth: 2160,
                        fullHeight: 2475,
                        aspectRatio: undefined
                      }
                    : {
                        src: "/plasmic/copy_of_sips_by_website/images/image18.jpeg",
                        fullWidth: 2160,
                        fullHeight: 2475,
                        aspectRatio: undefined
                      }
                }
              />
            </section>

            <section
              data-plasmic-name={"whatYouGetUpdated"}
              data-plasmic-override={overrides.whatYouGetUpdated}
              className={classNames(projectcss.all, sty.whatYouGetUpdated)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__u64KN)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? "Join the #1 rated tea club"
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? "Gift The #1 rated tea club"
                    : "Join the #1 rated tea club"}
                </h1>

                <div className={classNames(projectcss.all, sty.freeBox__myvkB)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__fFlnA)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__knUxm)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__dDl3M)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        loading={"lazy" as const}
                        src={
                          "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-bag.svg?v=1636499860" as const
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6GUfk
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "desktop")
                          ? "Four new teas personally curated every month"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? "Four new teas personally curated every month"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletPortrait"
                            )
                          ? "Four new teas personally curated every month"
                          : "Four new teas personally curated every month"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__oi1E)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__viS)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        loading={"lazy" as const}
                        src={
                          "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-pot.svg?v=1636499860" as const
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__y5Oh
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "desktop")
                          ? "Access to exclusive tea brands only on Sips by"
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletPortrait"
                            )
                          ? "Access to exclusive tea brands only on Sips by"
                          : "Access to exclusive tea brands only on Sips by"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  {(
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? true
                      : hasVariant(globalVariants, "screen", "tabletPortrait")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2J5Im
                      )}
                    >
                      <p.PlasmicImg
                        alt={"Sips by Box filled with tea samples" as const}
                        className={classNames(sty.img__rvcia)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("362px" as const)
                            : hasVariant(
                                globalVariants,
                                "screen",
                                "tabletLandscape"
                              )
                            ? ("238px" as const)
                            : ("auto" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("545px" as const)
                            : hasVariant(
                                globalVariants,
                                "screen",
                                "tabletLandscape"
                              )
                            ? ("273px" as const)
                            : ("304px" as const)
                        }
                        loading={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("lazy" as const)
                            : ("lazy" as const)
                        }
                        src={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                            : ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                        }
                      />
                    </div>
                  ) : null}

                  {(
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? true
                      : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0Erq6
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dWOo
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__iQwM)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? ("100px" as const)
                              : ("55px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? ("100px" as const)
                              : ("55px" as const)
                          }
                          loading={"lazy" as const}
                          src={
                            "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-teacup.svg?v=1636499860" as const
                          }
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tSo7M
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? "Reusable tea filters for loose teas + brewing tips"
                            : hasVariant(
                                globalVariants,
                                "screen",
                                "tabletPortrait"
                              )
                            ? "Reusable tea filters for loose teas + brewing tips"
                            : "Reusable tea filters for loose teas + brewing tips"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mx037
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__enUtQ)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? ("100px" as const)
                              : ("55px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? ("100px" as const)
                              : ("55px" as const)
                          }
                          loading={"lazy" as const}
                          src={
                            "https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-leaves.svg?v=1636499860" as const
                          }
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__khPro
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "tabletPortrait"
                          )
                            ? "Early access to product launches and sales"
                            : "Early access to product launches and sales"}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  ) : null}

                  {(
                    hasVariant(globalVariants, "screen", "tabletLandscape")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ptzYv)}
                    >
                      <p.PlasmicImg
                        alt={"Sips by Box filled with tea samples" as const}
                        className={classNames(sty.img__eXkkY)}
                        displayHeight={"188px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("214px" as const)
                            : ("214px" as const)
                        }
                        loading={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("lazy" as const)
                            : ("lazy" as const)
                        }
                        src={
                          hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                            ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                            : ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                        }
                      />
                    </div>
                  ) : null}
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"landingPageDoubleCta2"}
                  data-plasmic-override={overrides.landingPageDoubleCta2}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.landingPageDoubleCta2
                  )}
                >
                  <ButtonLnUpdate
                    className={classNames(
                      "__wab_instance",
                      sty.buttonLnUpdate__lBzVx
                    )}
                    link={"/products/personalized-tea-discovery-box" as const}
                  >
                    {"Join Now"}
                  </ButtonLnUpdate>

                  <ButtonLnUpdate
                    className={classNames(
                      "__wab_instance",
                      sty.buttonLnUpdate__aS7IB
                    )}
                    link={"https://m.sipsby.com/p/gift" as const}
                  >
                    {"Give a Gift"}
                  </ButtonLnUpdate>
                </p.Stack>
              </PageRow>
            </section>

            <EcommBlockModule
              className={classNames(
                "__wab_instance",
                sty.ecommBlockModule___1YbZ
              )}
              slot={"Upgrade Your Teaware"}
              slot2={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tsvRi
                  )}
                >
                  {hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? "Explore the cutest teapots, mugs and infusers to upgrade your teatime ritual."
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? "Savor the sweetness of a ripe peach with our newest curated collection."
                    : "Explore the cutest teapots, mugs and infusers to upgrade your teatime ritual."}
                </div>
              }
              slot3={
                <ButtonLnUpdate
                  className={classNames(
                    "__wab_instance",
                    sty.buttonLnUpdate__lSoKt
                  )}
                  link={"/collections/mugs-and-accessories" as const}
                >
                  {"Shop Now"}
                </ButtonLnUpdate>
              }
              swapBlocks={true}
            >
              <p.PlasmicLink
                aria-label={"Upgrade Your Teaware" as const}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__ewTzZ
                )}
                component={Link}
                href={"/collections/mugs-and-accessories" as const}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={" A woman pouring tea from a teapot into a mug" as const}
                  className={classNames(sty.img__mKK3)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_sips_by_website/images/teapot1X1Jpg.jpeg",
                    fullWidth: 2511,
                    fullHeight: 2511,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>
            </EcommBlockModule>

            <EcommBlockModule
              className={classNames(
                "__wab_instance",
                sty.ecommBlockModule__wl2CA
              )}
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0ZJhx
                  )}
                >
                  {"Meet Cookie Tea"}
                </div>
              }
              slot2={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c1Zk1
                  )}
                >
                  {hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? "Brew up all the flavors of your favorite childhood treats in a delicious mug of tea."
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? "Brew up all the flavors of your favorite childhood treats in a delicious mug of tea."
                    : "Brew up all the flavors of your favorite childhood treats in a delicious mug of tea."}
                </div>
              }
              slot3={
                <ButtonLnUpdate
                  className={classNames(
                    "__wab_instance",
                    sty.buttonLnUpdate__uY9Gx
                  )}
                  link={"/collections/cookie-tea" as const}
                >
                  {"Shop Now"}
                </ButtonLnUpdate>
              }
              swapBlocksMobile={
                hasVariant(globalVariants, "screen", "tabletLandscape")
                  ? undefined
                  : hasVariant(globalVariants, "screen", "tabletPortrait")
                  ? undefined
                  : undefined
              }
            >
              <p.PlasmicLink
                aria-label={"Shop cookie tea" as const}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__zKx8
                )}
                component={Link}
                href={"/collections/cookie-tea" as const}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={
                    "Foldable paper box in the shape of a mini oven" as const
                  }
                  className={classNames(sty.img__hUlK9)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_sips_by_website/images/almondCookieHerbal4Ad790D5Da5B4B76A0299Bc0B4C21496Jpg.jpeg",
                    fullWidth: 1646,
                    fullHeight: 1646,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>
            </EcommBlockModule>

            <div
              data-plasmic-name={"aboutUs"}
              data-plasmic-override={overrides.aboutUs}
              className={classNames(projectcss.all, sty.aboutUs)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__t2Vyk)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tkG0E)}
                >
                  <p.PlasmicImg
                    alt={"Cartoon mug of tea decorated with a heart" as const}
                    className={classNames(sty.img__boPyi)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? ("130px" as const)
                        : ("100px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_sips_by_website/images/teaheartmugBlackgif.gif",
                      fullWidth: 568,
                      fullHeight: 2100,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jTKi
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "desktop")
                      ? "Meet Sips by"
                      : "Meet Sips by"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__i7Eg
                    )}
                  >
                    {
                      "Proudly female-founded and led, we love bringing smiles to tea lovers' faces and more day-to-day delight into their kettles and kitchens. Based out of Austin, we're adept at savoring a hot mug even when it’s seasonally inappropriate."
                    }
                  </div>

                  <ButtonLnUpdate
                    className={classNames(
                      "__wab_instance",
                      sty.buttonLnUpdate___0Zn3T
                    )}
                    link={"/pages/about" as const}
                  >
                    {"Learn More About Sips by"}
                  </ButtonLnUpdate>
                </p.Stack>
              </PageRow>
            </div>

            <section
              data-plasmic-name={"testimonialsStatic"}
              data-plasmic-override={overrides.testimonialsStatic}
              className={classNames(projectcss.all, sty.testimonialsStatic)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__j087A)}
              >
                {(
                  hasVariant(globalVariants, "screen", "desktop")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.columns__ylw76)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__q8K6I)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? true
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletPortrait"
                            )
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ysQjL
                          )}
                        >
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2__tGxln
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "desktop")
                              ? "What Sippers Are Saying:"
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletLandscape"
                                )
                              ? "What Sippers Are Saying:"
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletPortrait"
                                )
                              ? "What Sippers Are Saying:"
                              : "What Sippers Are Saying:"}
                          </h2>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qv7
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "desktop")
                              ? "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletLandscape"
                                )
                              ? "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""
                              : "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___1Nton
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "desktop")
                              ? "— Lori D."
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletLandscape"
                                )
                              ? "— Lori D."
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletPortrait"
                                )
                              ? "— Lori D."
                              : "— Lori D."}
                          </div>
                        </div>
                      ) : null}
                    </div>
                  </div>
                ) : null}
              </PageRow>
            </section>

            {true ? (
              <div
                data-plasmic-name={"seoContentBlock"}
                data-plasmic-override={overrides.seoContentBlock}
                className={classNames(projectcss.all, sty.seoContentBlock)}
              >
                <PageRow
                  className={classNames("__wab_instance", sty.pageRow___8KaYh)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns__uRzc2)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "tabletLandscape")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.column___4Wahh
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__tiMko
                          )}
                        >
                          {
                            "Sips by is the best tea subscription, a monthly tea box for your taste"
                          }
                        </h2>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"landingPageDoubleCta6"}
                          data-plasmic-override={
                            overrides.landingPageDoubleCta6
                          }
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.landingPageDoubleCta6
                          )}
                        >
                          <ButtonLnUpdate
                            className={classNames(
                              "__wab_instance",
                              sty.buttonLnUpdate__yotpz
                            )}
                            link={
                              "/products/personalized-tea-discovery-box" as const
                            }
                          >
                            {"Get Started"}
                          </ButtonLnUpdate>

                          <ButtonLnUpdate
                            className={classNames(
                              "__wab_instance",
                              sty.buttonLnUpdate___97QtR
                            )}
                            link={"https://m.sipsby.com/p/gift" as const}
                          >
                            {"Give a Gift"}
                          </ButtonLnUpdate>
                        </p.Stack>
                      </p.Stack>
                    ) : null}

                    {(
                      hasVariant(globalVariants, "screen", "tabletLandscape")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(projectcss.all, sty.column__pBnG)}
                      >
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__oXj04
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kdKq9
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "tabletLandscape"
                              )
                                ? "Join our tea of the month club and you’ll also join our thriving community of tea lovers. Your tea membership will help you find your new favorite sips, access exclusive tea brand offers, and discover ways to enhance your personal tea practice."
                                : "Join our tea of the month club and you’ll also join our thriving community of tea lovers. Your tea membership will help you find your new favorite sips, access exclusive tea brand offers, and discover ways to enhance your personal tea practice. "}
                            </div>

                            <Accordian
                              data-plasmic-name={"accordian"}
                              data-plasmic-override={overrides.accordian}
                              arrow={null}
                              arrowRotationOnOpen={90 as const}
                              arrowSide={"right" as const}
                              className={classNames(
                                "__wab_instance",
                                sty.accordian
                              )}
                              content={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__kWkyg
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>
                                      {
                                        "Our brand partners range from large international brands to local tea shops and farms. As tea lovers ourselves, we know that navigating the world of tea can be daunting - we want to help guide your exploration with our tea of the month club. Choose loose leaf or bagged tea, caffeinated or herbal, or have a mix of each, all unique to your preferences.  \n\nLooking for a thoughtful and personalized gift for tea lovers? Our "
                                      }
                                    </React.Fragment>
                                    {
                                      <p.PlasmicLink
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          projectcss.plasmic_default__inline,
                                          sty.link___13Jo
                                        )}
                                        component={Link}
                                        href={
                                          "/products/personalized-tea-discovery-box" as const
                                        }
                                        platform={"nextjs"}
                                      >
                                        {"monthly tea subscriptions"}
                                      </p.PlasmicLink>
                                    }
                                    <React.Fragment>
                                      {" will make them smile. Purchase a "}
                                    </React.Fragment>
                                    {
                                      <p.PlasmicLink
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          projectcss.plasmic_default__inline,
                                          sty.link__xLv8H
                                        )}
                                        component={Link}
                                        href={
                                          "/products/gift-the-joy-of-tea-discovery" as const
                                        }
                                        platform={"nextjs"}
                                      >
                                        {"Sips by gift card"}
                                      </p.PlasmicLink>
                                    }
                                    <React.Fragment>
                                      {
                                        " or one of our seasonal themed tea boxes.\n\nNot ready to subscribe? Get started with a "
                                      }
                                    </React.Fragment>
                                    {
                                      <p.PlasmicLink
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          projectcss.plasmic_default__inline,
                                          sty.link__ih7IC
                                        )}
                                        component={Link}
                                        href={"/account/register" as const}
                                        platform={"nextjs"}
                                      >
                                        {"free Sips by profile"}
                                      </p.PlasmicLink>
                                    }
                                    <React.Fragment>
                                      {
                                        " to access special brand offers, win free tea, refer friends for rewards, join our tea club of 750,000+ tea lovers on our "
                                      }
                                    </React.Fragment>
                                    {
                                      <p.PlasmicLink
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          projectcss.plasmic_default__inline,
                                          sty.link__rxtt1
                                        )}
                                        component={Link}
                                        href={"/pages/blog" as const}
                                        platform={"nextjs"}
                                      >
                                        {"blog"}
                                      </p.PlasmicLink>
                                    }
                                    <React.Fragment>
                                      {
                                        ", learn more about the best tea subscription box, and shop thousands of teas from hundreds of brands big and small. If you're looking for the best tea around the world, you're in the right place!"
                                      }
                                    </React.Fragment>
                                  </React.Fragment>
                                </div>
                              }
                              defaultOpen={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletLandscape"
                                )
                                  ? false
                                  : true
                              }
                              title={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__w1WcM
                                  )}
                                >
                                  {"Read More"}
                                </div>
                              }
                              titleSide={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "tabletLandscape"
                                )
                                  ? ("center" as const)
                                  : ("center" as const)
                              }
                            />
                          </div>
                        ) : null}

                        <Icon17Icon
                          data-plasmic-name={"svg"}
                          data-plasmic-override={overrides.svg}
                          className={classNames(projectcss.all, sty.svg)}
                          role={"img"}
                        />
                      </div>
                    ) : null}
                  </p.Stack>
                </PageRow>
              </div>
            ) : null}
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero2",
    "landingPageDoubleCta4",
    "heroMobileImage2",
    "whatYouGetUpdated",
    "h1",
    "landingPageDoubleCta2",
    "aboutUs",
    "testimonialsStatic",
    "seoContentBlock",
    "landingPageDoubleCta6",
    "accordian",
    "svg"
  ],
  hero2: ["hero2", "landingPageDoubleCta4", "heroMobileImage2"],
  landingPageDoubleCta4: ["landingPageDoubleCta4"],
  heroMobileImage2: ["heroMobileImage2"],
  whatYouGetUpdated: ["whatYouGetUpdated", "h1", "landingPageDoubleCta2"],
  h1: ["h1"],
  landingPageDoubleCta2: ["landingPageDoubleCta2"],
  aboutUs: ["aboutUs"],
  testimonialsStatic: ["testimonialsStatic"],
  seoContentBlock: [
    "seoContentBlock",
    "landingPageDoubleCta6",
    "accordian",
    "svg"
  ],
  landingPageDoubleCta6: ["landingPageDoubleCta6"],
  accordian: ["accordian"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  hero2: "section";
  landingPageDoubleCta4: "div";
  heroMobileImage2: typeof p.PlasmicImg;
  whatYouGetUpdated: "section";
  h1: "h1";
  landingPageDoubleCta2: "div";
  aboutUs: "div";
  testimonialsStatic: "section";
  seoContentBlock: "div";
  landingPageDoubleCta6: "div";
  accordian: typeof Accordian;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero2: makeNodeComponent("hero2"),
    landingPageDoubleCta4: makeNodeComponent("landingPageDoubleCta4"),
    heroMobileImage2: makeNodeComponent("heroMobileImage2"),
    whatYouGetUpdated: makeNodeComponent("whatYouGetUpdated"),
    h1: makeNodeComponent("h1"),
    landingPageDoubleCta2: makeNodeComponent("landingPageDoubleCta2"),
    aboutUs: makeNodeComponent("aboutUs"),
    testimonialsStatic: makeNodeComponent("testimonialsStatic"),
    seoContentBlock: makeNodeComponent("seoContentBlock"),
    landingPageDoubleCta6: makeNodeComponent("landingPageDoubleCta6"),
    accordian: makeNodeComponent("accordian"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
