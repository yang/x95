// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: 4kfQeMGradRqOK
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./Plasmic_0Readme.module.css"; // plasmic-import: 4kfQeMGradRqOK/css

export type Plasmic_0Readme__VariantMembers = {};

export type Plasmic_0Readme__VariantsArgs = {};
type VariantPropType = keyof Plasmic_0Readme__VariantsArgs;
export const Plasmic_0Readme__VariantProps = new Array<VariantPropType>();

export type Plasmic_0Readme__ArgsType = {};
type ArgPropType = keyof Plasmic_0Readme__ArgsType;
export const Plasmic_0Readme__ArgProps = new Array<ArgPropType>();

export type Plasmic_0Readme__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  text?: p.Flex<"div">;
  ul?: p.Flex<"ul">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface Default_0ReadmeProps {}

function Plasmic_0Readme__RenderFunc(props: {
  variants: Plasmic_0Readme__VariantsArgs;
  args: Plasmic_0Readme__ArgsType;
  overrides: Plasmic_0Readme__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_sips_by_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"README"}
            </h1>
          </div>

          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <ul
                  data-plasmic-name={"ul"}
                  data-plasmic-override={overrides.ul}
                  className={classNames(projectcss.all, projectcss.ul, sty.ul)}
                >
                  <li
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      projectcss.__wab_text,
                      sty.li__teeM9
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {"Many pages in plasmic are "}
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"live "}
                      </span>
                      <React.Fragment>
                        {"on production\n. Be careful when making changes. "}
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ textDecorationLine: "underline" }}
                      >
                        {
                          "Any changes you make could be deployed at any time by other people"
                        }
                      </span>
                      <React.Fragment> </React.Fragment>
                    </React.Fragment>
                  </li>

                  <li
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      projectcss.__wab_text,
                      sty.li__lpr3K
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {"Naming conventions / what pages are active: "}
                      </React.Fragment>
                      {
                        <p.PlasmicLink
                          data-plasmic-name={"link"}
                          data-plasmic-override={overrides.link}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link
                          )}
                          component={Link}
                          href={
                            "https://docs.google.com/spreadsheets/d/1GE9RDY1t1t8TFnGgjUv38q9HdKqx6cWJFxmh_FsYuLk/edit#gid=0" as const
                          }
                          platform={"nextjs"}
                        >
                          {"LINK"}
                        </p.PlasmicLink>
                      }
                      <React.Fragment> </React.Fragment>
                    </React.Fragment>
                  </li>
                </ul>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "h1", "text", "ul", "link"],
  freeBox: ["freeBox", "h1"],
  h1: ["h1"],
  text: ["text", "ul", "link"],
  ul: ["ul", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  h1: "h1";
  text: "div";
  ul: "ul";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic_0Readme__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic_0Readme__VariantsArgs;
    args?: Plasmic_0Readme__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic_0Readme__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<Plasmic_0Readme__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: Plasmic_0Readme__ArgProps,
          internalVariantPropNames: Plasmic_0Readme__VariantProps
        }),
      [props, nodeName]
    );

    return Plasmic_0Readme__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_0Readme";
  } else {
    func.displayName = `Plasmic_0Readme.${nodeName}`;
  }
  return func;
}

export const Plasmic_0Readme = Object.assign(
  // Top-level Plasmic_0Readme renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    ul: makeNodeComponent("ul"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for Plasmic_0Readme
    internalVariantProps: Plasmic_0Readme__VariantProps,
    internalArgProps: Plasmic_0Readme__ArgProps
  }
);

export default Plasmic_0Readme;
/* prettier-ignore-end */
