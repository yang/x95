// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s9FtU1QqNRpfuTCYMk46sz
// Component: XHvXd3uVfF2oUi
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageRow from "../../PageRow"; // plasmic-import: AKAM4dN1Fw/component
import SectionMetricsMetric from "../../SectionMetricsMetric"; // plasmic-import: sW6svfkibZkesa/component
import Faq from "../../Faq"; // plasmic-import: myilu9wkwV/component
import FaqQuestion from "../../FaqQuestion"; // plasmic-import: 6NoymXHwcF/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent
import { ContentOnHover } from "../../../../components/contentonhover"; // plasmic-import: Q7v4G60Gqx2JfX/codeComponent

import { useScreenVariants as useScreenVariants_6PiZsruRybCC } from "../sips_by_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: 6piZsruRybC-C/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_sips_by_design_system_css from "../sips_by_design_system/plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import projectcss from "./plasmic_copy_of_sips_by_website.module.css"; // plasmic-import: s9FtU1QqNRpfuTCYMk46sz/projectcss
import sty from "./PlasmicPdpPersonalizedTeaDiscoveryBox.module.css"; // plasmic-import: XHvXd3uVfF2oUi/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Id8KGjLkdQoXxj/icon
import BuzzFeedOnWhitesvgIcon from "./icons/PlasmicIcon__BuzzFeedOnWhitesvg"; // plasmic-import: yjRsogMQK2JuLx/icon
import Layer1SvgIcon from "./icons/PlasmicIcon__Layer1Svg"; // plasmic-import: e-kCsG3zM6OO-z/icon
import GroupsvgIcon from "./icons/PlasmicIcon__Groupsvg"; // plasmic-import: IridhowzujR8_J/icon

export type PlasmicPdpPersonalizedTeaDiscoveryBox__VariantMembers = {};

export type PlasmicPdpPersonalizedTeaDiscoveryBox__VariantsArgs = {};
type VariantPropType =
  keyof PlasmicPdpPersonalizedTeaDiscoveryBox__VariantsArgs;
export const PlasmicPdpPersonalizedTeaDiscoveryBox__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPdpPersonalizedTeaDiscoveryBox__ArgsType = {};
type ArgPropType = keyof PlasmicPdpPersonalizedTeaDiscoveryBox__ArgsType;
export const PlasmicPdpPersonalizedTeaDiscoveryBox__ArgProps =
  new Array<ArgPropType>();

export type PlasmicPdpPersonalizedTeaDiscoveryBox__OverridesType = {
  root?: p.Flex<"div">;
  whatYouGetUpdated2?: p.Flex<"section">;
  metricsUpdated2?: p.Flex<"section">;
  testimonialsStatic?: p.Flex<"section">;
  faQs?: p.Flex<"div">;
  faq?: p.Flex<typeof Faq>;
  pressSlider?: p.Flex<"section">;
  contentOnHover?: p.Flex<typeof ContentOnHover>;
  buzzfeed2?: p.Flex<"div">;
  huffpost2?: p.Flex<"div">;
  usatoday2?: p.Flex<"div">;
};

export interface DefaultPdpPersonalizedTeaDiscoveryBoxProps {}

function PlasmicPdpPersonalizedTeaDiscoveryBox__RenderFunc(props: {
  variants: PlasmicPdpPersonalizedTeaDiscoveryBox__VariantsArgs;
  args: PlasmicPdpPersonalizedTeaDiscoveryBox__ArgsType;
  overrides: PlasmicPdpPersonalizedTeaDiscoveryBox__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6PiZsruRybCC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_sips_by_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"whatYouGetUpdated2"}
            data-plasmic-override={overrides.whatYouGetUpdated2}
            className={classNames(projectcss.all, sty.whatYouGetUpdated2)}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow__m7Iax)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2___0Wa0D
                )}
              >
                {hasVariant(globalVariants, "screen", "tabletLandscape")
                  ? "Join the #1 rated tea club"
                  : hasVariant(globalVariants, "screen", "tabletPortrait")
                  ? "Gift the #1 rated tea club"
                  : "Join the #1 rated tea club"}
              </h2>

              <div className={classNames(projectcss.all, sty.freeBox__myvkB)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fFlnA)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__knUxm)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__dDl3M)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("100px" as const)
                          : ("55px" as const)
                      }
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("100%" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("100px" as const)
                          : ("55px" as const)
                      }
                      loading={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("lazy" as const)
                          : ("lazy" as const)
                      }
                      src={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-bag.svg?v=1636499860" as const)
                          : ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-bag.svg?v=1636499860" as const)
                      }
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6GUfk
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletLandscape")
                        ? "Four new premium teas monthly, chosen for you"
                        : "Four new premium teas monthly, chosen just for you"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__oi1E)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__viS)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("100px" as const)
                          : ("55px" as const)
                      }
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("100%" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("100px" as const)
                          : ("55px" as const)
                      }
                      loading={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("lazy" as const)
                          : ("lazy" as const)
                      }
                      src={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-pot.svg?v=1636499860" as const)
                          : ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-pot.svg?v=1636499860" as const)
                      }
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__y5Oh
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletLandscape")
                        ? "Discover the world's best tea brands, big and small"
                        : "Discover the world's best tea brands, big and small"}
                    </div>
                  </p.Stack>
                </p.Stack>

                {(
                  hasVariant(globalVariants, "screen", "desktop")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2J5Im)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__rvcia)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("100%" as const)
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? ("100%" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("545px" as const)
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? ("100%" as const)
                          : ("214px" as const)
                      }
                      loading={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("lazy" as const)
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? ("lazy" as const)
                          : ("lazy" as const)
                      }
                      src={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                          : hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                          ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                          : ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                      }
                    />
                  </div>
                ) : null}

                {(
                  hasVariant(globalVariants, "screen", "desktop")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___0Erq6)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__dWOo)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__iQwM)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        loading={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("lazy" as const)
                            : ("lazy" as const)
                        }
                        src={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-teacup.svg?v=1636499860" as const)
                            : ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-teacup.svg?v=1636499860" as const)
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tSo7M
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? "Biodegradable tea filters, and expert brewing tips"
                          : "Biodegradable tea filters, and expert brewing tips"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__mx037)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__enUtQ)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("100px" as const)
                            : ("55px" as const)
                        }
                        loading={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("lazy" as const)
                            : ("lazy" as const)
                        }
                        src={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-leaves.svg?v=1636499860" as const)
                            : ("https://cdn.shopify.com/s/files/1/1677/2601/files/illustration-tea-leaves.svg?v=1636499860" as const)
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__khPro
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? "Member's Only Perks and Tea Parties"
                          : "Steep Society free shipping, exclusive perks + tea parties"}
                      </div>
                    </p.Stack>
                  </p.Stack>
                ) : null}

                {(
                  hasVariant(globalVariants, "screen", "desktop")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletLandscape")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletPortrait")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ptzYv)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__eXkkY)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("100%" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("214px" as const)
                          : ("214px" as const)
                      }
                      loading={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("lazy" as const)
                          : ("lazy" as const)
                      }
                      src={
                        hasVariant(globalVariants, "screen", "tabletLandscape")
                          ? ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                          : ("https://cdn.shopify.com/s/files/1/1677/2601/files/animation-sips-by-box-60.gif?v=1636653547" as const)
                      }
                    />
                  </div>
                ) : null}
              </div>
            </PageRow>
          </section>

          <section
            data-plasmic-name={"metricsUpdated2"}
            data-plasmic-override={overrides.metricsUpdated2}
            className={classNames(projectcss.all, sty.metricsUpdated2)}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow__fH0Ha)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns___0Fv8J)}
              >
                <div className={classNames(projectcss.all, sty.column__mFuMn)}>
                  <SectionMetricsMetric
                    className={classNames(
                      "__wab_instance",
                      sty.sectionMetricsMetric___9HBvn
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aI2Hv
                        )}
                      >
                        {"happy members"}
                      </div>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sbvct
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletLandscape")
                        ? "1m"
                        : "1m+"}
                    </div>
                  </SectionMetricsMetric>
                </div>

                <div className={classNames(projectcss.all, sty.column__fQ7Wb)}>
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__zr5Wa)}
                    role={"img"}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__tm22G)}>
                  <SectionMetricsMetric
                    className={classNames(
                      "__wab_instance",
                      sty.sectionMetricsMetric__aHcU
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__s6Aff
                        )}
                      >
                        {"best tea brands"}
                      </div>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__slI3L
                      )}
                    >
                      {"100+"}
                    </div>
                  </SectionMetricsMetric>
                </div>

                <div className={classNames(projectcss.all, sty.column__sc6GX)}>
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__qw6Vw)}
                    role={"img"}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__gnSUd)}>
                  <SectionMetricsMetric
                    className={classNames(
                      "__wab_instance",
                      sty.sectionMetricsMetric__jVFop
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kqhwv
                        )}
                      >
                        {"premium teas"}
                      </div>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__p8UZl
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "desktop")
                        ? "1k"
                        : hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                        ? "1k"
                        : "1,000+"}
                    </div>
                  </SectionMetricsMetric>
                </div>
              </p.Stack>
            </PageRow>
          </section>

          <section
            data-plasmic-name={"testimonialsStatic"}
            data-plasmic-override={overrides.testimonialsStatic}
            className={classNames(projectcss.all, sty.testimonialsStatic)}
          >
            <PageRow
              className={classNames("__wab_instance", sty.pageRow__ibfyO)}
            >
              {(
                hasVariant(globalVariants, "screen", "desktop")
                  ? true
                  : hasVariant(globalVariants, "screen", "tabletLandscape")
                  ? true
                  : hasVariant(globalVariants, "screen", "tabletPortrait")
                  ? true
                  : true
              ) ? (
                <div className={classNames(projectcss.all, sty.columns__uLpUs)}>
                  <div
                    className={classNames(projectcss.all, sty.column___87AHq)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "desktop")
                        ? true
                        : hasVariant(
                            globalVariants,
                            "screen",
                            "tabletLandscape"
                          )
                        ? true
                        : hasVariant(globalVariants, "screen", "tabletPortrait")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qYLdb
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2___2Ban
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "desktop")
                            ? "What Sippers Are Saying:"
                            : hasVariant(
                                globalVariants,
                                "screen",
                                "tabletLandscape"
                              )
                            ? "What Sippers Are Saying:"
                            : hasVariant(
                                globalVariants,
                                "screen",
                                "tabletPortrait"
                              )
                            ? "What Sippers Are Saying:"
                            : "What Sippers Are Saying:"}
                        </h2>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jNkEm
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "desktop")
                            ? "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""
                            : "\"It's like you know me! I loved all of the choices in my very first box. I can't wait for the next one!\""}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jYNtd
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "desktop")
                            ? "— Lori D."
                            : hasVariant(
                                globalVariants,
                                "screen",
                                "tabletLandscape"
                              )
                            ? "— Lori D."
                            : hasVariant(
                                globalVariants,
                                "screen",
                                "tabletPortrait"
                              )
                            ? "— Lori D."
                            : "— Lori D."}
                        </div>
                      </div>
                    ) : null}
                  </div>
                </div>
              ) : null}
            </PageRow>
          </section>

          {true ? (
            <div
              data-plasmic-name={"faQs"}
              data-plasmic-override={overrides.faQs}
              className={classNames(projectcss.all, sty.faQs)}
              id={"pl-section-faq" as const}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__hn9Kj)}
                width={"reduced" as const}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__ztgKc
                  )}
                >
                  {"Frequently Asked Questions"}
                </h2>

                <Faq
                  data-plasmic-name={"faq"}
                  data-plasmic-override={overrides.faq}
                  className={classNames("__wab_instance", sty.faq)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2MgIf
                      )}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__px0Ug
                          )}
                        >
                          <FaqQuestion
                            className={classNames(
                              "__wab_instance",
                              sty.faqQuestion__dFKcJ
                            )}
                          >
                            <Embed
                              className={classNames(
                                "__wab_instance",
                                sty.embedHtml__fHy6E
                              )}
                              code={
                                "<details>\n  <summary>\n    <h3>How does the subscription work?</h3>\n  </summary>\n  <div>\n    <p>\n      Sips by is a female-founded and led startup that makes discovering tea fun, personalized, and affordable.\n<br><br>The Sips by Box is the only personalized, multi-brand tea subscription box. Each month, we take pride in matching you\nwith premium teas and brands based on your unique Steep Taste Profile. \n      <br><br>\nOur brand partners range from large international brands to local tea shops and farms. Navigating the wide world\nof tea can be daunting – we want to help guide your exploration. \n\n<br><br><strong>Three Steps to Your Tea Journey</strong> <br><br>\n<strong>1)</strong> Take the tea quiz to choose loose leaf or bagged tea, caffeinated or\nherbal, or a mix of each, all unique to your preferences, and much more. What’s your path to tea? Let us be your compass. \n<br><br>\n<strong>2)</strong> Your personalized tea selections will ship free to your door. Cancel your plans, break out your favorite mug, and unwind. Cheers! \n<br><br>\n<strong>3)</strong> After you taste your teas, login to your Profile and rate each tea. You can even let us know how you felt about the specific attributes and flavors of each tea.\nThe more you share, the better we're able to learn your tastes and personalize for you.\n<br><br>\n<strong>Don't Forget Perks!</strong> As a subscriber, you’ll get free Sips by Box shipping each month, exclusive access to virtual tea parties, and special deals to shop your teas. You’ll also get access to personalized tea recommendations to help you discover your best match teas in our tea shop. We're excited to welcome you to the Steep Society!\n</p>\n  </div>\n</details>" as const
                              }
                            />
                          </FaqQuestion>
                        </div>
                      ) : null}

                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ieOeB
                          )}
                        >
                          <FaqQuestion
                            className={classNames(
                              "__wab_instance",
                              sty.faqQuestion__bChGs
                            )}
                          >
                            <Embed
                              className={classNames(
                                "__wab_instance",
                                sty.embedHtml__ooIh9
                              )}
                              code={
                                "<details>\n  <summary>\n    <h3>How do you pick my tea matches?</h3>\n  </summary>\n  <div>\n     <p>\n       We take personalization seriously.  \n<br><br>\nWe look at hundreds of attributes surrounding your unique profile, including your answers to the tea quiz, product ratings, comments, and notes in order to select the best matches just for you. \n<br><br>It's human-powered personalization supported by Steep, our deep learning platform. Steep uses a suite of algorithms to determine which of the thousands of teas in our portfolio are your perfect match. Steep is constantly evolving, guided by tea experts and our TEAm of tea lovers, ensuring the tea journey of a lifetime.\n<br><br> We call it tea magic.<br><br>\n</p>\n  </div>\n</details>" as const
                              }
                            />
                          </FaqQuestion>
                        </div>
                      ) : null}

                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__txGrO
                          )}
                        >
                          <FaqQuestion
                            className={classNames(
                              "__wab_instance",
                              sty.faqQuestion__yI8P6
                            )}
                          >
                            <Embed
                              className={classNames(
                                "__wab_instance",
                                sty.embedHtml__nAaPa
                              )}
                              code={
                                "<details>\n  <summary>\n    <h3>How do you pick tea brands?</h3>\n  </summary>\n  <div>\n     <p>\nWe work with more than one hundred of the best tea brands from all around the world, including large global brands, local tea shops, and tea farms. We love discovering brands that source hidden gems from around the world and brands who create their own delicious, hand-crafted blends.\n<br><br>\nAs a female-founded business, we curate brands that align to our values. Brand Partners include female-owned, BIPOC-owned, LGBTQIA-owned, and small business brands. More than fifty of our Brand Partners are owner-operated and hand-pack each tea they share with our subscribers. We love brands that have a unique story and we value ethical sourcing and sustainable practices. We work with the brands whose offerings can provide the breadth and depth of quality teas necessary to delight your unique tastes.\n<br>\n<br><strong>Exclusive to Sips by</strong><br>\nWe have developed product lines exclusive to Sips by Members, including Cookie Tea, Tea Kitten, Tiny Bee Tea, Magic Moon, and more. We focus on creating blends that our Members will love, with trending ingredients, botanicals for wellbeing, and delicious flavor profiles.\n<br>\n<br><strong>Your Feedback Guides Our Portfolio</strong><br>\nLove a tea? Let us know. Hate a tea? Let us know that, too. Each year, we curate our portfolio to ensure we only include top-rated teas.\n</p>\n  </div>\n</details>" as const
                              }
                            />
                          </FaqQuestion>
                        </div>
                      ) : null}

                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__fgOw7
                          )}
                        >
                          <FaqQuestion
                            className={classNames(
                              "__wab_instance",
                              sty.faqQuestion__iRtSo
                            )}
                          >
                            <Embed
                              className={classNames(
                                "__wab_instance",
                                sty.embedHtml__vm5Tr
                              )}
                              code={
                                '<details>\n  <summary>\n    <h3>How do I track my order?</h3>\n  </summary>\n  <div>\n    <p>\n      <a href="/account">Click here to track your order</a>. \n     <br><br>\n     <strong>How long?</strong><br>\n     Great personalization takes time! \n    Please allow up to three weeks for your initial order. \n      Subsequent orders will arrive between two to three weeks after the order is processed.\n      <br><br>\n      \n      </p>\n  </div>\n</details>' as const
                              }
                            />
                          </FaqQuestion>
                        </div>
                      ) : null}

                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mxWp
                          )}
                        >
                          <FaqQuestion
                            className={classNames(
                              "__wab_instance",
                              sty.faqQuestion__cIbEu
                            )}
                          >
                            <Embed
                              className={classNames(
                                "__wab_instance",
                                sty.embedHtml__dm9VT
                              )}
                              code={
                                '<details>\n  <summary>\n    <h3>How will I be charged?</h3>\n  </summary>\n  <div>\n    <p>\n  Once you subscribe, we will process your initial payment. \n  <br>\n  <br>\n  Your Subscription auto-renews, so we will continue to automatically process your Subscription fee on the Anniversary Date of each month after you received your Full Subscription Term (e.g. 1-Month, 3-Months).\n  <br>\n  <br>\n  Your auto-renewing Subscription will be charged at the Then-current Monthly Subscription Rate, \n    subject to terms of any corporate-approved promotional codes used, until you cancel your Subscription. \n    We explain how to cancel your Subscription <a href="/pages/purchase-terms">here</a>.\n    "Then-current Subscription Rate" is defined as the non-discounted Subscription Rate at the time of purchase. \n<br>\n<br>\nWe may adjust the Anniversary Date +/-9 days in order to keep you in the same order fulfillment month \ngiven the manner in which holiday schedules and logistics unfold.\n<br><br>\n<a href="/pages/purchase-terms">Click here to read more.</a>\n<br>\n<a href="mailto:tealover@sipsby.com"> Click here to email us.</a> \n</p>\n  </div>\n</details>' as const
                              }
                            />
                          </FaqQuestion>
                        </div>
                      ) : null}

                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__o5Hl4
                          )}
                        >
                          <FaqQuestion
                            className={classNames(
                              "__wab_instance",
                              sty.faqQuestion__udqNa
                            )}
                          >
                            <Embed
                              className={classNames(
                                "__wab_instance",
                                sty.embedHtml__bvOmY
                              )}
                              code={
                                '<details>\n  <summary>\n    <h3>How do I manage my subscription?</h3>\n  </summary>\n  <div>\n    <p>If you\'re looking to update your Taste Profile, change your shipping or billing information, or skip a month of or cancel your Subscription, <a href="https://www.sipsby.com/pages/purchase-terms">click here</a>.</p>\n  </div>\n</details>' as const
                              }
                            />
                          </FaqQuestion>
                        </div>
                      ) : null}
                    </p.Stack>
                  ) : null}
                </Faq>
              </PageRow>
            </div>
          ) : null}

          {true ? (
            <section
              data-plasmic-name={"pressSlider"}
              data-plasmic-override={overrides.pressSlider}
              className={classNames(projectcss.all, sty.pressSlider)}
            >
              <PageRow
                className={classNames("__wab_instance", sty.pageRow__yKtfe)}
              >
                <ContentOnHover
                  data-plasmic-name={"contentOnHover"}
                  data-plasmic-override={overrides.contentOnHover}
                  buttons={
                    <PageRow
                      className={classNames(
                        "__wab_instance",
                        sty.pageRow__gBadm
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.columns___0FnJr
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__euvhI
                          )}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__zsQ5D
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            <p.PlasmicIcon
                              PlasmicIconType={
                                hasVariant(globalVariants, "screen", "desktop")
                                  ? BuzzFeedOnWhitesvgIcon
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? BuzzFeedOnWhitesvgIcon
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? BuzzFeedOnWhitesvgIcon
                                  : BuzzFeedOnWhitesvgIcon
                              }
                              className={classNames(
                                projectcss.all,
                                sty.svg__g7PHx
                              )}
                              role={"img"}
                            />
                          </p.PlasmicLink>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__aAQrd
                          )}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__fbkqm
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            <p.PlasmicIcon
                              PlasmicIconType={
                                hasVariant(globalVariants, "screen", "desktop")
                                  ? Layer1SvgIcon
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletLandscape"
                                    )
                                  ? Layer1SvgIcon
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "tabletPortrait"
                                    )
                                  ? Layer1SvgIcon
                                  : Layer1SvgIcon
                              }
                              className={classNames(
                                projectcss.all,
                                sty.svg__lPtQf
                              )}
                              role={"img"}
                            />
                          </p.PlasmicLink>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__ssAnz
                          )}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__fqx32
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            <p.PlasmicIcon
                              PlasmicIconType={
                                hasVariant(globalVariants, "screen", "desktop")
                                  ? GroupsvgIcon
                                  : GroupsvgIcon
                              }
                              className={classNames(
                                projectcss.all,
                                sty.svg__qvFy1
                              )}
                              role={"img"}
                            />
                          </p.PlasmicLink>
                        </div>
                      </p.Stack>
                    </PageRow>
                  }
                  className={classNames("__wab_instance", sty.contentOnHover)}
                  defaultDisplay={1 as const}
                  displays={
                    <React.Fragment>
                      {true ? (
                        <div
                          data-plasmic-name={"buzzfeed2"}
                          data-plasmic-override={overrides.buzzfeed2}
                          className={classNames(projectcss.all, sty.buzzfeed2)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lX9Rh
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "tabletLandscape"
                            )
                              ? '"Perfect for any tea drinker who wants to mix up their go-to flavors with personalized, carefully selected options each month."'
                              : '"Perfect for any tea drinker who wants personalized, carefully selected options each month."\n'}
                          </div>
                        </div>
                      ) : null}

                      {true ? (
                        <div
                          data-plasmic-name={"huffpost2"}
                          data-plasmic-override={overrides.huffpost2}
                          className={classNames(projectcss.all, sty.huffpost2)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___00SeZ
                            )}
                          >
                            {' "An absolute must for all tea devotees."'}
                          </div>
                        </div>
                      ) : null}

                      {true ? (
                        <div
                          data-plasmic-name={"usatoday2"}
                          data-plasmic-override={overrides.usatoday2}
                          className={classNames(projectcss.all, sty.usatoday2)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0Kkyz
                            )}
                          >
                            {
                              '"We love the adorable packaging and wide variety of teas they delivered."'
                            }
                          </div>
                        </div>
                      ) : null}
                    </React.Fragment>
                  }
                />
              </PageRow>
            </section>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "whatYouGetUpdated2",
    "metricsUpdated2",
    "testimonialsStatic",
    "faQs",
    "faq",
    "pressSlider",
    "contentOnHover",
    "buzzfeed2",
    "huffpost2",
    "usatoday2"
  ],
  whatYouGetUpdated2: ["whatYouGetUpdated2"],
  metricsUpdated2: ["metricsUpdated2"],
  testimonialsStatic: ["testimonialsStatic"],
  faQs: ["faQs", "faq"],
  faq: ["faq"],
  pressSlider: [
    "pressSlider",
    "contentOnHover",
    "buzzfeed2",
    "huffpost2",
    "usatoday2"
  ],
  contentOnHover: ["contentOnHover", "buzzfeed2", "huffpost2", "usatoday2"],
  buzzfeed2: ["buzzfeed2"],
  huffpost2: ["huffpost2"],
  usatoday2: ["usatoday2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  whatYouGetUpdated2: "section";
  metricsUpdated2: "section";
  testimonialsStatic: "section";
  faQs: "div";
  faq: typeof Faq;
  pressSlider: "section";
  contentOnHover: typeof ContentOnHover;
  buzzfeed2: "div";
  huffpost2: "div";
  usatoday2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPdpPersonalizedTeaDiscoveryBox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPdpPersonalizedTeaDiscoveryBox__VariantsArgs;
    args?: PlasmicPdpPersonalizedTeaDiscoveryBox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicPdpPersonalizedTeaDiscoveryBox__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicPdpPersonalizedTeaDiscoveryBox__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPdpPersonalizedTeaDiscoveryBox__ArgProps,
          internalVariantPropNames:
            PlasmicPdpPersonalizedTeaDiscoveryBox__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPdpPersonalizedTeaDiscoveryBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPdpPersonalizedTeaDiscoveryBox";
  } else {
    func.displayName = `PlasmicPdpPersonalizedTeaDiscoveryBox.${nodeName}`;
  }
  return func;
}

export const PlasmicPdpPersonalizedTeaDiscoveryBox = Object.assign(
  // Top-level PlasmicPdpPersonalizedTeaDiscoveryBox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    whatYouGetUpdated2: makeNodeComponent("whatYouGetUpdated2"),
    metricsUpdated2: makeNodeComponent("metricsUpdated2"),
    testimonialsStatic: makeNodeComponent("testimonialsStatic"),
    faQs: makeNodeComponent("faQs"),
    faq: makeNodeComponent("faq"),
    pressSlider: makeNodeComponent("pressSlider"),
    contentOnHover: makeNodeComponent("contentOnHover"),
    buzzfeed2: makeNodeComponent("buzzfeed2"),
    huffpost2: makeNodeComponent("huffpost2"),
    usatoday2: makeNodeComponent("usatoday2"),

    // Metadata about props expected for PlasmicPdpPersonalizedTeaDiscoveryBox
    internalVariantProps: PlasmicPdpPersonalizedTeaDiscoveryBox__VariantProps,
    internalArgProps: PlasmicPdpPersonalizedTeaDiscoveryBox__ArgProps
  }
);

export default PlasmicPdpPersonalizedTeaDiscoveryBox;
/* prettier-ignore-end */
