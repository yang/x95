// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mrgn3VC2r6s7VB3wKPe7xp
// Component: 6NoymXHwcF
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import sty from "./PlasmicFaqQuestion.module.css"; // plasmic-import: 6NoymXHwcF/css

export type PlasmicFaqQuestion__VariantMembers = {};

export type PlasmicFaqQuestion__VariantsArgs = {};
type VariantPropType = keyof PlasmicFaqQuestion__VariantsArgs;
export const PlasmicFaqQuestion__VariantProps = new Array<VariantPropType>();

export type PlasmicFaqQuestion__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicFaqQuestion__ArgsType;
export const PlasmicFaqQuestion__ArgProps = new Array<ArgPropType>("children");

export type PlasmicFaqQuestion__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultFaqQuestionProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicFaqQuestion__RenderFunc(props: {
  variants: PlasmicFaqQuestion__VariantsArgs;
  args: PlasmicFaqQuestion__ArgsType;
  overrides: PlasmicFaqQuestion__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        "sb-plasmic-details" as const
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <Embed
            className={classNames("__wab_instance", sty.embedHtml__zKeWj)}
            code={
              "<details>\n  <summary>\n    <h3>Lorem ipsum dolor sit amet consectetur adipisicing elit?</h3>\n  </summary>\n  <div>\n    <p>Repellendus explicabo commodi facere labore voluptatibus, porro harum magnam provident vel aliquid ab hic quibusdam voluptates! Laudantium voluptatibus officia dolorum ex nemo.</p>\n  </div>\n</details>" as const
            }
          />
        ),

        value: args.children
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFaqQuestion__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFaqQuestion__VariantsArgs;
    args?: PlasmicFaqQuestion__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFaqQuestion__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFaqQuestion__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFaqQuestion__ArgProps,
          internalVariantPropNames: PlasmicFaqQuestion__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFaqQuestion__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaqQuestion";
  } else {
    func.displayName = `PlasmicFaqQuestion.${nodeName}`;
  }
  return func;
}

export const PlasmicFaqQuestion = Object.assign(
  // Top-level PlasmicFaqQuestion renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicFaqQuestion
    internalVariantProps: PlasmicFaqQuestion__VariantProps,
    internalArgProps: PlasmicFaqQuestion__ArgProps
  }
);

export default PlasmicFaqQuestion;
/* prettier-ignore-end */
