// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mrgn3VC2r6s7VB3wKPe7xp
// Component: weX-svCA-Q
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: CmagQTLSXwI/component
import Button from "../../Button"; // plasmic-import: sw7k7LkFBTC/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_sips_by_design_system.module.css"; // plasmic-import: mrgn3VC2r6s7VB3wKPe7xp/projectcss
import sty from "./PlasmicRegisterFormDesign.module.css"; // plasmic-import: weX-svCA-Q/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: P0ml95HOX2-/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: cFH4ysruE7k/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: XuqNxn7mH8d/icon

export type PlasmicRegisterFormDesign__VariantMembers = {};

export type PlasmicRegisterFormDesign__VariantsArgs = {};
type VariantPropType = keyof PlasmicRegisterFormDesign__VariantsArgs;
export const PlasmicRegisterFormDesign__VariantProps =
  new Array<VariantPropType>();

export type PlasmicRegisterFormDesign__ArgsType = {};
type ArgPropType = keyof PlasmicRegisterFormDesign__ArgsType;
export const PlasmicRegisterFormDesign__ArgProps = new Array<ArgPropType>();

export type PlasmicRegisterFormDesign__OverridesType = {
  root?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  firstName?: p.Flex<typeof TextInput>;
  email?: p.Flex<typeof TextInput>;
  passwordLabel?: p.Flex<"div">;
  email2?: p.Flex<typeof TextInput>;
  button?: p.Flex<typeof Button>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultRegisterFormDesignProps {
  className?: string;
}

function PlasmicRegisterFormDesign__RenderFunc(props: {
  variants: PlasmicRegisterFormDesign__VariantsArgs;
  args: PlasmicRegisterFormDesign__ArgsType;
  overrides: PlasmicRegisterFormDesign__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <h1
        data-plasmic-name={"h1"}
        data-plasmic-override={overrides.h1}
        className={classNames(
          projectcss.all,
          projectcss.h1,
          projectcss.__wab_text,
          sty.h1
        )}
      >
        {"GET YOUR BOX"}
      </h1>

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__lMkez
        )}
      >
        <React.Fragment>
          <React.Fragment>
            {
              "Welcome to the best tea club!  Take the quiz, get your own personalized Sips by Box, and access brand offers + giveaways by creating your "
            }
          </React.Fragment>
          <span
            className={"plasmic_default__all plasmic_default__span"}
            style={{ fontWeight: 700 }}
          >
            {"FREE"}
          </span>
          <React.Fragment>{" tea profile now!"}</React.Fragment>
        </React.Fragment>
      </div>

      <div className={classNames(projectcss.all, sty.freeBox___7TyZk)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___7EhRi
          )}
        >
          {"First Name"}
        </div>

        <TextInput
          data-plasmic-name={"firstName"}
          data-plasmic-override={overrides.firstName}
          className={classNames("__wab_instance", sty.firstName)}
          placeholder={" " as const}
          required={true}
        />
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__yc7Ct)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ty7Br
          )}
        >
          {"Email"}
        </div>

        <TextInput
          data-plasmic-name={"email"}
          data-plasmic-override={overrides.email}
          className={classNames("__wab_instance", sty.email)}
          placeholder={" " as const}
          required={true}
        />
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__vI7V)}>
        <div
          data-plasmic-name={"passwordLabel"}
          data-plasmic-override={overrides.passwordLabel}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.passwordLabel
          )}
        >
          {"Password"}
        </div>

        <TextInput
          data-plasmic-name={"email2"}
          data-plasmic-override={overrides.email2}
          aria-label={"passwordLabel" as const}
          aria-labelledby={"passwordLabel" as const}
          className={classNames("__wab_instance", sty.email2)}
          placeholder={" " as const}
          required={true}
        />
      </div>

      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
      >
        {"CREATE MY FREE TEA PROFILE NOW"}
      </Button>

      <div className={classNames(projectcss.all, sty.freeBox__i9Rfr)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__zmr9M
          )}
        >
          {
            "In creating my tea profile, I acknowledge I have read and agree to the "
          }
        </div>

        <p.PlasmicLink
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.link
          )}
          component={Link}
          href={"https://www.plasmic.app/" as const}
          platform={"nextjs"}
        >
          {"Some link text"}
        </p.PlasmicLink>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "firstName",
    "email",
    "passwordLabel",
    "email2",
    "button",
    "link"
  ],
  h1: ["h1"],
  firstName: ["firstName"],
  email: ["email"],
  passwordLabel: ["passwordLabel"],
  email2: ["email2"],
  button: ["button"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  firstName: typeof TextInput;
  email: typeof TextInput;
  passwordLabel: "div";
  email2: typeof TextInput;
  button: typeof Button;
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRegisterFormDesign__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRegisterFormDesign__VariantsArgs;
    args?: PlasmicRegisterFormDesign__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRegisterFormDesign__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRegisterFormDesign__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRegisterFormDesign__ArgProps,
          internalVariantPropNames: PlasmicRegisterFormDesign__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicRegisterFormDesign__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRegisterFormDesign";
  } else {
    func.displayName = `PlasmicRegisterFormDesign.${nodeName}`;
  }
  return func;
}

export const PlasmicRegisterFormDesign = Object.assign(
  // Top-level PlasmicRegisterFormDesign renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    firstName: makeNodeComponent("firstName"),
    email: makeNodeComponent("email"),
    passwordLabel: makeNodeComponent("passwordLabel"),
    email2: makeNodeComponent("email2"),
    button: makeNodeComponent("button"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicRegisterFormDesign
    internalVariantProps: PlasmicRegisterFormDesign__VariantProps,
    internalArgProps: PlasmicRegisterFormDesign__ArgProps
  }
);

export default PlasmicRegisterFormDesign;
/* prettier-ignore-end */
